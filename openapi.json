{
  "openapi": "3.0.3",
  "info": { "title": "tRPC OpenAPI", "version": "1.0.4" },
  "servers": [
    {
      "url": "https://eu-gcp-api.vg-stuff.com/v3",
      "description": "EU Production server"
    },
    {
      "url": "https://na-gcp-api.vg-stuff.com/v3",
      "description": "NA Production server"
    }
  ],
  "paths": {
    "/hooks/send_payment_info": {
      "post": {
        "operationId": "hooksRouter-sendPaymentInfo",
        "summary": "Send payment info hook",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "object",
                    "properties": {
                      "from": { "type": "string" },
                      "to": { "type": "string" },
                      "subject": { "type": "string" }
                    },
                    "required": ["from", "to", "subject"],
                    "additionalProperties": false
                  },
                  "amount_nzd": { "type": "number" },
                  "ticket_number": { "type": "number" },
                  "secret": { "type": "string" }
                },
                "required": ["email", "amount_nzd", "ticket_number", "secret"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "success": { "type": "boolean" } },
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/hooks/create_payment_session": {
      "post": {
        "operationId": "hooksRouter-createPaymentSession",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string" },
                  "amount_nzd": { "type": "number" },
                  "ticket_number": { "type": "number" },
                  "secret": { "type": "string" }
                },
                "required": ["email", "amount_nzd", "ticket_number", "secret"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session": {
                      "type": "object",
                      "properties": { "url": { "type": "string" } },
                      "required": ["url"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["session"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/hooks/force_json_from_llm": {
      "post": {
        "operationId": "hooksRouter-force_json_from_llm",
        "summary": "Force JSON from LLM",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "instructions": { "type": "string" },
                  "modelId": {},
                  "exampleJson": { "type": "string" },
                  "rawInput": {},
                  "isArray": { "type": "boolean" }
                },
                "required": ["instructions", "exampleJson"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "json": {},
                    "rawOutputString": { "type": "string" }
                  },
                  "required": ["rawOutputString"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/hooks/send_thank_you_email": {
      "post": {
        "operationId": "hooksRouter-sendThankYouEmail",
        "summary": "Send thank you email to extracted email address",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "type": "object",
                    "properties": { "messagesHistory": {} },
                    "additionalProperties": false
                  },
                  "agentId": { "type": "string" },
                  "ccList": { "type": "array", "items": { "type": "string" } }
                },
                "required": ["payload", "agentId", "ccList"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "emailResults": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": { "type": "string" },
                          "status": { "type": "string" },
                          "message": { "type": "string" },
                          "emailResponse": {}
                        },
                        "required": ["email", "status", "message"],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": ["success", "message", "emailResults"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/leads": {
      "post": {
        "operationId": "leadsRouter-createLead",
        "summary": "Create Lead",
        "description": "Creates a new lead with the specified information",
        "tags": ["Leads"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "lead": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "nullable": true,
                        "description": "The email of the lead."
                      },
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "description": "The name of the lead."
                      },
                      "phone": {
                        "type": "string",
                        "nullable": true,
                        "description": "The phone number of the lead."
                      },
                      "metaData": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "The address of the lead."
                          },
                          "company": {
                            "type": "string",
                            "description": "The company of the lead."
                          },
                          "notes": {
                            "type": "string",
                            "description": "The notes of the lead."
                          },
                          "source": {
                            "type": "string",
                            "default": "chat",
                            "description": "The source of the lead."
                          }
                        },
                        "additionalProperties": false
                      },
                      "agentId": {
                        "anyOf": [{ "type": "string" }, { "type": "number" }],
                        "description": "The agent id of the lead owner."
                      }
                    },
                    "required": ["agentId"],
                    "additionalProperties": false
                  }
                },
                "required": ["lead"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {}
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "get": {
        "operationId": "leadsRouter-getLeads",
        "summary": "Get Leads",
        "tags": ["Leads"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": { "type": "array" }
                  },
                  "required": ["success", "message", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/leads/{id}": {
      "patch": {
        "operationId": "leadsRouter-updateLead",
        "summary": "Update Lead",
        "tags": ["Leads"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "lead": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "nullable": true,
                        "description": "The email of the lead."
                      },
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "description": "The name of the lead."
                      },
                      "phone": {
                        "type": "string",
                        "nullable": true,
                        "description": "The phone number of the lead."
                      },
                      "metaData": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "The address of the lead."
                          },
                          "company": {
                            "type": "string",
                            "description": "The company of the lead."
                          },
                          "notes": {
                            "type": "string",
                            "description": "The notes of the lead."
                          },
                          "source": {
                            "type": "string",
                            "default": "chat",
                            "description": "The source of the lead."
                          }
                        },
                        "additionalProperties": false
                      },
                      "convoId": {
                        "anyOf": [{ "type": "string" }, { "type": "number" }],
                        "description": "The convo id of the lead."
                      },
                      "ts": {
                        "anyOf": [{ "type": "number" }, { "type": "string" }],
                        "description": "The timestamp of the lead."
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "required": ["lead"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {}
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "delete": {
        "operationId": "leadsRouter-deleteLead",
        "summary": "Delete Lead",
        "tags": ["Leads"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" }
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "get": {
        "operationId": "leadsRouter-getLead",
        "summary": "Get Single Lead",
        "tags": ["Leads"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {}
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/leads/group": {
      "delete": {
        "operationId": "leadsRouter-deleteLeadsByGroup",
        "summary": "Delete Leads by Group",
        "tags": ["Leads"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "deletedCount": { "type": "number" }
                  },
                  "required": ["success", "message", "deletedCount"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/leads": {
      "get": {
        "operationId": "leadsRouter-listAgentLeads",
        "summary": "Get all agent leads",
        "tags": ["leads"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "number", "minimum": 1 }
          },
          {
            "name": "groupName",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "propertyFilter",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "leads": { "type": "array" },
                    "total": { "type": "number" },
                    "page": { "type": "number" },
                    "limit": { "type": "number" }
                  },
                  "required": ["leads", "total", "page", "limit"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "delete": {
        "operationId": "leadsRouter-deleteAgentLeads",
        "summary": "remove agent leads",
        "tags": ["leads", "delete"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "leadIds",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": { "success": { "type": "boolean" } },
                      "required": ["success"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/leads/all": {
      "delete": {
        "operationId": "leadsRouter-deleteAllAgentLeads",
        "summary": "Delete all leads for an agent",
        "tags": ["leads", "delete", "bulk delete"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "deletedCount": { "type": "number" }
                  },
                  "required": ["success", "deletedCount"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/leads/export": {
      "get": {
        "operationId": "leadsRouter-exportAllAgentLeads",
        "summary": "Export all leads for an agent",
        "tags": ["leads", "export", "bulk export"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "timeRange",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "not": {} },
                { "type": "string", "enum": ["all", "last30days"] }
              ],
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "leads": { "type": "array" },
                    "total": { "type": "number" }
                  },
                  "required": ["leads", "total"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/leads/export-filtered": {
      "post": {
        "operationId": "leadsRouter-exportFilteredAgentLeads",
        "summary": "Export leads for an agent with filters applied",
        "tags": ["leads", "export", "filtered export"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groupName": { "type": "string" },
                  "searchTerm": { "type": "string" },
                  "propertyFilter": { "type": "string" },
                  "timeRange": {
                    "type": "string",
                    "enum": ["all", "last30days"],
                    "default": "all"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "leads": { "type": "array" },
                    "total": { "type": "number" }
                  },
                  "required": ["leads", "total"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/leads/bulk": {
      "post": {
        "operationId": "leadsRouter-importAgentLeads",
        "summary": "Import all leads given in the input csv file",
        "tags": ["leads", "bulk leads"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "leads": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "userEmail": { "type": "string" },
                        "userName": { "type": "string" },
                        "userPhone": { "type": "string" },
                        "userAddress": { "type": "string" },
                        "userCompany": { "type": "string" },
                        "userWebsite": { "type": "string" },
                        "notes": { "type": "string" },
                        "userProfilePic": { "type": "string" }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "required": ["leads"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "count": { "type": "number" }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/magic-import-leads": {
      "post": {
        "operationId": "leadsRouter-magicImportLeads",
        "summary": "Magic import leads",
        "tags": ["agents"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rawText": { "type": "string" },
                  "leadGroupId": { "type": "string" },
                  "additionalInstructions": { "type": "string" }
                },
                "required": ["rawText"],
                "additionalProperties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "leadsAdded": { "type": "array" }
                  },
                  "required": ["success", "leadsAdded"],
                  "additionalProperties": {}
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/groups": {
      "post": {
        "operationId": "leadsRouter-createNewGroup",
        "summary": "Create new group for agent leads",
        "tags": ["leads group", "group", "agent groups"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groupName": { "type": "string" },
                  "leads": { "type": "array" }
                },
                "required": ["groupName"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "application/json": { "schema": {} } }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "get": {
        "operationId": "leadsRouter-listLeadGroups",
        "summary": "List all lead groups",
        "tags": ["lead groups", "List all groups"],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string" },
                      "leadCount": { "type": "number" }
                    },
                    "required": ["name", "leadCount"],
                    "additionalProperties": false
                  }
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/groups/{groupName}": {
      "put": {
        "operationId": "leadsRouter-assignToGroup",
        "summary": "assign new leads to specifiec group name",
        "tags": [
          "group name",
          "add to group",
          "assign to group",
          "add new leads"
        ],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "leadIds": { "type": "string" } },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "leadCount": { "type": "number" }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/kb": {
      "get": {
        "operationId": "kbRouter-getAgentKBDocs",
        "summary": "Get Agent Knowledge Base",
        "tags": ["KB"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {},
                        "additionalProperties": true
                      }
                    },
                    "total": { "type": "number" },
                    "totalPages": { "type": "number" },
                    "currentPage": { "type": "number" }
                  },
                  "required": [
                    "success",
                    "message",
                    "data",
                    "total",
                    "totalPages",
                    "currentPage"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "post": {
        "operationId": "kbRouter-addKnowledgeBaseToAgent",
        "summary": "Add Knowledge Base",
        "tags": ["KB"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "content": { "type": "string" },
                  "metadata": {
                    "type": "object",
                    "properties": { "description": { "type": "string" } },
                    "required": ["description"],
                    "additionalProperties": false
                  },
                  "tags": { "type": "array", "items": { "type": "string" } },
                  "sourceType": {
                    "type": "string",
                    "enum": ["doc", "url", "sitemap"]
                  },
                  "refreshRate": {
                    "type": "string",
                    "enum": ["6h", "12h", "24h", "never"],
                    "default": "never"
                  },
                  "sitemapUrl": { "type": "string" },
                  "urls": { "type": "array", "items": { "type": "string" } },
                  "maxPages": { "type": "number" },
                  "scrapeContent": { "type": "boolean" }
                },
                "required": ["name", "sourceType"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {}
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/kb/stats": {
      "get": {
        "operationId": "kbRouter-getAgentKBStats",
        "summary": "Retrieve agent's knowledge base stats",
        "tags": ["KB"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "charCount": { "type": "number" },
                        "docsCount": { "type": "number" }
                      },
                      "required": ["charCount", "docsCount"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["success", "message", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/kb/{docId}": {
      "get": {
        "operationId": "kbRouter-getKBById",
        "summary": "Get a Knowledge Base by id",
        "tags": ["KB"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "docId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {}
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "delete": {
        "operationId": "kbRouter-deleteAgentKBDoc",
        "summary": "Delete a KB doc",
        "tags": ["KB"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "docId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" }
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "patch": {
        "operationId": "kbRouter-updateKnowledgeBase",
        "summary": "Update Knowledge Base",
        "tags": ["KB"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "content": { "type": "string" },
                  "metadata": {
                    "type": "object",
                    "properties": { "description": { "type": "string" } },
                    "required": ["description"],
                    "additionalProperties": false
                  },
                  "tags": { "type": "array", "items": { "type": "string" } },
                  "refreshRate": {
                    "type": "string",
                    "enum": ["6h", "12h", "24h", "never"]
                  },
                  "url": { "type": "string" }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "docId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {}
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/kb/delete": {
      "post": {
        "operationId": "kbRouter-bulkDeleteAgentKBDocs",
        "summary": "Bulk delete KB documents",
        "tags": ["KB"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "docIds": { "type": "array", "items": { "type": "string" } }
                },
                "required": ["docIds"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "deletedCount": { "type": "number" }
                  },
                  "required": ["success", "message", "deletedCount"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/tools": {
      "post": {
        "operationId": "toolRouter-addToolToAgent",
        "summary": "Add Tool",
        "tags": ["Tools"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "object",
                    "properties": {
                      "isDefault": {
                        "type": "boolean",
                        "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                      },
                      "method": {
                        "type": "string",
                        "enum": ["GET", "POST", "PUT", "PATCH"],
                        "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the tool, providing a human-readable identifier for display purposes."
                      },
                      "description": {
                        "type": "string",
                        "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                      },
                      "serverUrl": {
                        "type": "string",
                        "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                      },
                      "serverUrlSecret": {
                        "type": "string",
                        "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                      },
                      "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                      },
                      "isVapiTool": {
                        "type": "boolean",
                        "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                      },
                      "vapiId": {
                        "type": "string",
                        "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                      },
                      "isGlobal": {
                        "type": "boolean",
                        "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                      },
                      "toolsSettings": {},
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "A unique identifier for the field, ensuring it is distinct across the system."
                            },
                            "in": {
                              "type": "string",
                              "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                            },
                            "type": {
                              "type": "string",
                              "enum": ["string", "number", "boolean", "system"],
                              "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                            },
                            "value": {
                              "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                            },
                            "defaultValue": {
                              "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                            },
                            "key": {
                              "type": "string",
                              "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                            },
                            "description": {
                              "type": "string",
                              "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                            },
                            "required": {
                              "type": "boolean",
                              "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                            },
                            "reusable": {
                              "type": "boolean",
                              "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                            },
                            "isEnv": {
                              "type": "boolean",
                              "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                            },
                            "isSystem": {
                              "type": "boolean",
                              "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                            },
                            "agentId": {
                              "type": "string",
                              "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                            },
                            "userId": {
                              "type": "string",
                              "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                            }
                          },
                          "required": ["id"],
                          "additionalProperties": false
                        }
                      },
                      "channels": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "web-chat",
                            "whatsapp",
                            "instagram",
                            "telegram",
                            "discord",
                            "gb-chat",
                            "vapi",
                            "messenger",
                            "voice",
                            "telephony"
                          ]
                        },
                        "description": "The channels that the tool can be used on."
                      }
                    },
                    "required": ["name", "description"],
                    "additionalProperties": false
                  }
                },
                "required": ["tool"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {
                          "type": "object",
                          "properties": {
                            "isDefault": {
                              "type": "boolean",
                              "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                            },
                            "method": {
                              "type": "string",
                              "enum": ["GET", "POST", "PUT", "PATCH"],
                              "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                            },
                            "id": {
                              "type": "string",
                              "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the tool, providing a human-readable identifier for display purposes."
                            },
                            "description": {
                              "type": "string",
                              "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                            },
                            "serverUrl": {
                              "type": "string",
                              "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                            },
                            "serverUrlSecret": {
                              "type": "string",
                              "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                            },
                            "createdAt": {
                              "type": "string",
                              "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                            },
                            "updatedAt": {
                              "type": "string",
                              "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                            },
                            "disabled": {
                              "type": "boolean",
                              "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                            },
                            "isVapiTool": {
                              "type": "boolean",
                              "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                            },
                            "vapiId": {
                              "type": "string",
                              "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                            },
                            "variablesIds": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                            },
                            "agentId": {
                              "type": "string",
                              "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                            },
                            "userId": {
                              "type": "string",
                              "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                            },
                            "backchannellingPhrases": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                            },
                            "toolsSettings": {},
                            "fields": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                  },
                                  "in": {
                                    "type": "string",
                                    "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "system"
                                    ],
                                    "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                  },
                                  "value": {
                                    "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                  },
                                  "defaultValue": {
                                    "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                  },
                                  "key": {
                                    "type": "string",
                                    "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                  },
                                  "reusable": {
                                    "type": "boolean",
                                    "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                  },
                                  "isEnv": {
                                    "type": "boolean",
                                    "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                  },
                                  "isSystem": {
                                    "type": "boolean",
                                    "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                  },
                                  "agentId": {
                                    "type": "string",
                                    "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                  },
                                  "userId": {
                                    "type": "string",
                                    "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                  }
                                },
                                "required": ["id"],
                                "additionalProperties": false
                              }
                            },
                            "channels": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "web-chat",
                                  "whatsapp",
                                  "instagram",
                                  "telegram",
                                  "discord",
                                  "gb-chat",
                                  "vapi",
                                  "messenger",
                                  "voice",
                                  "telephony"
                                ]
                              },
                              "description": "The channels that the tool can be used on."
                            }
                          },
                          "required": ["id", "name", "description"],
                          "additionalProperties": false
                        }
                      },
                      "required": ["success", "message", "data"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "get": {
        "operationId": "toolRouter-getAgentTools",
        "summary": "Get Agent Tools",
        "tags": ["Agents"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "isDefault": {
                                "type": "boolean",
                                "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                              },
                              "method": {
                                "type": "string",
                                "enum": ["GET", "POST", "PUT", "PATCH"],
                                "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                              },
                              "id": {
                                "type": "string",
                                "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the tool, providing a human-readable identifier for display purposes."
                              },
                              "description": {
                                "type": "string",
                                "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                              },
                              "serverUrl": {
                                "type": "string",
                                "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                              },
                              "serverUrlSecret": {
                                "type": "string",
                                "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                              },
                              "createdAt": {
                                "type": "string",
                                "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                              },
                              "updatedAt": {
                                "type": "string",
                                "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                              },
                              "disabled": {
                                "type": "boolean",
                                "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                              },
                              "isVapiTool": {
                                "type": "boolean",
                                "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                              },
                              "vapiId": {
                                "type": "string",
                                "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                              },
                              "isGlobal": {
                                "type": "boolean",
                                "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                              },
                              "variablesIds": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                              },
                              "agentId": {
                                "type": "string",
                                "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                              },
                              "userId": {
                                "type": "string",
                                "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                              },
                              "backchannellingPhrases": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                              },
                              "toolsSettings": {},
                              "fields": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                    },
                                    "in": {
                                      "type": "string",
                                      "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "string",
                                        "number",
                                        "boolean",
                                        "system"
                                      ],
                                      "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                    },
                                    "value": {
                                      "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                    },
                                    "defaultValue": {
                                      "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                    },
                                    "key": {
                                      "type": "string",
                                      "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                    },
                                    "reusable": {
                                      "type": "boolean",
                                      "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                    },
                                    "isEnv": {
                                      "type": "boolean",
                                      "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                    },
                                    "isSystem": {
                                      "type": "boolean",
                                      "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                    },
                                    "isGlobal": {
                                      "type": "boolean",
                                      "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                    },
                                    "agentId": {
                                      "type": "string",
                                      "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                    },
                                    "userId": {
                                      "type": "string",
                                      "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                    }
                                  },
                                  "required": ["id"],
                                  "additionalProperties": false
                                }
                              },
                              "channels": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "web-chat",
                                    "whatsapp",
                                    "instagram",
                                    "telegram",
                                    "discord",
                                    "gb-chat",
                                    "vapi",
                                    "messenger",
                                    "voice",
                                    "telephony"
                                  ]
                                },
                                "description": "The channels that the tool can be used on."
                              }
                            },
                            "required": ["id", "name", "description"],
                            "additionalProperties": false
                          }
                        }
                      },
                      "required": ["success", "message", "data"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/tools/{toolId}": {
      "get": {
        "operationId": "toolRouter-getToolById",
        "summary": "Get a tool by id",
        "tags": ["Tools"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "toolId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {
                          "type": "object",
                          "properties": {
                            "isDefault": {
                              "type": "boolean",
                              "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                            },
                            "method": {
                              "type": "string",
                              "enum": ["GET", "POST", "PUT", "PATCH"],
                              "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                            },
                            "id": {
                              "type": "string",
                              "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the tool, providing a human-readable identifier for display purposes."
                            },
                            "description": {
                              "type": "string",
                              "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                            },
                            "serverUrl": {
                              "type": "string",
                              "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                            },
                            "serverUrlSecret": {
                              "type": "string",
                              "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                            },
                            "createdAt": {
                              "type": "string",
                              "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                            },
                            "updatedAt": {
                              "type": "string",
                              "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                            },
                            "disabled": {
                              "type": "boolean",
                              "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                            },
                            "isVapiTool": {
                              "type": "boolean",
                              "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                            },
                            "vapiId": {
                              "type": "string",
                              "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                            },
                            "variablesIds": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                            },
                            "agentId": {
                              "type": "string",
                              "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                            },
                            "userId": {
                              "type": "string",
                              "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                            },
                            "backchannellingPhrases": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                            },
                            "toolsSettings": {},
                            "fields": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                  },
                                  "in": {
                                    "type": "string",
                                    "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "system"
                                    ],
                                    "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                  },
                                  "value": {
                                    "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                  },
                                  "defaultValue": {
                                    "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                  },
                                  "key": {
                                    "type": "string",
                                    "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                  },
                                  "reusable": {
                                    "type": "boolean",
                                    "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                  },
                                  "isEnv": {
                                    "type": "boolean",
                                    "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                  },
                                  "isSystem": {
                                    "type": "boolean",
                                    "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                  },
                                  "agentId": {
                                    "type": "string",
                                    "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                  },
                                  "userId": {
                                    "type": "string",
                                    "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                  }
                                },
                                "required": ["id"],
                                "additionalProperties": false
                              }
                            },
                            "channels": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "web-chat",
                                  "whatsapp",
                                  "instagram",
                                  "telegram",
                                  "discord",
                                  "gb-chat",
                                  "vapi",
                                  "messenger",
                                  "voice",
                                  "telephony"
                                ]
                              },
                              "description": "The channels that the tool can be used on."
                            }
                          },
                          "required": ["id", "name", "description"],
                          "additionalProperties": false
                        }
                      },
                      "required": ["success", "message", "data"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "patch": {
        "operationId": "toolRouter-updateTool",
        "summary": "Update Tool",
        "tags": ["Tools"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "object",
                    "properties": {
                      "isDefault": {
                        "type": "boolean",
                        "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                      },
                      "method": {
                        "type": "string",
                        "enum": ["GET", "POST", "PUT", "PATCH"],
                        "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the tool, providing a human-readable identifier for display purposes."
                      },
                      "description": {
                        "type": "string",
                        "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                      },
                      "serverUrl": {
                        "type": "string",
                        "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                      },
                      "serverUrlSecret": {
                        "type": "string",
                        "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                      },
                      "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                      },
                      "isVapiTool": {
                        "type": "boolean",
                        "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                      },
                      "vapiId": {
                        "type": "string",
                        "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                      },
                      "isGlobal": {
                        "type": "boolean",
                        "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                      },
                      "variablesIds": {
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                      },
                      "toolsSettings": {},
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "A unique identifier for the field, ensuring it is distinct across the system."
                            },
                            "in": {
                              "type": "string",
                              "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                            },
                            "type": {
                              "type": "string",
                              "enum": ["string", "number", "boolean", "system"],
                              "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                            },
                            "value": {
                              "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                            },
                            "defaultValue": {
                              "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                            },
                            "key": {
                              "type": "string",
                              "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                            },
                            "description": {
                              "type": "string",
                              "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                            },
                            "required": {
                              "type": "boolean",
                              "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                            },
                            "reusable": {
                              "type": "boolean",
                              "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                            },
                            "isEnv": {
                              "type": "boolean",
                              "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                            },
                            "isSystem": {
                              "type": "boolean",
                              "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                            },
                            "agentId": {
                              "type": "string",
                              "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                            },
                            "userId": {
                              "type": "string",
                              "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                            }
                          },
                          "required": ["id"],
                          "additionalProperties": false
                        }
                      },
                      "channels": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "web-chat",
                            "whatsapp",
                            "instagram",
                            "telegram",
                            "discord",
                            "gb-chat",
                            "vapi",
                            "messenger",
                            "voice",
                            "telephony"
                          ]
                        },
                        "description": "The channels that the tool can be used on."
                      }
                    },
                    "required": ["name", "description"],
                    "additionalProperties": false
                  }
                },
                "required": ["tool"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "toolId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {
                          "type": "object",
                          "properties": {
                            "isDefault": {
                              "type": "boolean",
                              "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                            },
                            "method": {
                              "type": "string",
                              "enum": ["GET", "POST", "PUT", "PATCH"],
                              "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                            },
                            "id": {
                              "type": "string",
                              "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the tool, providing a human-readable identifier for display purposes."
                            },
                            "description": {
                              "type": "string",
                              "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                            },
                            "serverUrl": {
                              "type": "string",
                              "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                            },
                            "serverUrlSecret": {
                              "type": "string",
                              "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                            },
                            "createdAt": {
                              "type": "string",
                              "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                            },
                            "updatedAt": {
                              "type": "string",
                              "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                            },
                            "disabled": {
                              "type": "boolean",
                              "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                            },
                            "isVapiTool": {
                              "type": "boolean",
                              "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                            },
                            "vapiId": {
                              "type": "string",
                              "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                            },
                            "variablesIds": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                            },
                            "agentId": {
                              "type": "string",
                              "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                            },
                            "userId": {
                              "type": "string",
                              "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                            },
                            "backchannellingPhrases": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                            },
                            "toolsSettings": {},
                            "fields": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                  },
                                  "in": {
                                    "type": "string",
                                    "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "system"
                                    ],
                                    "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                  },
                                  "value": {
                                    "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                  },
                                  "defaultValue": {
                                    "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                  },
                                  "key": {
                                    "type": "string",
                                    "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                  },
                                  "reusable": {
                                    "type": "boolean",
                                    "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                  },
                                  "isEnv": {
                                    "type": "boolean",
                                    "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                  },
                                  "isSystem": {
                                    "type": "boolean",
                                    "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                  },
                                  "agentId": {
                                    "type": "string",
                                    "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                  },
                                  "userId": {
                                    "type": "string",
                                    "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                  }
                                },
                                "required": ["id"],
                                "additionalProperties": false
                              }
                            },
                            "channels": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "web-chat",
                                  "whatsapp",
                                  "instagram",
                                  "telegram",
                                  "discord",
                                  "gb-chat",
                                  "vapi",
                                  "messenger",
                                  "voice",
                                  "telephony"
                                ]
                              },
                              "description": "The channels that the tool can be used on."
                            }
                          },
                          "required": ["id", "name", "description"],
                          "additionalProperties": false
                        }
                      },
                      "required": ["success", "message", "data"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "delete": {
        "operationId": "toolRouter-deleteTool",
        "summary": "Delete a tool by id",
        "tags": ["Tools"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "toolId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" }
                      },
                      "required": ["success", "message"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/variables": {
      "post": {
        "operationId": "variableRouter-addVariableToAgent",
        "summary": "Add Variable",
        "tags": ["Variables"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "variable": {
                    "type": "object",
                    "properties": {
                      "in": {
                        "type": "string",
                        "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                      },
                      "type": {
                        "type": "string",
                        "enum": ["string", "number", "boolean", "system"],
                        "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                      },
                      "value": {
                        "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                      },
                      "defaultValue": {
                        "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                      },
                      "key": {
                        "type": "string",
                        "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                      },
                      "description": {
                        "type": "string",
                        "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                      },
                      "required": {
                        "type": "boolean",
                        "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                      },
                      "reusable": {
                        "type": "boolean",
                        "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                      },
                      "isEnv": {
                        "type": "boolean",
                        "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                      },
                      "isSystem": {
                        "type": "boolean",
                        "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                      },
                      "isGlobal": {
                        "type": "boolean",
                        "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "required": ["variable"],
                "additionalProperties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "A unique identifier for the field, ensuring it is distinct across the system."
                            },
                            "in": {
                              "type": "string",
                              "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                            },
                            "type": {
                              "type": "string",
                              "enum": ["string", "number", "boolean", "system"],
                              "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                            },
                            "value": {
                              "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                            },
                            "defaultValue": {
                              "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                            },
                            "key": {
                              "type": "string",
                              "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                            },
                            "description": {
                              "type": "string",
                              "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                            },
                            "required": {
                              "type": "boolean",
                              "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                            },
                            "reusable": {
                              "type": "boolean",
                              "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                            },
                            "isEnv": {
                              "type": "boolean",
                              "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                            },
                            "isSystem": {
                              "type": "boolean",
                              "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                            },
                            "agentId": {
                              "type": "string",
                              "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                            },
                            "userId": {
                              "type": "string",
                              "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                            }
                          },
                          "required": ["id"],
                          "additionalProperties": false
                        }
                      },
                      "required": ["success", "message", "data"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "get": {
        "operationId": "variableRouter-getAgentVariables",
        "summary": "Get Agent Variables",
        "tags": ["Agents"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "A unique identifier for the field, ensuring it is distinct across the system."
                              },
                              "in": {
                                "type": "string",
                                "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "string",
                                  "number",
                                  "boolean",
                                  "system"
                                ],
                                "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                              },
                              "value": {
                                "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                              },
                              "defaultValue": {
                                "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                              },
                              "key": {
                                "type": "string",
                                "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                              },
                              "description": {
                                "type": "string",
                                "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                              },
                              "required": {
                                "type": "boolean",
                                "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                              },
                              "reusable": {
                                "type": "boolean",
                                "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                              },
                              "isEnv": {
                                "type": "boolean",
                                "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                              },
                              "isSystem": {
                                "type": "boolean",
                                "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                              },
                              "isGlobal": {
                                "type": "boolean",
                                "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                              },
                              "agentId": {
                                "type": "string",
                                "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                              },
                              "userId": {
                                "type": "string",
                                "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                              }
                            },
                            "required": ["id"],
                            "additionalProperties": false
                          }
                        }
                      },
                      "required": ["success", "message", "data"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/variables/{variableId}": {
      "get": {
        "operationId": "variableRouter-getVariableById",
        "summary": "Get a variable by id",
        "tags": ["Variables"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "variableId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "A unique identifier for the field, ensuring it is distinct across the system."
                            },
                            "in": {
                              "type": "string",
                              "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                            },
                            "type": {
                              "type": "string",
                              "enum": ["string", "number", "boolean", "system"],
                              "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                            },
                            "value": {
                              "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                            },
                            "defaultValue": {
                              "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                            },
                            "key": {
                              "type": "string",
                              "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                            },
                            "description": {
                              "type": "string",
                              "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                            },
                            "required": {
                              "type": "boolean",
                              "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                            },
                            "reusable": {
                              "type": "boolean",
                              "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                            },
                            "isEnv": {
                              "type": "boolean",
                              "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                            },
                            "isSystem": {
                              "type": "boolean",
                              "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                            },
                            "agentId": {
                              "type": "string",
                              "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                            },
                            "userId": {
                              "type": "string",
                              "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                            }
                          },
                          "required": ["id"],
                          "additionalProperties": false
                        }
                      },
                      "required": ["success", "message", "data"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "patch": {
        "operationId": "variableRouter-updateVariable",
        "summary": "Update Variable",
        "tags": ["Variables"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "variable": {
                    "type": "object",
                    "properties": {
                      "in": {
                        "type": "string",
                        "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                      },
                      "type": {
                        "type": "string",
                        "enum": ["string", "number", "boolean", "system"],
                        "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                      },
                      "value": {
                        "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                      },
                      "defaultValue": {
                        "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                      },
                      "key": {
                        "type": "string",
                        "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                      },
                      "description": {
                        "type": "string",
                        "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                      },
                      "required": {
                        "type": "boolean",
                        "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                      },
                      "reusable": {
                        "type": "boolean",
                        "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                      },
                      "isEnv": {
                        "type": "boolean",
                        "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                      },
                      "isSystem": {
                        "type": "boolean",
                        "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                      },
                      "isGlobal": {
                        "type": "boolean",
                        "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "required": ["variable"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "variableId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "A unique identifier for the field, ensuring it is distinct across the system."
                            },
                            "in": {
                              "type": "string",
                              "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                            },
                            "type": {
                              "type": "string",
                              "enum": ["string", "number", "boolean", "system"],
                              "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                            },
                            "value": {
                              "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                            },
                            "defaultValue": {
                              "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                            },
                            "key": {
                              "type": "string",
                              "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                            },
                            "description": {
                              "type": "string",
                              "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                            },
                            "required": {
                              "type": "boolean",
                              "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                            },
                            "reusable": {
                              "type": "boolean",
                              "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                            },
                            "isEnv": {
                              "type": "boolean",
                              "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                            },
                            "isSystem": {
                              "type": "boolean",
                              "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                            },
                            "agentId": {
                              "type": "string",
                              "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                            },
                            "userId": {
                              "type": "string",
                              "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                            }
                          },
                          "required": ["id"],
                          "additionalProperties": false
                        }
                      },
                      "required": ["success", "message", "data"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "delete": {
        "operationId": "variableRouter-deleteVariable",
        "summary": "Delete a variable by id",
        "tags": ["Variables"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "variableId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" }
                      },
                      "required": ["success", "message"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/campaigns": {
      "get": {
        "operationId": "campaignRouter-listCampaigns",
        "summary": "List all campaigns for the given agent",
        "tags": ["agent campaigns", "campaings"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "number", "minimum": 1 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "campaigns": { "type": "array" },
                    "total": { "type": "number" },
                    "page": { "type": "number" },
                    "limit": { "type": "number" }
                  },
                  "required": ["campaigns", "total", "page", "limit"],
                  "additionalProperties": {}
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "post": {
        "operationId": "campaignRouter-createNewCampaign",
        "summary": "Create new agent Campaign",
        "tags": ["campaign", "agent campaign", "leads campaign"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "leadGroupName": { "type": "string" },
                  "delayBetweenEachCall": { "type": "number" },
                  "concurrentSlots": { "type": "number" },
                  "initialPrompt": { "type": "string" },
                  "postCallPrompt": { "type": "string" },
                  "postCallMetrics": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "enabled": { "type": "boolean", "default": false },
                  "created_at": {
                    "type": "string",
                    "default": "2025-10-18T19:39:56.769Z"
                  },
                  "overrideInitialPrompt": {
                    "type": "boolean",
                    "default": false
                  },
                  "contactedLeads": { "type": "number" },
                  "successfulCalls": { "type": "number" },
                  "onGoingCalls": { "type": "number" },
                  "missingCalls": { "type": "number" },
                  "totalLeads": { "type": "number" },
                  "id": { "type": "string" },
                  "newlyCreatedMetrics": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "key": { "type": "string" },
                        "description": { "type": "string" },
                        "isSystem": { "type": "boolean" },
                        "type": {
                          "type": "string",
                          "enum": ["number", "boolean", "enum", "string"]
                        },
                        "options": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "createdAtUNIX": { "type": "number" },
                        "updatedAtUNIX": { "type": "number" }
                      },
                      "required": ["key", "description", "type"],
                      "additionalProperties": false
                    }
                  }
                },
                "required": [
                  "name",
                  "leadGroupName",
                  "delayBetweenEachCall",
                  "concurrentSlots"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "application/json": { "schema": {} } }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "patch": {
        "operationId": "campaignRouter-editCampaign",
        "summary": "Edit campaign",
        "tags": ["campaigns", "update campaign", "edit campaign"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "campaignData": {},
                  "newlyCreatedMetrics": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "key": { "type": "string" },
                        "description": { "type": "string" },
                        "isSystem": { "type": "boolean" },
                        "type": {
                          "type": "string",
                          "enum": ["number", "boolean", "enum", "string"]
                        },
                        "options": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "createdAtUNIX": { "type": "number" },
                        "updatedAtUNIX": { "type": "number" }
                      },
                      "required": ["key", "description", "type"],
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "success": { "type": "boolean" } },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "delete": {
        "operationId": "campaignRouter-deleteCampaign",
        "summary": "Delete campaign",
        "tags": ["campaigns", "remove campaign", "delete campaign"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "campaignId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "success": { "type": "boolean" } },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/campaigns/{campaignId}": {
      "patch": {
        "operationId": "campaignRouter-toggleCampaignState",
        "summary": "Enable campaign to run",
        "tags": ["run campaign", "enable campaign"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "ownerId": { "type": "string" } },
                "required": ["ownerId"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "enabled": { "type": "boolean" },
                    "status": { "type": "string" }
                  },
                  "required": ["enabled"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/campaigns/{campaignId}/restart": {
      "patch": {
        "operationId": "campaignRouter-restartCampaign",
        "summary": "Restart campaign",
        "tags": ["campaigns", "restart campaign", "restart campaign"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "workspaceOwnerEmail": { "type": "string" },
                  "resetConversations": { "type": "boolean", "default": false }
                },
                "required": ["workspaceOwnerEmail"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "success": { "type": "boolean" } },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/convos/export": {
      "get": {
        "operationId": "conversationRouter-exportAgentConvos",
        "summary": "Export Agent Conversations",
        "description": "Exports all conversations for the specified agent in a format suitable for download",
        "tags": ["Conversations"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "not": {} },
                { "type": "string", "enum": ["csv", "json"] }
              ],
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": { "type": "array" }
                  },
                  "required": ["success", "message", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/convos/{convoId}/export": {
      "get": {
        "operationId": "conversationRouter-exportSingleConvo",
        "summary": "Export Single Conversation",
        "description": "Exports a single conversation for the specified agent in a format suitable for download.",
        "tags": ["Conversations"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "convoId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "not": {} },
                { "type": "string", "enum": ["json", "csv"] }
              ],
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {}
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/convos": {
      "post": {
        "operationId": "conversationRouter-createAgentConvo",
        "summary": "Create Conversation",
        "description": "Creates a new conversation for the specified agent",
        "tags": ["Conversations"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "conversation": {
                    "type": "object",
                    "properties": {
                      "userEmail": { "type": "string" },
                      "userName": { "type": "string" },
                      "userPhone": { "type": "string" },
                      "userAddress": { "type": "string" },
                      "userCompany": { "type": "string" },
                      "userWebsite": { "type": "string" },
                      "notes": { "type": "string" },
                      "userProfilePic": { "type": "string" },
                      "ID": { "type": "string" },
                      "userID": {
                        "type": "string",
                        "description": "UserID/ConvoID it is the phone number of the user if it is a call and is NOT unique for every individual call/conversation."
                      },
                      "campaignId": {
                        "type": "string",
                        "description": "The campaign id that the call may belong to."
                      },
                      "userImage": {
                        "type": "string",
                        "description": "This is the image of the user that is used to display in the lead card."
                      },
                      "socialHandle": { "type": "string" },
                      "isFollowingBusiness": { "type": "boolean" },
                      "socialVerified": { "type": "boolean" },
                      "userOs": { "type": "string" },
                      "userBrowser": { "type": "string" },
                      "origin": {},
                      "messagesNum": { "type": "number", "default": 0 },
                      "interactionsNum": { "type": "number" },
                      "ts": { "type": "number" },
                      "tags": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "convoTimeSeconds": { "type": "number" },
                      "firstMessageTS": { "type": "number" },
                      "lastMessageTS": { "type": "number" },
                      "userPlatform": { "type": "string" },
                      "state": {
                        "type": "string",
                        "enum": [
                          "requested_chat",
                          "human-chatting",
                          "ai-chatting",
                          "ended_chat"
                        ]
                      },
                      "chatAssignedTo": { "type": "string" },
                      "lastModified": { "type": "number" },
                      "sessionsNum": { "type": "number" },
                      "lang": { "type": "string" },
                      "vapi": {
                        "type": "object",
                        "properties": {
                          "cost": { "type": "number" },
                          "callDuration": { "type": "number" },
                          "recordingUrl": { "type": "string" },
                          "callerPhoneNumber": { "type": "string" },
                          "calleePhoneNumber": { "type": "string" },
                          "callStatus": { "type": "string" },
                          "callError": { "type": "string" }
                        },
                        "additionalProperties": false
                      },
                      "ratingFrom5": { "type": "number" },
                      "totalUserInteractions": { "type": "number" },
                      "isBlocked": { "type": "boolean" },
                      "nodesInfo": {
                        "type": "object",
                        "properties": { "currentNode": { "type": "string" } },
                        "additionalProperties": false
                      },
                      "capturedVariables": {},
                      "campaignCalls": { "type": "array" },
                      "sessions": { "type": "array" },
                      "endReason": { "type": "string" },
                      "isTest": { "type": "boolean" },
                      "metrics": { "type": "array" },
                      "notifyToUserId": { "type": "string" },
                      "averageLatency": { "type": "number" },
                      "voice": {
                        "type": "object",
                        "properties": {
                          "latestSessionId": { "type": "string" },
                          "listenUrl": {
                            "type": "string",
                            "description": "This is the url that is used to listen to the call in realtime."
                          },
                          "listenUrlUNIX": { "type": "number" }
                        },
                        "additionalProperties": false
                      },
                      "detailedCost": {
                        "type": "object",
                        "properties": {
                          "totalCreditsConsumed": { "type": "number" },
                          "speechGenCost": { "type": "number" },
                          "transcriberCost": { "type": "number" },
                          "twilioCost": { "type": "number" },
                          "llmCost": { "type": "number" }
                        },
                        "additionalProperties": false
                      },
                      "summary": {
                        "type": "string",
                        "description": "This is the summary of the conversation that is generated by the AI."
                      },
                      "requestedTeamKey": { "type": "string" },
                      "delegatedBy": {
                        "type": "string",
                        "description": "ID of the user who delegated this chat"
                      },
                      "delegatedAt": {
                        "type": "number",
                        "description": "Unix timestamp when the chat was delegated"
                      },
                      "lastViewed": {
                        "type": "number",
                        "description": "Unix timestamp when the conversation was last viewed/opened"
                      },
                      "note": { "type": "string" },
                      "title": { "type": "string" },
                      "lastMessage": { "type": "string" }
                    },
                    "required": ["ts"],
                    "additionalProperties": false
                  }
                },
                "required": ["conversation"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "userEmail": { "type": "string" },
                        "userName": { "type": "string" },
                        "userPhone": { "type": "string" },
                        "userAddress": { "type": "string" },
                        "userCompany": { "type": "string" },
                        "userWebsite": { "type": "string" },
                        "notes": { "type": "string" },
                        "userProfilePic": { "type": "string" },
                        "ID": { "type": "string" },
                        "userID": {
                          "type": "string",
                          "description": "UserID/ConvoID it is the phone number of the user if it is a call and is NOT unique for every individual call/conversation."
                        },
                        "campaignId": {
                          "type": "string",
                          "description": "The campaign id that the call may belong to."
                        },
                        "userImage": {
                          "type": "string",
                          "description": "This is the image of the user that is used to display in the lead card."
                        },
                        "socialHandle": { "type": "string" },
                        "isFollowingBusiness": { "type": "boolean" },
                        "socialVerified": { "type": "boolean" },
                        "userOs": { "type": "string" },
                        "userBrowser": { "type": "string" },
                        "origin": {},
                        "messagesNum": { "type": "number" },
                        "interactionsNum": { "type": "number" },
                        "ts": { "type": "number" },
                        "tags": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "convoTimeSeconds": { "type": "number" },
                        "firstMessageTS": { "type": "number" },
                        "lastMessageTS": { "type": "number" },
                        "userPlatform": { "type": "string" },
                        "state": {
                          "type": "string",
                          "enum": [
                            "requested_chat",
                            "human-chatting",
                            "ai-chatting",
                            "ended_chat"
                          ]
                        },
                        "chatAssignedTo": { "type": "string" },
                        "lastModified": { "type": "number" },
                        "sessionsNum": { "type": "number" },
                        "lang": { "type": "string" },
                        "vapi": {
                          "type": "object",
                          "properties": {
                            "cost": { "type": "number" },
                            "callDuration": { "type": "number" },
                            "recordingUrl": { "type": "string" },
                            "callerPhoneNumber": { "type": "string" },
                            "calleePhoneNumber": { "type": "string" },
                            "callStatus": { "type": "string" },
                            "callError": { "type": "string" }
                          },
                          "additionalProperties": false
                        },
                        "ratingFrom5": { "type": "number" },
                        "totalUserInteractions": { "type": "number" },
                        "isBlocked": { "type": "boolean" },
                        "nodesInfo": {
                          "type": "object",
                          "properties": { "currentNode": { "type": "string" } },
                          "additionalProperties": false
                        },
                        "capturedVariables": {},
                        "campaignCalls": { "type": "array" },
                        "sessions": { "type": "array" },
                        "endReason": { "type": "string" },
                        "isTest": { "type": "boolean" },
                        "metrics": { "type": "array" },
                        "notifyToUserId": { "type": "string" },
                        "averageLatency": { "type": "number" },
                        "voice": {
                          "type": "object",
                          "properties": {
                            "latestSessionId": { "type": "string" },
                            "listenUrl": {
                              "type": "string",
                              "description": "This is the url that is used to listen to the call in realtime."
                            },
                            "listenUrlUNIX": { "type": "number" }
                          },
                          "additionalProperties": false
                        },
                        "detailedCost": {
                          "type": "object",
                          "properties": {
                            "totalCreditsConsumed": { "type": "number" },
                            "speechGenCost": { "type": "number" },
                            "transcriberCost": { "type": "number" },
                            "twilioCost": { "type": "number" },
                            "llmCost": { "type": "number" }
                          },
                          "additionalProperties": false
                        },
                        "summary": {
                          "type": "string",
                          "description": "This is the summary of the conversation that is generated by the AI."
                        },
                        "requestedTeamKey": { "type": "string" },
                        "delegatedBy": {
                          "type": "string",
                          "description": "ID of the user who delegated this chat"
                        },
                        "delegatedAt": {
                          "type": "number",
                          "description": "Unix timestamp when the chat was delegated"
                        },
                        "lastViewed": {
                          "type": "number",
                          "description": "Unix timestamp when the conversation was last viewed/opened"
                        },
                        "note": { "type": "string" },
                        "title": { "type": "string" },
                        "lastMessage": { "type": "string" }
                      },
                      "additionalProperties": false
                    }
                  },
                  "required": ["success", "message", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "get": {
        "operationId": "conversationRouter-getAgentConvos",
        "summary": "Get Agent Conversations",
        "description": "Retrieves all conversations associated with a specific agent",
        "tags": ["Conversations"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "not": {} }, { "type": "number" }],
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "not": {} }, { "type": "number" }],
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userEmail": { "type": "string" },
                          "userName": { "type": "string" },
                          "userPhone": { "type": "string" },
                          "userAddress": { "type": "string" },
                          "userCompany": { "type": "string" },
                          "userWebsite": { "type": "string" },
                          "notes": { "type": "string" },
                          "userProfilePic": { "type": "string" },
                          "ID": { "type": "string" },
                          "userID": {
                            "type": "string",
                            "description": "UserID/ConvoID it is the phone number of the user if it is a call and is NOT unique for every individual call/conversation."
                          },
                          "campaignId": {
                            "type": "string",
                            "description": "The campaign id that the call may belong to."
                          },
                          "userImage": {
                            "type": "string",
                            "description": "This is the image of the user that is used to display in the lead card."
                          },
                          "socialHandle": { "type": "string" },
                          "isFollowingBusiness": { "type": "boolean" },
                          "socialVerified": { "type": "boolean" },
                          "userOs": { "type": "string" },
                          "userBrowser": { "type": "string" },
                          "origin": {},
                          "messagesNum": { "type": "number" },
                          "interactionsNum": { "type": "number" },
                          "ts": { "type": "number" },
                          "tags": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "convoTimeSeconds": { "type": "number" },
                          "firstMessageTS": { "type": "number" },
                          "lastMessageTS": { "type": "number" },
                          "userPlatform": { "type": "string" },
                          "state": {
                            "type": "string",
                            "enum": [
                              "requested_chat",
                              "human-chatting",
                              "ai-chatting",
                              "ended_chat"
                            ]
                          },
                          "chatAssignedTo": { "type": "string" },
                          "lastModified": { "type": "number" },
                          "sessionsNum": { "type": "number" },
                          "lang": { "type": "string" },
                          "vapi": {
                            "type": "object",
                            "properties": {
                              "cost": { "type": "number" },
                              "callDuration": { "type": "number" },
                              "recordingUrl": { "type": "string" },
                              "callerPhoneNumber": { "type": "string" },
                              "calleePhoneNumber": { "type": "string" },
                              "callStatus": { "type": "string" },
                              "callError": { "type": "string" }
                            },
                            "additionalProperties": false
                          },
                          "ratingFrom5": { "type": "number" },
                          "totalUserInteractions": { "type": "number" },
                          "isBlocked": { "type": "boolean" },
                          "nodesInfo": {
                            "type": "object",
                            "properties": {
                              "currentNode": { "type": "string" }
                            },
                            "additionalProperties": false
                          },
                          "capturedVariables": {},
                          "campaignCalls": { "type": "array" },
                          "sessions": { "type": "array" },
                          "endReason": { "type": "string" },
                          "isTest": { "type": "boolean" },
                          "metrics": { "type": "array" },
                          "notifyToUserId": { "type": "string" },
                          "averageLatency": { "type": "number" },
                          "voice": {
                            "type": "object",
                            "properties": {
                              "latestSessionId": { "type": "string" },
                              "listenUrl": {
                                "type": "string",
                                "description": "This is the url that is used to listen to the call in realtime."
                              },
                              "listenUrlUNIX": { "type": "number" }
                            },
                            "additionalProperties": false
                          },
                          "detailedCost": {
                            "type": "object",
                            "properties": {
                              "totalCreditsConsumed": { "type": "number" },
                              "speechGenCost": { "type": "number" },
                              "transcriberCost": { "type": "number" },
                              "twilioCost": { "type": "number" },
                              "llmCost": { "type": "number" }
                            },
                            "additionalProperties": false
                          },
                          "summary": {
                            "type": "string",
                            "description": "This is the summary of the conversation that is generated by the AI."
                          },
                          "requestedTeamKey": { "type": "string" },
                          "delegatedBy": {
                            "type": "string",
                            "description": "ID of the user who delegated this chat"
                          },
                          "delegatedAt": {
                            "type": "number",
                            "description": "Unix timestamp when the chat was delegated"
                          },
                          "lastViewed": {
                            "type": "number",
                            "description": "Unix timestamp when the conversation was last viewed/opened"
                          },
                          "note": { "type": "string" },
                          "title": { "type": "string" },
                          "lastMessage": { "type": "string" }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": ["success", "message", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/convos/{convoId}": {
      "patch": {
        "operationId": "conversationRouter-updateAgentConvo",
        "summary": "Update Conversation",
        "description": "Updates an existing conversation for the specified agent",
        "tags": ["Conversations"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "conversation": {
                    "type": "object",
                    "properties": {
                      "userEmail": { "type": "string" },
                      "userName": { "type": "string" },
                      "userPhone": { "type": "string" },
                      "userAddress": { "type": "string" },
                      "userCompany": { "type": "string" },
                      "userWebsite": { "type": "string" },
                      "notes": { "type": "string" },
                      "userProfilePic": { "type": "string" },
                      "ID": { "type": "string" },
                      "userID": {
                        "type": "string",
                        "description": "UserID/ConvoID it is the phone number of the user if it is a call and is NOT unique for every individual call/conversation."
                      },
                      "campaignId": {
                        "type": "string",
                        "description": "The campaign id that the call may belong to."
                      },
                      "userImage": {
                        "type": "string",
                        "description": "This is the image of the user that is used to display in the lead card."
                      },
                      "socialHandle": { "type": "string" },
                      "isFollowingBusiness": { "type": "boolean" },
                      "socialVerified": { "type": "boolean" },
                      "userOs": { "type": "string" },
                      "userBrowser": { "type": "string" },
                      "origin": {},
                      "messagesNum": { "type": "number" },
                      "interactionsNum": { "type": "number" },
                      "ts": { "type": "number" },
                      "tags": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "convoTimeSeconds": { "type": "number" },
                      "firstMessageTS": { "type": "number" },
                      "lastMessageTS": { "type": "number" },
                      "userPlatform": { "type": "string" },
                      "state": {
                        "type": "string",
                        "enum": [
                          "requested_chat",
                          "human-chatting",
                          "ai-chatting",
                          "ended_chat"
                        ]
                      },
                      "chatAssignedTo": { "type": "string" },
                      "lastModified": { "type": "number" },
                      "sessionsNum": { "type": "number" },
                      "lang": { "type": "string" },
                      "vapi": {
                        "type": "object",
                        "properties": {
                          "cost": { "type": "number" },
                          "callDuration": { "type": "number" },
                          "recordingUrl": { "type": "string" },
                          "callerPhoneNumber": { "type": "string" },
                          "calleePhoneNumber": { "type": "string" },
                          "callStatus": { "type": "string" },
                          "callError": { "type": "string" }
                        },
                        "additionalProperties": false
                      },
                      "ratingFrom5": { "type": "number" },
                      "totalUserInteractions": { "type": "number" },
                      "isBlocked": { "type": "boolean" },
                      "nodesInfo": {
                        "type": "object",
                        "properties": { "currentNode": { "type": "string" } },
                        "additionalProperties": false
                      },
                      "capturedVariables": {},
                      "campaignCalls": { "type": "array" },
                      "sessions": { "type": "array" },
                      "endReason": { "type": "string" },
                      "isTest": { "type": "boolean" },
                      "metrics": { "type": "array" },
                      "notifyToUserId": { "type": "string" },
                      "averageLatency": { "type": "number" },
                      "voice": {
                        "type": "object",
                        "properties": {
                          "latestSessionId": { "type": "string" },
                          "listenUrl": {
                            "type": "string",
                            "description": "This is the url that is used to listen to the call in realtime."
                          },
                          "listenUrlUNIX": { "type": "number" }
                        },
                        "additionalProperties": false
                      },
                      "detailedCost": {
                        "type": "object",
                        "properties": {
                          "totalCreditsConsumed": { "type": "number" },
                          "speechGenCost": { "type": "number" },
                          "transcriberCost": { "type": "number" },
                          "twilioCost": { "type": "number" },
                          "llmCost": { "type": "number" }
                        },
                        "additionalProperties": false
                      },
                      "summary": {
                        "type": "string",
                        "description": "This is the summary of the conversation that is generated by the AI."
                      },
                      "requestedTeamKey": { "type": "string" },
                      "delegatedBy": {
                        "type": "string",
                        "description": "ID of the user who delegated this chat"
                      },
                      "delegatedAt": {
                        "type": "number",
                        "description": "Unix timestamp when the chat was delegated"
                      },
                      "lastViewed": {
                        "type": "number",
                        "description": "Unix timestamp when the conversation was last viewed/opened"
                      },
                      "note": { "type": "string" },
                      "title": { "type": "string" },
                      "lastMessage": { "type": "string" }
                    },
                    "additionalProperties": false
                  }
                },
                "required": ["conversation"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "convoId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "userEmail": { "type": "string" },
                        "userName": { "type": "string" },
                        "userPhone": { "type": "string" },
                        "userAddress": { "type": "string" },
                        "userCompany": { "type": "string" },
                        "userWebsite": { "type": "string" },
                        "notes": { "type": "string" },
                        "userProfilePic": { "type": "string" },
                        "ID": { "type": "string" },
                        "userID": {
                          "type": "string",
                          "description": "UserID/ConvoID it is the phone number of the user if it is a call and is NOT unique for every individual call/conversation."
                        },
                        "campaignId": {
                          "type": "string",
                          "description": "The campaign id that the call may belong to."
                        },
                        "userImage": {
                          "type": "string",
                          "description": "This is the image of the user that is used to display in the lead card."
                        },
                        "socialHandle": { "type": "string" },
                        "isFollowingBusiness": { "type": "boolean" },
                        "socialVerified": { "type": "boolean" },
                        "userOs": { "type": "string" },
                        "userBrowser": { "type": "string" },
                        "origin": {},
                        "messagesNum": { "type": "number" },
                        "interactionsNum": { "type": "number" },
                        "ts": { "type": "number" },
                        "tags": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "convoTimeSeconds": { "type": "number" },
                        "firstMessageTS": { "type": "number" },
                        "lastMessageTS": { "type": "number" },
                        "userPlatform": { "type": "string" },
                        "state": {
                          "type": "string",
                          "enum": [
                            "requested_chat",
                            "human-chatting",
                            "ai-chatting",
                            "ended_chat"
                          ]
                        },
                        "chatAssignedTo": { "type": "string" },
                        "lastModified": { "type": "number" },
                        "sessionsNum": { "type": "number" },
                        "lang": { "type": "string" },
                        "vapi": {
                          "type": "object",
                          "properties": {
                            "cost": { "type": "number" },
                            "callDuration": { "type": "number" },
                            "recordingUrl": { "type": "string" },
                            "callerPhoneNumber": { "type": "string" },
                            "calleePhoneNumber": { "type": "string" },
                            "callStatus": { "type": "string" },
                            "callError": { "type": "string" }
                          },
                          "additionalProperties": false
                        },
                        "ratingFrom5": { "type": "number" },
                        "totalUserInteractions": { "type": "number" },
                        "isBlocked": { "type": "boolean" },
                        "nodesInfo": {
                          "type": "object",
                          "properties": { "currentNode": { "type": "string" } },
                          "additionalProperties": false
                        },
                        "capturedVariables": {},
                        "campaignCalls": { "type": "array" },
                        "sessions": { "type": "array" },
                        "endReason": { "type": "string" },
                        "isTest": { "type": "boolean" },
                        "metrics": { "type": "array" },
                        "notifyToUserId": { "type": "string" },
                        "averageLatency": { "type": "number" },
                        "voice": {
                          "type": "object",
                          "properties": {
                            "latestSessionId": { "type": "string" },
                            "listenUrl": {
                              "type": "string",
                              "description": "This is the url that is used to listen to the call in realtime."
                            },
                            "listenUrlUNIX": { "type": "number" }
                          },
                          "additionalProperties": false
                        },
                        "detailedCost": {
                          "type": "object",
                          "properties": {
                            "totalCreditsConsumed": { "type": "number" },
                            "speechGenCost": { "type": "number" },
                            "transcriberCost": { "type": "number" },
                            "twilioCost": { "type": "number" },
                            "llmCost": { "type": "number" }
                          },
                          "additionalProperties": false
                        },
                        "summary": {
                          "type": "string",
                          "description": "This is the summary of the conversation that is generated by the AI."
                        },
                        "requestedTeamKey": { "type": "string" },
                        "delegatedBy": {
                          "type": "string",
                          "description": "ID of the user who delegated this chat"
                        },
                        "delegatedAt": {
                          "type": "number",
                          "description": "Unix timestamp when the chat was delegated"
                        },
                        "lastViewed": {
                          "type": "number",
                          "description": "Unix timestamp when the conversation was last viewed/opened"
                        },
                        "note": { "type": "string" },
                        "title": { "type": "string" },
                        "lastMessage": { "type": "string" }
                      },
                      "additionalProperties": false
                    }
                  },
                  "required": ["success", "message", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "get": {
        "operationId": "conversationRouter-getAgentConvo",
        "summary": "Get Single Conversation",
        "description": "Retrieves details of a specific conversation for the specified agent",
        "tags": ["Conversations"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "convoId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "userEmail": { "type": "string" },
                        "userName": { "type": "string" },
                        "userPhone": { "type": "string" },
                        "userAddress": { "type": "string" },
                        "userCompany": { "type": "string" },
                        "userWebsite": { "type": "string" },
                        "notes": { "type": "string" },
                        "userProfilePic": { "type": "string" },
                        "ID": { "type": "string" },
                        "userID": {
                          "type": "string",
                          "description": "UserID/ConvoID it is the phone number of the user if it is a call and is NOT unique for every individual call/conversation."
                        },
                        "campaignId": {
                          "type": "string",
                          "description": "The campaign id that the call may belong to."
                        },
                        "userImage": {
                          "type": "string",
                          "description": "This is the image of the user that is used to display in the lead card."
                        },
                        "socialHandle": { "type": "string" },
                        "isFollowingBusiness": { "type": "boolean" },
                        "socialVerified": { "type": "boolean" },
                        "userOs": { "type": "string" },
                        "userBrowser": { "type": "string" },
                        "origin": {},
                        "messagesNum": { "type": "number" },
                        "interactionsNum": { "type": "number" },
                        "ts": { "type": "number" },
                        "tags": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "convoTimeSeconds": { "type": "number" },
                        "firstMessageTS": { "type": "number" },
                        "lastMessageTS": { "type": "number" },
                        "userPlatform": { "type": "string" },
                        "state": {
                          "type": "string",
                          "enum": [
                            "requested_chat",
                            "human-chatting",
                            "ai-chatting",
                            "ended_chat"
                          ]
                        },
                        "chatAssignedTo": { "type": "string" },
                        "lastModified": { "type": "number" },
                        "sessionsNum": { "type": "number" },
                        "lang": { "type": "string" },
                        "vapi": {
                          "type": "object",
                          "properties": {
                            "cost": { "type": "number" },
                            "callDuration": { "type": "number" },
                            "recordingUrl": { "type": "string" },
                            "callerPhoneNumber": { "type": "string" },
                            "calleePhoneNumber": { "type": "string" },
                            "callStatus": { "type": "string" },
                            "callError": { "type": "string" }
                          },
                          "additionalProperties": false
                        },
                        "ratingFrom5": { "type": "number" },
                        "totalUserInteractions": { "type": "number" },
                        "isBlocked": { "type": "boolean" },
                        "nodesInfo": {
                          "type": "object",
                          "properties": { "currentNode": { "type": "string" } },
                          "additionalProperties": false
                        },
                        "capturedVariables": {},
                        "campaignCalls": { "type": "array" },
                        "sessions": { "type": "array" },
                        "endReason": { "type": "string" },
                        "isTest": { "type": "boolean" },
                        "metrics": { "type": "array" },
                        "notifyToUserId": { "type": "string" },
                        "averageLatency": { "type": "number" },
                        "voice": {
                          "type": "object",
                          "properties": {
                            "latestSessionId": { "type": "string" },
                            "listenUrl": {
                              "type": "string",
                              "description": "This is the url that is used to listen to the call in realtime."
                            },
                            "listenUrlUNIX": { "type": "number" }
                          },
                          "additionalProperties": false
                        },
                        "detailedCost": {
                          "type": "object",
                          "properties": {
                            "totalCreditsConsumed": { "type": "number" },
                            "speechGenCost": { "type": "number" },
                            "transcriberCost": { "type": "number" },
                            "twilioCost": { "type": "number" },
                            "llmCost": { "type": "number" }
                          },
                          "additionalProperties": false
                        },
                        "summary": {
                          "type": "string",
                          "description": "This is the summary of the conversation that is generated by the AI."
                        },
                        "requestedTeamKey": { "type": "string" },
                        "delegatedBy": {
                          "type": "string",
                          "description": "ID of the user who delegated this chat"
                        },
                        "delegatedAt": {
                          "type": "number",
                          "description": "Unix timestamp when the chat was delegated"
                        },
                        "lastViewed": {
                          "type": "number",
                          "description": "Unix timestamp when the conversation was last viewed/opened"
                        },
                        "note": { "type": "string" },
                        "title": { "type": "string" },
                        "lastMessage": { "type": "string" }
                      },
                      "additionalProperties": false
                    }
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "delete": {
        "operationId": "conversationRouter-deleteAgentConvo",
        "summary": "Delete Conversation",
        "description": "Deletes a specific conversation for the specified agent",
        "tags": ["Conversations"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "convoId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" }
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/convos/{convoId}/assign": {
      "post": {
        "operationId": "conversationRouter-assignConversation",
        "summary": "Assign Conversation",
        "description": "Assigns a conversation to a specific user for manual delegation",
        "tags": ["Conversations"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assignToUserId": { "type": "string" },
                  "delegatedBy": { "type": "string" }
                },
                "required": ["assignToUserId"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "convoId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "assignedUser": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" },
                        "email": { "type": "string" }
                      },
                      "additionalProperties": false
                    }
                  },
                  "required": ["success", "message", "assignedUser"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/convos/{convoId}/details": {
      "get": {
        "operationId": "conversationRouter-getConvoDetails",
        "summary": "Get full conversation details including recordings from Firebase",
        "tags": ["Conversations", "Sessions"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "convoId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "enum": ["eu", "na"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "application/json": { "schema": {} } }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/workspace/sessions": {
      "get": {
        "operationId": "conversationRouter-getWorkspaceSessions",
        "summary": "Get workspace-level sessions with pagination",
        "tags": ["Sessions", "Workspace"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "workspaceId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "enum": ["eu", "na"] }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "not": {} }, { "type": "number", "minimum": 0 }],
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "not": {} },
                { "type": "number", "minimum": 1, "maximum": 100 }
              ],
              "default": 50
            }
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sessions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "convoId": { "type": "string" },
                          "agentId": { "type": "string" },
                          "agentName": { "type": "string" },
                          "userName": { "type": "string" },
                          "userEmail": { "type": "string" },
                          "userPhone": { "type": "string" },
                          "origin": { "type": "string" },
                          "state": { "type": "string" },
                          "sessionData": {
                            "type": "object",
                            "properties": {
                              "turns": { "type": "array" },
                              "sessions": {
                                "type": "array",
                                "items": { "type": "array" }
                              },
                              "currentSessionTs": { "type": "number" },
                              "allSessionTimestamps": {
                                "type": "array",
                                "items": { "type": "number" }
                              }
                            },
                            "required": [
                              "turns",
                              "sessions",
                              "currentSessionTs",
                              "allSessionTimestamps"
                            ],
                            "additionalProperties": false
                          }
                        },
                        "required": ["convoId", "agentId", "sessionData"],
                        "additionalProperties": false
                      }
                    },
                    "timestampRange": {
                      "type": "object",
                      "properties": {
                        "oldest": { "type": "number" },
                        "newest": { "type": "number" }
                      },
                      "required": ["oldest", "newest"],
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": { "type": "number" },
                        "limit": { "type": "number" },
                        "hasMore": { "type": "boolean" },
                        "totalFetched": { "type": "number" }
                      },
                      "required": ["page", "limit", "hasMore", "totalFetched"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["sessions", "timestampRange", "pagination"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/orgs/{orgId}/agents": {
      "get": {
        "operationId": "orgsRouter-getOrgAgents",
        "summary": "Get Agents by Organization",
        "description": "Returns a list of agents belonging to the specified organization",
        "tags": ["Organizations"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "not": {} }, { "type": "number" }],
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "not": {} }, { "type": "number" }],
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": { "type": "array" },
                    "total": { "type": "number" },
                    "totalPages": { "type": "number" },
                    "currentPage": { "type": "number" }
                  },
                  "required": [
                    "success",
                    "message",
                    "data",
                    "total",
                    "totalPages",
                    "currentPage"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/orgs/{orgId}/clients": {
      "get": {
        "operationId": "orgsRouter-getOrgClients",
        "summary": "Get Clients by Organization",
        "description": "Returns a list of clients belonging to the specified organization",
        "tags": ["Organizations"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "not": {} }, { "type": "number" }],
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "not": {} }, { "type": "number" }],
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": { "type": "array" },
                    "total": { "type": "number" },
                    "totalPages": { "type": "number" },
                    "currentPage": { "type": "number" }
                  },
                  "required": [
                    "success",
                    "message",
                    "data",
                    "total",
                    "totalPages",
                    "currentPage"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/orgs": {
      "get": {
        "operationId": "orgsRouter-getAllOrgs",
        "summary": "Get All Organizations",
        "description": "Returns a list of all organizations the authenticated user has access to",
        "tags": ["Organizations"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "not": {} }, { "type": "number" }],
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "not": {} }, { "type": "number" }],
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": { "type": "array" },
                    "total": { "type": "number" },
                    "totalPages": { "type": "number" },
                    "currentPage": { "type": "number" }
                  },
                  "required": [
                    "success",
                    "message",
                    "data",
                    "total",
                    "totalPages",
                    "currentPage"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/orgs/{orgId}": {
      "delete": {
        "operationId": "orgsRouter-deleteOrg",
        "summary": "Delete Organization",
        "description": "Deletes an organization and all its associated clients",
        "tags": ["Organizations"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "deletedClientsCount": { "type": "number" }
                  },
                  "required": ["success", "message", "deletedClientsCount"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/onboarding/crawler-webhook": {
      "post": {
        "operationId": "onboarding-receiveCrawlerResults",
        "summary": "Receive Crawler Results",
        "description": "Webhook endpoint to receive results from the crawler service",
        "tags": ["Onboarding", "Crawler"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobId": { "type": "string" },
                  "status": { "type": "string" },
                  "startTime": { "type": "string" },
                  "jobType": { "type": "string" },
                  "elapsedSeconds": { "type": "number" },
                  "result": {
                    "type": "object",
                    "properties": {
                      "urlScraped": { "type": "string" },
                      "content": {},
                      "urlsDiscovered": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    },
                    "additionalProperties": false
                  },
                  "stats": {
                    "type": "object",
                    "properties": {
                      "isRunning": { "type": "boolean" },
                      "totalPages": { "type": "number" },
                      "completedPages": { "type": "number" },
                      "queuedUrls": { "type": "number" },
                      "activeBrowsers": { "type": "number" }
                    },
                    "additionalProperties": false
                  },
                  "error": { "type": "string" }
                },
                "required": ["jobId", "status"],
                "additionalProperties": {}
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" }
                  },
                  "required": ["success", "message"],
                  "additionalProperties": {}
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/analytics/add": {
      "post": {
        "operationId": "typedAgents-addNewAnalyticPoint",
        "summary": "Add a new analytic data point",
        "description": "Saves analytics data to the database.",
        "tags": ["Analytics"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "AnalyticsData": {},
                  "agentId": { "type": "string" },
                  "record": {
                    "type": "string",
                    "enum": ["loads", "convos", "tokens"]
                  },
                  "region": { "type": "string", "enum": ["eu", "na"] }
                },
                "required": ["agentId", "region"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {}
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/analytics/get": {
      "get": {
        "operationId": "typedAgents-getAnalyticsByTimeRange",
        "summary": "Retrieve analytics data",
        "description": "Fetches analytics data from both tables within a specified time range.",
        "tags": ["Analytics"],
        "parameters": [
          {
            "name": "agentId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "schema": { "type": "number" }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "schema": { "type": "number" }
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "enum": ["eu", "na"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "callSeconds": { "type": "number" },
                    "loads": { "type": "array" },
                    "convos": { "type": "array" },
                    "metrics": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": { "type": "string" },
                          "average": { "type": "number" },
                          "sum": { "type": "number" },
                          "counts": {
                            "type": "object",
                            "additionalProperties": { "type": "number" }
                          },
                          "timeSeries": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "ts": { "type": "number" },
                                "value": {
                                  "anyOf": [
                                    { "type": "string" },
                                    { "type": "number" },
                                    { "type": "boolean" },
                                    {
                                      "type": "object",
                                      "additionalProperties": {}
                                    }
                                  ]
                                },
                                "convo_id": { "type": "string" }
                              },
                              "required": ["ts", "value"],
                              "additionalProperties": false
                            }
                          },
                          "callSeconds": { "type": "number" }
                        },
                        "required": ["key"],
                        "additionalProperties": false
                      }
                    },
                    "usage": {
                      "type": "object",
                      "properties": {
                        "inputTokens": { "type": "number" },
                        "outputTokens": { "type": "number" },
                        "totalTokens": { "type": "number" },
                        "logs": { "type": "array" }
                      },
                      "required": [
                        "inputTokens",
                        "outputTokens",
                        "totalTokens",
                        "logs"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": ["loads", "convos", "metrics", "usage"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/metrics": {
      "get": {
        "operationId": "typedAgents-getAgentMetrics",
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "startAfterId",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metrics": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "key": { "type": "string" },
                          "description": { "type": "string" },
                          "isSystem": { "type": "boolean" },
                          "type": {
                            "type": "string",
                            "enum": ["number", "boolean", "enum", "string"]
                          },
                          "options": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "createdAtUNIX": { "type": "number" },
                          "updatedAtUNIX": { "type": "number" }
                        },
                        "required": ["key", "description", "type"],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": ["metrics"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "post": {
        "operationId": "typedAgents-createAgentMetric",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metric": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "key": { "type": "string" },
                      "description": { "type": "string" },
                      "isSystem": { "type": "boolean" },
                      "type": {
                        "type": "string",
                        "enum": ["number", "boolean", "enum", "string"]
                      },
                      "options": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "createdAtUNIX": { "type": "number" },
                      "updatedAtUNIX": { "type": "number" }
                    },
                    "required": ["key", "description", "type"],
                    "additionalProperties": false
                  }
                },
                "required": ["metric"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" }
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/charts": {
      "post": {
        "operationId": "typedAgents-saveAgentChart",
        "summary": "Save a custom chart configuration",
        "description": "Saves a custom chart configuration to the agent's charts collection.",
        "tags": ["Charts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chart": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "type": { "type": "string" },
                      "title": { "type": "string" },
                      "description": { "type": "string" },
                      "metric": { "type": "string" },
                      "values": { "type": "array" },
                      "size": { "type": "string" },
                      "iconType": { "type": "string" },
                      "customIconUrl": { "type": "string" },
                      "order": { "type": "number" },
                      "colors": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "selectedValues": {
                        "type": "array",
                        "items": {
                          "anyOf": [{ "type": "string" }, { "type": "boolean" }]
                        }
                      },
                      "aggregation": { "type": "string" }
                    },
                    "required": ["type", "title", "metric"],
                    "additionalProperties": false
                  }
                },
                "required": ["chart"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "chartId": { "type": "string" }
                  },
                  "required": ["success", "message", "chartId"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "get": {
        "operationId": "typedAgents-getAgentCharts",
        "summary": "Get custom chart configurations",
        "description": "Retrieves all custom chart configurations from the agent's charts collection.",
        "tags": ["Charts"],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "charts": { "type": "array" } },
                  "required": ["charts"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/charts/{chartId}": {
      "delete": {
        "operationId": "typedAgents-deleteAgentChart",
        "summary": "Delete a custom chart configuration",
        "description": "Deletes a custom chart configuration from the agent's charts collection.",
        "tags": ["Charts"],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "chartId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" }
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "put": {
        "operationId": "typedAgents-editAgentChart",
        "summary": "Edit a custom chart configuration",
        "description": "Updates an existing custom chart configuration in the agent's charts collection.",
        "tags": ["Charts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chart": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "title": { "type": "string" },
                      "description": { "type": "string" },
                      "metric": { "type": "string" },
                      "values": { "type": "array" },
                      "size": { "type": "string" },
                      "iconType": { "type": "string" },
                      "customIconUrl": { "type": "string" },
                      "order": { "type": "number" },
                      "colors": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "selectedValues": {
                        "type": "array",
                        "items": {
                          "anyOf": [{ "type": "string" }, { "type": "boolean" }]
                        }
                      },
                      "aggregation": { "type": "string" }
                    },
                    "additionalProperties": false
                  }
                },
                "required": ["chart"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "chartId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "chartId": { "type": "string" }
                  },
                  "required": ["success", "message", "chartId"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/metrics/delete": {
      "post": {
        "operationId": "typedAgents-deleteAgentMetrics",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metricIds": {
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "required": ["metricIds"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" }
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/org-clients": {
      "get": {
        "operationId": "typedAgents-getAgentOrgAndClients",
        "summary": "Get agent's organization and clients",
        "description": "Returns the organization and clients associated with the specified agent.",
        "tags": ["Agents"],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "org": { "nullable": true },
                    "clients": { "type": "array" }
                  },
                  "required": ["success", "message", "clients"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/utils/import-twilio-number": {
      "post": {
        "operationId": "v2Audio-importTwilioNumber",
        "summary": "Import a Twilio number",
        "description": "Import a Twilio number",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "twilioNumber": {
                    "type": "string",
                    "pattern": "^\\+",
                    "minLength": 10
                  },
                  "twilioAccountSid": { "type": "string" },
                  "twilioAccountAuthToken": { "type": "string" },
                  "twilioCallerId": { "type": "string" },
                  "workspaceId": { "type": "string" },
                  "agentId": { "type": "string" }
                },
                "required": [
                  "twilioNumber",
                  "twilioAccountSid",
                  "twilioAccountAuthToken",
                  "twilioCallerId"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "phoneNumber": { "type": "string" },
                    "phoneNumberSid": { "type": "string" },
                    "message": { "type": "string" }
                  },
                  "required": ["phoneNumber", "phoneNumberSid", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/utils/buy-twilio-number": {
      "post": {
        "operationId": "v2Audio-buyTwilioNumber",
        "summary": "Buy a Twilio number",
        "description": "Buy a Twilio number",
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "string",
                    "description": "The phone number to buy with the plus & without spaces, example: +1234567890"
                  },
                  "agentId": {
                    "type": "string",
                    "description": "The agent id to assign the number to, could be empty if you want to assign an agent later."
                  }
                },
                "required": ["number"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "phoneNumber": { "type": "string" },
                    "phoneNumberSid": { "type": "string" },
                    "message": { "type": "string" }
                  },
                  "required": ["phoneNumber", "phoneNumberSid", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/folders/create": {
      "post": {
        "operationId": "folders-createFolder",
        "summary": "Create a new folder",
        "tags": ["Folders"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "minLength": 1 },
                  "ownerID": { "type": "string", "minLength": 1 },
                  "agentIDs": {
                    "type": "array",
                    "items": { "type": "string" },
                    "default": []
                  },
                  "parentFolderID": {
                    "type": "string",
                    "nullable": true,
                    "default": null
                  },
                  "color": { "type": "string" },
                  "icon": { "type": "string" },
                  "starred": { "type": "boolean", "default": false },
                  "bucket": { "type": "string" }
                },
                "required": ["name", "ownerID"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "content": {}
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/folders/{folderId}/agents/{agentId}": {
      "post": {
        "operationId": "folders-addAgentToFolder",
        "summary": "Add an agent to a folder",
        "tags": ["Folders"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "bucket": { "type": "string" } },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "minLength": 1 }
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "minLength": 1 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "content": {
                      "type": "object",
                      "properties": {
                        "folderId": { "type": "string" },
                        "agentId": { "type": "string" },
                        "agentIDs": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      },
                      "required": ["folderId", "agentId", "agentIDs"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "delete": {
        "operationId": "folders-removeAgentFromFolder",
        "summary": "Remove an agent from a folder",
        "tags": ["Folders"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "minLength": 1 }
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "minLength": 1 }
          },
          {
            "name": "bucket",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "content": {
                      "type": "object",
                      "properties": {
                        "folderId": { "type": "string" },
                        "agentId": { "type": "string" },
                        "agentIDs": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      },
                      "required": ["folderId", "agentId", "agentIDs"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/folders/by-name-and-owner": {
      "get": {
        "operationId": "folders-getFolderByNameAndOwnerID",
        "summary": "Get a folder by name and owner ID",
        "tags": ["Folders"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "minLength": 1 }
          },
          {
            "name": "ownerID",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "minLength": 1 }
          },
          {
            "name": "bucket",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "content": {}
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/": {
      "get": {
        "operationId": "openapi",
        "description": "Say hello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {}
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/hello/{name}": {
      "post": {
        "operationId": "hello",
        "description": "Say hello",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "kemo_id": { "type": "string" } },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "name": { "type": "string" }
                  },
                  "required": ["id", "name"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents": {
      "post": {
        "operationId": "createAgent",
        "summary": "Create Agent",
        "description": "Creates a new AI agent with the specified configuration",
        "tags": ["Agents"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "agent": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "**Title**: The title of the agent."
                      },
                      "description": {
                        "type": "string",
                        "description": "**Description**: A brief description of the agent."
                      },
                      "theme": {
                        "type": "string",
                        "description": "**Theme**: The visual theme of the agent, e.g., 'blue-light' or 'custom-blue-dark'."
                      },
                      "voiceConfig": {
                        "type": "object",
                        "properties": {
                          "transcriber": {
                            "type": "object",
                            "properties": {
                              "speechConfig": {
                                "type": "object",
                                "properties": {
                                  "format": { "type": "string" },
                                  "sampleRate": { "type": "number" }
                                },
                                "additionalProperties": false
                              },
                              "modelId": { "type": "string" },
                              "patienceFactor": { "type": "number" },
                              "language": { "type": "string" },
                              "provider": {
                                "type": "string",
                                "enum": [
                                  "deepgram",
                                  "gladia",
                                  "assemblyai",
                                  "speechmatics",
                                  "google-cloud-speech",
                                  "google-live-transcription"
                                ]
                              },
                              "randomOptions": {},
                              "internal": {
                                "type": "object",
                                "properties": {
                                  "inputAudioStream": {},
                                  "debug": { "type": "boolean" }
                                },
                                "additionalProperties": false
                              },
                              "apiKey": { "type": "string" },
                              "platformSpecific": {
                                "type": "object",
                                "properties": {
                                  "deepgram": {
                                    "type": "object",
                                    "properties": {
                                      "keywords": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "Keywords to focus on in the transcription."
                                      },
                                      "language": { "type": "string" },
                                      "smart_format": { "type": "boolean" },
                                      "model": { "type": "string" },
                                      "interim_results": { "type": "boolean" },
                                      "endpointing": { "type": "number" },
                                      "no_delay": { "type": "boolean" },
                                      "autoLanguageDetection": {
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "assemblyai": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": { "type": "string" }
                                    },
                                    "required": ["modelId"],
                                    "additionalProperties": false
                                  },
                                  "googleCloud": {
                                    "type": "object",
                                    "properties": {
                                      "keywords": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "Keywords or phrases to focus on in the transcription."
                                      },
                                      "model": {
                                        "type": "string",
                                        "description": "The Google Cloud Speech model to use."
                                      },
                                      "languageCode": {
                                        "type": "string",
                                        "description": "The language code for transcription."
                                      },
                                      "enableAutomaticPunctuation": {
                                        "type": "boolean",
                                        "description": "Enable automatic punctuation."
                                      },
                                      "enableWordTimeOffsets": {
                                        "type": "boolean",
                                        "description": "Enable word time offsets."
                                      },
                                      "maxAlternatives": {
                                        "type": "number",
                                        "description": "Maximum number of recognition alternatives."
                                      },
                                      "profanityFilter": {
                                        "type": "boolean",
                                        "description": "Enable profanity filter."
                                      },
                                      "speechContexts": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "phrases": {
                                              "type": "array",
                                              "items": { "type": "string" }
                                            },
                                            "boost": { "type": "number" }
                                          },
                                          "required": ["phrases"],
                                          "additionalProperties": false
                                        },
                                        "description": "Speech contexts for better recognition."
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              },
                              "utteranceThreshold": { "type": "number" },
                              "inputVoiceEnhancer": { "type": "boolean" }
                            },
                            "required": ["provider"],
                            "additionalProperties": false,
                            "description": "**Transcriber**: The configuration options for the transcriber provider used by the agent."
                          },
                          "speechGen": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "highAudioQuality": {
                                    "type": "boolean",
                                    "description": "Generate highest quality audio possible, must have pro plan or higher on elevenlabs to enable your own key to work with this option."
                                  },
                                  "provider": {
                                    "type": "string",
                                    "enum": [
                                      "elevenlabs",
                                      "deepgram",
                                      "cartesia",
                                      "playht",
                                      "azure",
                                      "rime-ai",
                                      "openai",
                                      "playai-groq",
                                      "google-cloud",
                                      "google-live"
                                    ],
                                    "description": "Speech providers supported by the app."
                                  },
                                  "modelId": {
                                    "type": "string",
                                    "description": "The model id of the speech gen."
                                  },
                                  "voiceId": {
                                    "type": "string",
                                    "description": "The voice id for the speech service."
                                  },
                                  "apiKey": { "type": "string" },
                                  "region": { "type": "string" },
                                  "backgroundNoise": {
                                    "type": "string",
                                    "enum": [
                                      "restaurant",
                                      "office",
                                      "park",
                                      "street"
                                    ]
                                  },
                                  "punctuationBreaks": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  },
                                  "platformSpecific": {
                                    "type": "object",
                                    "properties": {
                                      "elevenLabs": {
                                        "type": "object",
                                        "properties": {
                                          "stability": { "type": "number" },
                                          "similarity_boost": {
                                            "type": "number"
                                          },
                                          "use_speaker_boost": {
                                            "type": "boolean"
                                          },
                                          "speed": { "type": "number" },
                                          "style": { "type": "number" }
                                        },
                                        "additionalProperties": false
                                      },
                                      "playht": {
                                        "type": "object",
                                        "properties": {
                                          "voiceId": { "type": "string" }
                                        },
                                        "required": ["voiceId"],
                                        "additionalProperties": false
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "backChannelling": {
                                    "type": "boolean",
                                    "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                  },
                                  "language": { "type": "string" },
                                  "enableLongMessageBackchannelling": {
                                    "type": "boolean",
                                    "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                  },
                                  "backchannelMessages": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  },
                                  "backchannelInterval": { "type": "number" },
                                  "wordsReplacements": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "word": { "type": "string" },
                                        "replacement": { "type": "string" }
                                      },
                                      "required": ["word", "replacement"],
                                      "additionalProperties": false
                                    }
                                  }
                                },
                                "required": ["provider"]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "internal": {
                                    "type": "object",
                                    "properties": {
                                      "inputTextStream": {},
                                      "audioConfig": {
                                        "type": "object",
                                        "properties": {
                                          "format": { "type": "string" },
                                          "sampleRate": { "type": "number" },
                                          "channels": { "type": "number" }
                                        },
                                        "required": [
                                          "format",
                                          "sampleRate",
                                          "channels"
                                        ],
                                        "additionalProperties": false
                                      },
                                      "emitOnComplete": { "type": "boolean" }
                                    },
                                    "additionalProperties": false
                                  }
                                }
                              }
                            ],
                            "description": "**Speech Generation**: The configuration options for the speech generation provider used by the agent."
                          },
                          "config": {
                            "type": "object",
                            "properties": {
                              "recordAudio": { "type": "boolean" },
                              "backgroundNoise": {
                                "type": "string",
                                "enum": [
                                  "restaurant",
                                  "office",
                                  "street",
                                  "none"
                                ]
                              },
                              "enableWebCalling": { "type": "boolean" },
                              "firstInputChunkUNIXMs": { "type": "number" },
                              "firstOutputChunkUNIXMs": { "type": "number" }
                            },
                            "required": ["recordAudio"],
                            "additionalProperties": false,
                            "description": "**Call Configuration**: The call configuration settings for the agent."
                          }
                        },
                        "additionalProperties": false
                      },
                      "light": {
                        "type": "boolean",
                        "description": "Whether to enable light mode for the agent. If set to true, the agent will not retain previous chat interactions for privacy reasons."
                      },
                      "enableVertex": {
                        "type": "boolean",
                        "description": "Whether to enable Vertex AI for the agent."
                      },
                      "autoOpenWidget": {
                        "type": "boolean",
                        "description": "Whether to auto-open the widget when the agent is loaded."
                      },
                      "createdAtUNIX": {
                        "type": "number",
                        "description": "The timestamp when the agent was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                      },
                      "agentPlatform": {
                        "type": "string",
                        "description": "Specifies the platform on which the agent operates, such as web, mobile, or other environments."
                      },
                      "storageID": {
                        "type": "string",
                        "description": "The identifier for the agent's storage configuration."
                      },
                      "customThemeJSONString": {
                        "type": "string",
                        "description": "A JSON string defining a custom theme for the agent's interface."
                      },
                      "lang": {
                        "type": "string",
                        "description": "Specifies the default language for the agent's interactions and responses."
                      },
                      "enableAudioSupport": {
                        "type": "boolean",
                        "description": "Enables audio features, allowing the agent to process and respond to audio inputs."
                      },
                      "AITranslateTo": {
                        "type": "string",
                        "description": "Defines the target language for AI translation during interactions."
                      },
                      "enableAITranslate": {
                        "type": "boolean",
                        "description": "Activates AI-based translation for multilingual support."
                      },
                      "disableNoReplyListener": {
                        "type": "boolean",
                        "description": "Disables the listener for instances where no reply is detected from the agent."
                      },
                      "disableHumanHandoff": {
                        "type": "boolean",
                        "description": "Prevents the agent from escalating interactions to a human operator."
                      },
                      "alwaysShowHandoff": {
                        "type": "boolean",
                        "description": "Ensures the handoff option is always visible, regardless of agent status."
                      },
                      "manualControl": {
                        "type": "boolean",
                        "description": "Allows manual control over specific agent functionalities."
                      },
                      "enableVGHandoff": {
                        "type": "boolean",
                        "description": "Activates VG-specific handoff mechanisms for the agent."
                      },
                      "enableGeoAnalytics": {
                        "type": "boolean",
                        "description": "Enables geographic analytics to track user interactions based on location."
                      },
                      "hideVoiceflowAnalytics": {
                        "type": "boolean",
                        "description": "Hides Voiceflow-specific analytics including intents, conversation flow metrics, and rating analytics."
                      },
                      "hideCallAnalytics": {
                        "type": "boolean",
                        "description": "Hides voice call analytics including duration, latency, cost breakdown, call counts, and call end reasons."
                      },
                      "hideConversationMetrics": {
                        "type": "boolean",
                        "description": "Hides conversation metrics including user retention, conversation length, time retention, and engagement metrics."
                      },
                      "hideCustomAnalytics": {
                        "type": "boolean",
                        "description": "Hides user-created custom charts and metrics from the analytics dashboard."
                      },
                      "hideVapiAnalytics": {
                        "type": "boolean",
                        "description": "Hides VAPI-specific analytics including cost tracking and voice-related metrics."
                      },
                      "hideFunnelAnalytics": {
                        "type": "boolean",
                        "description": "Hides the user engagement funnel chart that tracks progression from widget views to high engagement."
                      },
                      "fixedHandoffPopup": {
                        "type": "boolean",
                        "description": "Ensures the handoff popup remains fixed in the interface."
                      },
                      "buttonsLayout": {
                        "type": "string",
                        "enum": ["horizontal", "vertical", "in-footer"],
                        "description": "Defines the layout and style of buttons in the agent's interface."
                      },
                      "ADVANCED_customCSS": {
                        "type": "string",
                        "description": "Specifies advanced custom CSS for overriding the default styling of the agent's interface."
                      },
                      "messagesLimit": {
                        "type": "number",
                        "description": "Sets a cap on the number of messages the agent can exchange in a single session."
                      },
                      "whatsappToken": {
                        "type": "string",
                        "description": "Token for authenticating and integrating with WhatsApp services."
                      },
                      "whatsappNumberId": {
                        "type": "string",
                        "description": "The ID associated with the WhatsApp number used by the agent."
                      },
                      "whatsappBusniessId": {
                        "type": "string",
                        "description": "The business ID for WhatsApp integration, enabling enterprise-level features."
                      },
                      "waTestNumber": {
                        "type": "string",
                        "description": "A test number used during WhatsApp integration setup or testing."
                      },
                      "waVerifyPassed": {
                        "type": "boolean",
                        "description": "Indicates if WhatsApp verification was successfully completed."
                      },
                      "waTestPassed": {
                        "type": "boolean",
                        "description": "Indicates if the WhatsApp integration test was successful."
                      },
                      "webhookUrl": {
                        "type": "string",
                        "description": "The URL where the agent sends webhook events to external systems."
                      },
                      "gcloudPrivateKey": {
                        "type": "string",
                        "description": "Private key for Google Cloud services integration."
                      },
                      "gcloudClientEmail": {
                        "type": "string",
                        "description": "Client email for Google Cloud authentication."
                      },
                      "smartInit": {
                        "type": "boolean",
                        "description": "Activates smart initialization features for the agent."
                      },
                      "UIhandoffTitle": {
                        "type": "string",
                        "description": "Title displayed during UI handoff interactions."
                      },
                      "UIhandoffSubtitle": {
                        "type": "string",
                        "description": "Subtitle displayed during UI handoff interactions."
                      },
                      "igVerified": {
                        "type": "boolean",
                        "description": "Indicates if the agent's Instagram integration is verified."
                      },
                      "igAccessToken": {
                        "type": "string",
                        "description": "Access token for authenticating Instagram API requests."
                      },
                      "showHandoffEvenIfOffline": {
                        "type": "boolean",
                        "description": "Displays the handoff option even if the agent is offline."
                      },
                      "persistHandoffOnRefresh": {
                        "type": "boolean",
                        "description": "Maintains handoff state when users refresh or close their browser tabs."
                      },
                      "blockInputDuringHandoffRequest": {
                        "type": "boolean",
                        "description": "Blocks chat input when a user requests human handoff but no human has been assigned yet. Only applies to VF agents."
                      },
                      "customButtonJSON_STRING": {
                        "type": "string",
                        "description": "JSON string defining custom buttons for the agent's interface."
                      },
                      "vg_enableUIEngineForms": {
                        "type": "boolean",
                        "description": "Enables form and input components in the UI engine for web channel."
                      },
                      "translateUserResponse": { "type": "boolean" },
                      "disableTranscriptSharing": { "type": "boolean" },
                      "nodes": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" },
                            "description": {
                              "type": "string",
                              "description": "A short description of what this node does and when it should be used, specially useful if the node is global or when the LLM detects automatic rerouting."
                            },
                            "instructions": {
                              "type": "string",
                              "description": "What should this LLM node do."
                            },
                            "mcpServers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": { "type": "string" },
                                  "url": { "type": "string" },
                                  "transport": {
                                    "type": "string",
                                    "enum": ["sse", "websocket", "stdio"]
                                  },
                                  "useNodeEventSource": { "type": "boolean" },
                                  "reconnect": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": { "type": "boolean" },
                                      "maxAttempts": { "type": "number" },
                                      "delayMs": { "type": "number" }
                                    },
                                    "additionalProperties": false
                                  },
                                  "command": { "type": "string" },
                                  "args": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "voiceInstructions": {
                              "type": "string",
                              "description": "The voice instructions for this node, will be used instead of instructions in voice channels if provided."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If true, this node will be always present for the LLM"
                            },
                            "toolsIds": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The tools that will be available for this node"
                            },
                            "toolsSettings": {
                              "type": "object",
                              "properties": {
                                "googleCalendar": {
                                  "type": "object",
                                  "properties": {
                                    "calendarId": { "type": "string" },
                                    "methods": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "create-event",
                                          "check-availability",
                                          "get-slots",
                                          "delete-event"
                                        ]
                                      }
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "childrenNodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "nodeId": { "type": "string" },
                                  "condition": {
                                    "type": "string",
                                    "description": "The condition that will be checked to determine if the node should advanced to the selected node id or not or should simply loop in the current node."
                                  }
                                },
                                "required": ["nodeId", "condition"],
                                "additionalProperties": false
                              },
                              "description": "The outputs of this node which the node after finishing will choose from to either advance or to keep looping in this node till it caputures or reaches one of the mentioned routers."
                            },
                            "llmConfig": {
                              "type": "object",
                              "properties": {
                                "modelId": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ]
                                },
                                "temperature": {
                                  "type": "number",
                                  "description": "The temperature of the LLM"
                                },
                                "maxTokens": {
                                  "type": "number",
                                  "description": "The max tokens of the LLM"
                                },
                                "customModelId": {
                                  "type": "string",
                                  "description": "The custom model id of the LLM"
                                },
                                "serverUrl": {
                                  "type": "string",
                                  "description": "The server url of the LLM"
                                },
                                "apiKey": {
                                  "type": "string",
                                  "description": "The api key of the LLM"
                                }
                              },
                              "required": [
                                "modelId",
                                "temperature",
                                "maxTokens"
                              ],
                              "additionalProperties": false
                            },
                            "routerLlmConfig": {
                              "type": "object",
                              "properties": {
                                "modelId": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ]
                                },
                                "temperature": {
                                  "type": "number",
                                  "description": "The temperature of the LLM"
                                },
                                "maxTokens": {
                                  "type": "number",
                                  "description": "The max tokens of the LLM"
                                },
                                "customModelId": {
                                  "type": "string",
                                  "description": "The custom model id of the LLM"
                                },
                                "serverUrl": {
                                  "type": "string",
                                  "description": "The server url of the LLM"
                                },
                                "apiKey": {
                                  "type": "string",
                                  "description": "The api key of the LLM"
                                }
                              },
                              "required": [
                                "modelId",
                                "temperature",
                                "maxTokens"
                              ],
                              "additionalProperties": false,
                              "description": "The LLM config that will be used for the router node, NOTE: This must be a fast LLM model or the latency will be too high between responses."
                            },
                            "toolUseBias": {
                              "type": "number",
                              "description": "The bias of the LLM to use tools if 0 it will never use tools, if 1 it will only use tools."
                            },
                            "autoRerouter": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will try to detect if the user has changed his mind about something enabling the AI to rewind back to the previous node."
                                },
                                "level": {
                                  "type": "number",
                                  "description": "The level of rewinding, if 1 the LLM will have access to only 1 level or rewind capabilities meaning if it went from node A > B > C > D  then if it at node d & it detects it needs to be at node B again it will be able to rewind back to node B if the level is at least 2, it will not be able to detect node A unless the level is 3 or more, and so on."
                                }
                              },
                              "required": ["enabled", "level"],
                              "additionalProperties": false,
                              "description": "The auto rerouter of this node."
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "start",
                                "end",
                                "default",
                                "condition",
                                "note"
                              ],
                              "description": "The type of the node, if not provided it will be a normal LLM node."
                            },
                            "rf": {
                              "description": "The position of the node in the reactflow canvas."
                            },
                            "kb": {
                              "type": "object",
                              "properties": {
                                "enabled": { "type": "boolean" },
                                "maxChunks": {
                                  "type": "number",
                                  "description": "The max chunks to use from the KB."
                                },
                                "tags": {
                                  "type": "array",
                                  "items": { "type": "string" },
                                  "description": "The tags to use to filter the docs we search through"
                                },
                                "smartSearch": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will use the smart search to search through the docs."
                                }
                              },
                              "required": ["enabled", "maxChunks"],
                              "additionalProperties": false
                            },
                            "conditionData": {
                              "type": "object",
                              "properties": {
                                "condition": {
                                  "type": "string",
                                  "description": "The condition to check."
                                }
                              },
                              "required": ["condition"],
                              "additionalProperties": false
                            },
                            "preStart": {
                              "type": "object",
                              "properties": {
                                "url": {
                                  "type": "string",
                                  "description": "The URL to send the GET request to."
                                },
                                "enabled": {
                                  "type": "boolean",
                                  "description": "If true, we will send a GET request to the URL before starting the node."
                                },
                                "testConvoIdValue": {
                                  "type": "string",
                                  "description": "The value to test the URL with."
                                }
                              },
                              "additionalProperties": false,
                              "description": "The pre start tool of the node, we will send a GET request to this URL before starting the node and provide the results to the AI. GET {url}/{user_id}/{node_name}"
                            },
                            "startConfig": {
                              "type": "object",
                              "properties": {
                                "initialMessage": {
                                  "type": "string",
                                  "description": "The initial message to start the conversation with"
                                },
                                "userStarts": {
                                  "type": "boolean",
                                  "description": "Whether the user or AI agent gives the first message"
                                }
                              },
                              "additionalProperties": false,
                              "description": "Configuration for start nodes"
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "description",
                            "instructions",
                            "llmConfig"
                          ],
                          "additionalProperties": false,
                          "description": "A node in the LLM chain."
                        }
                      },
                      "enableFallback": {
                        "type": "boolean",
                        "description": "Enable fallback for the agent llm model."
                      },
                      "fallbackSettings": {
                        "type": "object",
                        "properties": {
                          "model": {
                            "type": "string",
                            "enum": [
                              "gpt-5-chat-latest",
                              "gpt-5-2025-08-07",
                              "gpt-5-mini-2025-08-07",
                              "gpt-5-nano-2025-08-07",
                              "gpt-3.5-turbo-0125",
                              "gpt-4-1106-preview",
                              "gpt-4.5-preview-2025-02-27",
                              "gpt-4o",
                              "gpt-4o-mini",
                              "gpt-4.1-2025-04-14",
                              "gpt-4.1-mini-2025-04-14",
                              "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                              "llama3-8b-8192",
                              "llama3-70b-8192",
                              "llama-3.1-8b-instant",
                              "llama-3.1-70b-versatile",
                              "llama-3.2-90b-text-preview",
                              "llama-3.2-11b-text-preview",
                              "llama-3.3-70b-versatile",
                              "meta-llama/llama-4-scout-17b-16e-instruct",
                              "meta-llama/llama-4-maverick-17b-128e-instruct",
                              "mixtral-8x7b-32768",
                              "gemma-7b-it",
                              "gemma2-9b-it",
                              "claude-opus-4-20250514",
                              "claude-sonnet-4-20250514",
                              "claude-3-5-sonnet-20240620",
                              "claude-3-5-sonnet-20241022",
                              "claude-3-opus-20240229",
                              "claude-3-sonnet-20240229",
                              "claude-3-haiku-20240307",
                              "claude-3-5-haiku-20241022",
                              "claude-3-7-sonnet-20250219",
                              "gemini-1.5-pro",
                              "gemini-1.5-flash",
                              "gemini-1.0-pro",
                              "gemini-2.0-flash-exp",
                              "gemini-2.0-flash-thinking-exp-1219",
                              "gemini-2.5-pro",
                              "gemini-2.5-pro-exp-03-25",
                              "gemini-2.5-pro-preview-03-25",
                              "gemini-2.5-flash-preview-05-20",
                              "gemini-2.5-flash",
                              "gpt-4-32k",
                              "gpt-4",
                              "gpt-3.5-turbo-16k",
                              "gpt-3.5-turbo",
                              "deepseek-chat",
                              "deepseek-r1-distill-llama-70b",
                              "grok-2-latest",
                              "grok-3",
                              "grok-3-mini",
                              "grok-3-fast",
                              "grok-4-0709",
                              "qwen-max-latest",
                              "qwen-plus-latest",
                              "qwen-turbo-latest",
                              "custom-llm",
                              "models/gemini-2.5-pro-preview-03-25",
                              "azure-eu-gpt-4o",
                              "azure-na-gpt-4o"
                            ],
                            "description": "The model to use for fallback."
                          },
                          "creditThreshold": {
                            "type": "number",
                            "description": "The credit threshold for fallback."
                          }
                        },
                        "additionalProperties": false,
                        "description": "Fallback settings for the agent llm model."
                      },
                      "marketplace": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Whether to show the agent in marketplace or not."
                          },
                          "priceUSD": {
                            "type": "number",
                            "description": "The price for the agent, default is 0/free"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Marketplace settings for the agent."
                      },
                      "disableRating": {
                        "type": "boolean",
                        "description": "Whether to disable the chat end rating feature."
                      },
                      "chatEndMessage": {
                        "type": "string",
                        "description": "The message to show when the chat ends."
                      },
                      "aiIntroductionMessage": {
                        "type": "string",
                        "description": "The message to show when the user starts the chat on metachannels."
                      },
                      "enableAIIntroductionMessage": {
                        "type": "boolean",
                        "description": "Whether to enable the AI introduction message or not."
                      },
                      "deployed": {
                        "type": "boolean",
                        "description": "Whether the agent is deployed or not."
                      },
                      "captureIGStories": {
                        "type": "boolean",
                        "description": "Whether to capture instagram stories or not."
                      },
                      "gdprCompliance": {
                        "type": "boolean",
                        "description": "Whether to comply with GDPR or not."
                      },
                      "disableFileUpload": { "type": "boolean" },
                      "buttonVariant": {
                        "type": "string",
                        "enum": [
                          "custom",
                          "solid",
                          "bordered",
                          "light",
                          "flat",
                          "faded",
                          "shadow",
                          "ghost"
                        ],
                        "description": "The variant of the button. Custom is the default original styling."
                      },
                      "inputVariant": {
                        "type": "string",
                        "enum": [
                          "custom",
                          "flat",
                          "bordered",
                          "faded",
                          "underlined"
                        ],
                        "description": "The variant of the input. Custom is the default original styling."
                      },
                      "privacyDisclaimer": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Whether to show privacy disclaimer before user interaction"
                          },
                          "text": {
                            "type": "string",
                            "description": "The privacy disclaimer text to display to users"
                          },
                          "privacyPolicyUrl": {
                            "type": "string",
                            "description": "URL to the privacy policy page"
                          },
                          "acceptButtonLabel": {
                            "type": "string",
                            "description": "Label for the accept/proceed button"
                          },
                          "privacyPolicyButtonLabel": {
                            "type": "string",
                            "description": "Label for the privacy policy link button"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Privacy disclaimer configuration for the agent"
                      },
                      "leadCollectionRules": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Whether to use custom lead collection rules. If false or not set, uses default behavior (collect when email, phone_number, or phone is present)"
                          },
                          "rules": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "variables": {
                                  "type": "array",
                                  "items": { "type": "string" },
                                  "description": "Array of variable names that must ALL be present for this rule to match (AND condition)"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Optional description of what this rule captures"
                                }
                              },
                              "required": ["variables"],
                              "additionalProperties": false
                            },
                            "description": "Array of rule sets. A lead is collected if it matches ANY rule set (OR condition between rules). Each rule requires ALL its variables to be present (AND condition within a rule)."
                          }
                        },
                        "additionalProperties": false,
                        "description": "Custom lead collection rules. Allows defining which variable combinations should trigger lead capture. If not set, defaults to collecting leads when email, phone_number, or phone is present."
                      },
                      "customTheme": {
                        "type": "object",
                        "properties": {
                          "themeType": { "type": "string" },
                          "primary": { "type": "string" },
                          "nineColorPallet": { "type": "array" }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "required": ["agent"],
                "additionalProperties": false
              },
              "example": {
                "agent": {
                  "title": "My Customer Service Agent",
                  "description": "An AI agent that handles customer inquiries",
                  "nodes": [],
                  "ownerID": "workspace_123",
                  "lastModified": 1234567890,
                  "SECRET_API_KEY": "vg_abcdef123456"
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "**Title**: The title of the agent."
                            },
                            "description": {
                              "type": "string",
                              "description": "**Description**: A brief description of the agent."
                            },
                            "ownerID": {
                              "type": "string",
                              "description": "**Owner ID**: The unique identifier of the agent's owner."
                            },
                            "theme": {
                              "type": "string",
                              "description": "**Theme**: The visual theme of the agent, e.g., 'blue-light' or 'custom-blue-dark'."
                            },
                            "voiceConfig": {
                              "type": "object",
                              "properties": {
                                "transcriber": {
                                  "type": "object",
                                  "properties": {
                                    "speechConfig": {
                                      "type": "object",
                                      "properties": {
                                        "format": { "type": "string" },
                                        "sampleRate": { "type": "number" }
                                      },
                                      "additionalProperties": false
                                    },
                                    "modelId": { "type": "string" },
                                    "patienceFactor": { "type": "number" },
                                    "language": { "type": "string" },
                                    "provider": {
                                      "type": "string",
                                      "enum": [
                                        "deepgram",
                                        "gladia",
                                        "assemblyai",
                                        "speechmatics",
                                        "google-cloud-speech",
                                        "google-live-transcription"
                                      ]
                                    },
                                    "randomOptions": {},
                                    "internal": {
                                      "type": "object",
                                      "properties": {
                                        "inputAudioStream": {},
                                        "debug": { "type": "boolean" }
                                      },
                                      "additionalProperties": false
                                    },
                                    "apiKey": { "type": "string" },
                                    "platformSpecific": {
                                      "type": "object",
                                      "properties": {
                                        "deepgram": {
                                          "type": "object",
                                          "properties": {
                                            "keywords": {
                                              "type": "array",
                                              "items": { "type": "string" },
                                              "description": "Keywords to focus on in the transcription."
                                            },
                                            "language": { "type": "string" },
                                            "smart_format": {
                                              "type": "boolean"
                                            },
                                            "model": { "type": "string" },
                                            "interim_results": {
                                              "type": "boolean"
                                            },
                                            "endpointing": { "type": "number" },
                                            "no_delay": { "type": "boolean" },
                                            "autoLanguageDetection": {
                                              "type": "boolean"
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "assemblyai": {
                                          "type": "object",
                                          "properties": {
                                            "modelId": { "type": "string" }
                                          },
                                          "required": ["modelId"],
                                          "additionalProperties": false
                                        },
                                        "googleCloud": {
                                          "type": "object",
                                          "properties": {
                                            "keywords": {
                                              "type": "array",
                                              "items": { "type": "string" },
                                              "description": "Keywords or phrases to focus on in the transcription."
                                            },
                                            "model": {
                                              "type": "string",
                                              "description": "The Google Cloud Speech model to use."
                                            },
                                            "languageCode": {
                                              "type": "string",
                                              "description": "The language code for transcription."
                                            },
                                            "enableAutomaticPunctuation": {
                                              "type": "boolean",
                                              "description": "Enable automatic punctuation."
                                            },
                                            "enableWordTimeOffsets": {
                                              "type": "boolean",
                                              "description": "Enable word time offsets."
                                            },
                                            "maxAlternatives": {
                                              "type": "number",
                                              "description": "Maximum number of recognition alternatives."
                                            },
                                            "profanityFilter": {
                                              "type": "boolean",
                                              "description": "Enable profanity filter."
                                            },
                                            "speechContexts": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "phrases": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "boost": { "type": "number" }
                                                },
                                                "required": ["phrases"],
                                                "additionalProperties": false
                                              },
                                              "description": "Speech contexts for better recognition."
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "utteranceThreshold": { "type": "number" },
                                    "inputVoiceEnhancer": { "type": "boolean" }
                                  },
                                  "required": ["provider"],
                                  "additionalProperties": false,
                                  "description": "**Transcriber**: The configuration options for the transcriber provider used by the agent."
                                },
                                "speechGen": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "highAudioQuality": {
                                          "type": "boolean",
                                          "description": "Generate highest quality audio possible, must have pro plan or higher on elevenlabs to enable your own key to work with this option."
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "elevenlabs",
                                            "deepgram",
                                            "cartesia",
                                            "playht",
                                            "azure",
                                            "rime-ai",
                                            "openai",
                                            "playai-groq",
                                            "google-cloud",
                                            "google-live"
                                          ],
                                          "description": "Speech providers supported by the app."
                                        },
                                        "modelId": {
                                          "type": "string",
                                          "description": "The model id of the speech gen."
                                        },
                                        "voiceId": {
                                          "type": "string",
                                          "description": "The voice id for the speech service."
                                        },
                                        "apiKey": { "type": "string" },
                                        "region": { "type": "string" },
                                        "backgroundNoise": {
                                          "type": "string",
                                          "enum": [
                                            "restaurant",
                                            "office",
                                            "park",
                                            "street"
                                          ]
                                        },
                                        "punctuationBreaks": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        },
                                        "platformSpecific": {
                                          "type": "object",
                                          "properties": {
                                            "elevenLabs": {
                                              "type": "object",
                                              "properties": {
                                                "stability": {
                                                  "type": "number"
                                                },
                                                "similarity_boost": {
                                                  "type": "number"
                                                },
                                                "use_speaker_boost": {
                                                  "type": "boolean"
                                                },
                                                "speed": { "type": "number" },
                                                "style": { "type": "number" }
                                              },
                                              "additionalProperties": false
                                            },
                                            "playht": {
                                              "type": "object",
                                              "properties": {
                                                "voiceId": { "type": "string" }
                                              },
                                              "required": ["voiceId"],
                                              "additionalProperties": false
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "backChannelling": {
                                          "type": "boolean",
                                          "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                        },
                                        "language": { "type": "string" },
                                        "enableLongMessageBackchannelling": {
                                          "type": "boolean",
                                          "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                        },
                                        "backchannelMessages": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        },
                                        "backchannelInterval": {
                                          "type": "number"
                                        },
                                        "wordsReplacements": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "word": { "type": "string" },
                                              "replacement": {
                                                "type": "string"
                                              }
                                            },
                                            "required": ["word", "replacement"],
                                            "additionalProperties": false
                                          }
                                        }
                                      },
                                      "required": ["provider"]
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "internal": {
                                          "type": "object",
                                          "properties": {
                                            "inputTextStream": {},
                                            "audioConfig": {
                                              "type": "object",
                                              "properties": {
                                                "format": { "type": "string" },
                                                "sampleRate": {
                                                  "type": "number"
                                                },
                                                "channels": { "type": "number" }
                                              },
                                              "required": [
                                                "format",
                                                "sampleRate",
                                                "channels"
                                              ],
                                              "additionalProperties": false
                                            },
                                            "emitOnComplete": {
                                              "type": "boolean"
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      }
                                    }
                                  ],
                                  "description": "**Speech Generation**: The configuration options for the speech generation provider used by the agent."
                                },
                                "config": {
                                  "type": "object",
                                  "properties": {
                                    "recordAudio": { "type": "boolean" },
                                    "backgroundNoise": {
                                      "type": "string",
                                      "enum": [
                                        "restaurant",
                                        "office",
                                        "street",
                                        "none"
                                      ]
                                    },
                                    "enableWebCalling": { "type": "boolean" },
                                    "firstInputChunkUNIXMs": {
                                      "type": "number"
                                    },
                                    "firstOutputChunkUNIXMs": {
                                      "type": "number"
                                    }
                                  },
                                  "required": ["recordAudio"],
                                  "additionalProperties": false,
                                  "description": "**Call Configuration**: The call configuration settings for the agent."
                                }
                              },
                              "additionalProperties": false
                            },
                            "light": {
                              "type": "boolean",
                              "description": "Whether to enable light mode for the agent. If set to true, the agent will not retain previous chat interactions for privacy reasons."
                            },
                            "enableVertex": {
                              "type": "boolean",
                              "description": "Whether to enable Vertex AI for the agent."
                            },
                            "autoOpenWidget": {
                              "type": "boolean",
                              "description": "Whether to auto-open the widget when the agent is loaded."
                            },
                            "createdAtUNIX": {
                              "type": "number",
                              "description": "The timestamp when the agent was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                            },
                            "disabled": {
                              "type": "boolean",
                              "description": "Indicates whether the agent is disabled. If set to true, the agent will not be active."
                            },
                            "vectorDb": {
                              "description": "Specifies the vector database configuration for the agent. This database is used for handling vectorized data or embeddings."
                            },
                            "withRefresh": {
                              "type": "boolean",
                              "description": "Determines whether the agent should refresh its settings or data dynamically."
                            },
                            "agentPlatform": {
                              "type": "string",
                              "description": "Specifies the platform on which the agent operates, such as web, mobile, or other environments."
                            },
                            "ID": {
                              "type": "string",
                              "description": "A unique identifier for the agent used internally."
                            },
                            "storageID": {
                              "type": "string",
                              "description": "The identifier for the agent's storage configuration."
                            },
                            "VF_DIALOGUE_API_KEY": {
                              "type": "string",
                              "description": "API key for VF dialogue integration, enabling the agent to communicate with external systems."
                            },
                            "VF_PROJECT_API_KEY": {
                              "type": "string",
                              "description": "API key associated with the VF project to authenticate and enable specific functionalities."
                            },
                            "VF_PROJECT_ID": {
                              "type": "string",
                              "description": "The unique identifier of the VF project linked to the agent."
                            },
                            "VF_KB_API_KEY": {
                              "type": "string",
                              "description": "API key for accessing the VF knowledge base, enabling advanced knowledge retrieval capabilities."
                            },
                            "roundedImageURL": {
                              "type": "string",
                              "description": "URL pointing to the rounded image asset used to visually represent the agent."
                            },
                            "rectangeImageURL": {
                              "type": "string",
                              "description": "URL pointing to the rectangular image asset for the agent's branding or display."
                            },
                            "messageDelayMS": {
                              "type": "number",
                              "description": "Specifies the delay in milliseconds for the agent to send messages, simulating natural conversation timing."
                            },
                            "scrollAnimation": {
                              "type": "boolean",
                              "description": "Indicates whether scroll animations are enabled for smooth transitions in the chat interface."
                            },
                            "proactiveMessage": {
                              "type": "string",
                              "description": "A predefined message the agent sends proactively to engage users."
                            },
                            "acceptFileUpload": {
                              "type": "boolean",
                              "description": "Determines if the agent accepts file uploads from users as part of the interaction."
                            },
                            "recordChatHistory": {
                              "type": "boolean",
                              "description": "Specifies whether the agent logs chat histories for future reference or analysis."
                            },
                            "chatBgURL": {
                              "type": "string",
                              "description": "URL of the background image used in the chat interface."
                            },
                            "disableSmoothScroll": {
                              "type": "boolean",
                              "description": "Disables smooth scrolling if set to true, potentially improving performance on low-end devices."
                            },
                            "isDeployed": {
                              "type": "boolean",
                              "description": "Indicates whether the agent is currently deployed and operational."
                            },
                            "tokensUsage": {
                              "description": "Tracks the token usage statistics for the agent, typically used in LLM integrations."
                            },
                            "maxTokensUsage": {
                              "description": "Defines the maximum allowable token usage for the agent to prevent overconsumption."
                            },
                            "lastModified": {
                              "type": "number",
                              "description": "The timestamp of the last modification made to the agent's configuration."
                            },
                            "fontFamily": {
                              "type": "string",
                              "description": "The font family used in the agent's user interface for consistent branding."
                            },
                            "branding": {
                              "type": "string",
                              "description": "Custom branding information or labels associated with the agent."
                            },
                            "customThemeJSONString": {
                              "type": "string",
                              "description": "A JSON string defining a custom theme for the agent's interface."
                            },
                            "autoStartWidget": {
                              "type": "boolean",
                              "description": "Determines if the widget should auto-start upon page load."
                            },
                            "allTimeTriggers": {
                              "type": "number",
                              "description": "The total number of triggers or interactions the agent has handled."
                            },
                            "syncBrowser": {
                              "type": "boolean",
                              "description": "Enables synchronization of settings or states with the browser session."
                            },
                            "delayBeforeSubmit": {
                              "type": "number",
                              "description": "The delay (in milliseconds) before submitting user input to the agent."
                            },
                            "region": {
                              "type": "string",
                              "enum": ["eu", "na"],
                              "description": "Defines the geographical region settings for the agent, such as localization."
                            },
                            "listenForUrlChanges": {
                              "type": "boolean",
                              "description": "Specifies if the agent should monitor and react to changes in the browser URL."
                            },
                            "chatForget": {
                              "type": "boolean",
                              "description": "If enabled, the agent will not retain previous chat interactions for privacy reasons."
                            },
                            "lang": {
                              "type": "string",
                              "description": "Specifies the default language for the agent's interactions and responses."
                            },
                            "enableAudioSupport": {
                              "type": "boolean",
                              "description": "Enables audio features, allowing the agent to process and respond to audio inputs."
                            },
                            "AITranslateTo": {
                              "type": "string",
                              "description": "Defines the target language for AI translation during interactions."
                            },
                            "enableAITranslate": {
                              "type": "boolean",
                              "description": "Activates AI-based translation for multilingual support."
                            },
                            "disableNoReplyListener": {
                              "type": "boolean",
                              "description": "Disables the listener for instances where no reply is detected from the agent."
                            },
                            "disableHumanHandoff": {
                              "type": "boolean",
                              "description": "Prevents the agent from escalating interactions to a human operator."
                            },
                            "alwaysShowHandoff": {
                              "type": "boolean",
                              "description": "Ensures the handoff option is always visible, regardless of agent status."
                            },
                            "manualControl": {
                              "type": "boolean",
                              "description": "Allows manual control over specific agent functionalities."
                            },
                            "enableVGHandoff": {
                              "type": "boolean",
                              "description": "Activates VG-specific handoff mechanisms for the agent."
                            },
                            "enableGeoAnalytics": {
                              "type": "boolean",
                              "description": "Enables geographic analytics to track user interactions based on location."
                            },
                            "hideVoiceflowAnalytics": {
                              "type": "boolean",
                              "description": "Hides Voiceflow-specific analytics including intents, conversation flow metrics, and rating analytics."
                            },
                            "hideCallAnalytics": {
                              "type": "boolean",
                              "description": "Hides voice call analytics including duration, latency, cost breakdown, call counts, and call end reasons."
                            },
                            "hideConversationMetrics": {
                              "type": "boolean",
                              "description": "Hides conversation metrics including user retention, conversation length, time retention, and engagement metrics."
                            },
                            "hideCustomAnalytics": {
                              "type": "boolean",
                              "description": "Hides user-created custom charts and metrics from the analytics dashboard."
                            },
                            "hideVapiAnalytics": {
                              "type": "boolean",
                              "description": "Hides VAPI-specific analytics including cost tracking and voice-related metrics."
                            },
                            "hideFunnelAnalytics": {
                              "type": "boolean",
                              "description": "Hides the user engagement funnel chart that tracks progression from widget views to high engagement."
                            },
                            "fixedHandoffPopup": {
                              "type": "boolean",
                              "description": "Ensures the handoff popup remains fixed in the interface."
                            },
                            "buttonsLayout": {
                              "type": "string",
                              "enum": ["horizontal", "vertical", "in-footer"],
                              "description": "Defines the layout and style of buttons in the agent's interface."
                            },
                            "ADVANCED_customCSS": {
                              "type": "string",
                              "description": "Specifies advanced custom CSS for overriding the default styling of the agent's interface."
                            },
                            "messagesLimit": {
                              "type": "number",
                              "description": "Sets a cap on the number of messages the agent can exchange in a single session."
                            },
                            "whatsappToken": {
                              "type": "string",
                              "description": "Token for authenticating and integrating with WhatsApp services."
                            },
                            "whatsappNumberId": {
                              "type": "string",
                              "description": "The ID associated with the WhatsApp number used by the agent."
                            },
                            "whatsappBusniessId": {
                              "type": "string",
                              "description": "The business ID for WhatsApp integration, enabling enterprise-level features."
                            },
                            "waTestNumber": {
                              "type": "string",
                              "description": "A test number used during WhatsApp integration setup or testing."
                            },
                            "waVerifyPassed": {
                              "type": "boolean",
                              "description": "Indicates if WhatsApp verification was successfully completed."
                            },
                            "waTestPassed": {
                              "type": "boolean",
                              "description": "Indicates if the WhatsApp integration test was successful."
                            },
                            "webhookUrl": {
                              "type": "string",
                              "description": "The URL where the agent sends webhook events to external systems."
                            },
                            "gcloudPrivateKey": {
                              "type": "string",
                              "description": "Private key for Google Cloud services integration."
                            },
                            "gcloudClientEmail": {
                              "type": "string",
                              "description": "Client email for Google Cloud authentication."
                            },
                            "smartInit": {
                              "type": "boolean",
                              "description": "Activates smart initialization features for the agent."
                            },
                            "UIhandoffTitle": {
                              "type": "string",
                              "description": "Title displayed during UI handoff interactions."
                            },
                            "UIhandoffSubtitle": {
                              "type": "string",
                              "description": "Subtitle displayed during UI handoff interactions."
                            },
                            "igVerified": {
                              "type": "boolean",
                              "description": "Indicates if the agent's Instagram integration is verified."
                            },
                            "igAccessToken": {
                              "type": "string",
                              "description": "Access token for authenticating Instagram API requests."
                            },
                            "showHandoffEvenIfOffline": {
                              "type": "boolean",
                              "description": "Displays the handoff option even if the agent is offline."
                            },
                            "persistHandoffOnRefresh": {
                              "type": "boolean",
                              "description": "Maintains handoff state when users refresh or close their browser tabs."
                            },
                            "blockInputDuringHandoffRequest": {
                              "type": "boolean",
                              "description": "Blocks chat input when a user requests human handoff but no human has been assigned yet. Only applies to VF agents."
                            },
                            "customButtonJSON_STRING": {
                              "type": "string",
                              "description": "JSON string defining custom buttons for the agent's interface."
                            },
                            "vg_initPrompt": {
                              "type": "string",
                              "description": "The initial prompt displayed or used by the VF system."
                            },
                            "vg_prompt": {
                              "type": "string",
                              "description": "The main prompt template used for generating responses."
                            },
                            "vg_initMessages": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "Initial messages loaded for the agent's conversation flow."
                            },
                            "vg_systemPrompt": {
                              "type": "string",
                              "description": "System-level prompt defining the agent's behavior and rules."
                            },
                            "vg_temperature": {
                              "type": "number",
                              "description": "Defines the temperature setting for response variability in the VF model."
                            },
                            "vg_defaultModel": {
                              "type": "string",
                              "enum": [
                                "gpt-5-chat-latest",
                                "gpt-5-2025-08-07",
                                "gpt-5-mini-2025-08-07",
                                "gpt-5-nano-2025-08-07",
                                "gpt-3.5-turbo-0125",
                                "gpt-4-1106-preview",
                                "gpt-4.5-preview-2025-02-27",
                                "gpt-4o",
                                "gpt-4o-mini",
                                "gpt-4.1-2025-04-14",
                                "gpt-4.1-mini-2025-04-14",
                                "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                "llama3-8b-8192",
                                "llama3-70b-8192",
                                "llama-3.1-8b-instant",
                                "llama-3.1-70b-versatile",
                                "llama-3.2-90b-text-preview",
                                "llama-3.2-11b-text-preview",
                                "llama-3.3-70b-versatile",
                                "meta-llama/llama-4-scout-17b-16e-instruct",
                                "meta-llama/llama-4-maverick-17b-128e-instruct",
                                "mixtral-8x7b-32768",
                                "gemma-7b-it",
                                "gemma2-9b-it",
                                "claude-opus-4-20250514",
                                "claude-sonnet-4-20250514",
                                "claude-3-5-sonnet-20240620",
                                "claude-3-5-sonnet-20241022",
                                "claude-3-opus-20240229",
                                "claude-3-sonnet-20240229",
                                "claude-3-haiku-20240307",
                                "claude-3-5-haiku-20241022",
                                "claude-3-7-sonnet-20250219",
                                "gemini-1.5-pro",
                                "gemini-1.5-flash",
                                "gemini-1.0-pro",
                                "gemini-2.0-flash-exp",
                                "gemini-2.0-flash-thinking-exp-1219",
                                "gemini-2.5-pro",
                                "gemini-2.5-pro-exp-03-25",
                                "gemini-2.5-pro-preview-03-25",
                                "gemini-2.5-flash-preview-05-20",
                                "gemini-2.5-flash",
                                "gpt-4-32k",
                                "gpt-4",
                                "gpt-3.5-turbo-16k",
                                "gpt-3.5-turbo",
                                "deepseek-chat",
                                "deepseek-r1-distill-llama-70b",
                                "grok-2-latest",
                                "grok-3",
                                "grok-3-mini",
                                "grok-3-fast",
                                "grok-4-0709",
                                "qwen-max-latest",
                                "qwen-plus-latest",
                                "qwen-turbo-latest",
                                "custom-llm",
                                "models/gemini-2.5-pro-preview-03-25",
                                "azure-eu-gpt-4o",
                                "azure-na-gpt-4o"
                              ],
                              "description": "Specifies the default LLM model used by the agent for language processing."
                            },
                            "vg_maxTokens": {
                              "type": "number",
                              "description": "Sets the maximum token limit for generating responses."
                            },
                            "vg_kbDefaultDimension": {
                              "type": "number",
                              "description": "Default dimensionality for the agent's knowledge base embeddings."
                            },
                            "vg_kbTopChunks": {
                              "type": "number",
                              "description": "The number of top chunks retrieved from the knowledge base during a query."
                            },
                            "SECRET_API_KEY": {
                              "type": "string",
                              "description": "The secret API key for secure integration with VF services."
                            },
                            "vg_kbCharCount": {
                              "type": "number",
                              "description": "Tracks the total character count of the agent's knowledge base."
                            },
                            "vg_kbDocsNum": {
                              "type": "number",
                              "description": "The total number of documents stored in the agent's knowledge base."
                            },
                            "vg_enableUIEngine": {
                              "type": "boolean",
                              "description": "Activates the UI engine for enhanced interface capabilities."
                            },
                            "vg_enableAboutContext": {
                              "type": "boolean",
                              "description": "Enables contextual information about the agent for users."
                            },
                            "vg_kb_llm": {
                              "type": "object",
                              "properties": {
                                "searchMethod": {
                                  "anyOf": [
                                    { "type": "string", "enum": ["smart"] },
                                    { "type": "string", "enum": ["simple"] }
                                  ]
                                },
                                "searchPrompt": { "type": "string" },
                                "modelId": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ]
                                },
                                "temprature": { "type": "number" },
                                "maxTokens": { "type": "number" }
                              },
                              "additionalProperties": false,
                              "description": "Configuration for LLM-based knowledge base queries, including search methods and model parameters."
                            },
                            "vg_enableUIEngineForms": {
                              "type": "boolean",
                              "description": "Enables form and input components in the UI engine for web channel."
                            },
                            "vg_max_messages_history": {
                              "type": "number",
                              "description": "Maximum number of messages retained in the chat history."
                            },
                            "ifKnowsThreshold": {
                              "type": "number",
                              "description": "Confidence threshold for determining if the agent 'knows' an answer."
                            },
                            "avatarImageUrl": {
                              "type": "string",
                              "description": "URL of the avatar image representing the agent."
                            },
                            "headerImageUrl": {
                              "type": "string",
                              "description": "URL of the header image displayed in the chat interface."
                            },
                            "bannerImageUrl": {
                              "type": "string",
                              "description": "URL of the banner image used in the agent's branding."
                            },
                            "soundEffectUrl": {
                              "type": "string",
                              "description": "URL of the sound effect file used for agent interactions."
                            },
                            "soundEffectEnabled": {
                              "type": "boolean",
                              "description": "Enables or disables sound effects for the agent."
                            },
                            "enableQuickFileUpload": {
                              "type": "boolean",
                              "description": "Allows quick file uploads during chat interactions."
                            },
                            "instagramOptions": {
                              "type": "object",
                              "properties": {
                                "pageId": { "type": "string" },
                                "accessToken": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "translateUserResponse": { "type": "boolean" },
                            "starred": { "type": "boolean" },
                            "flowise": {
                              "type": "object",
                              "properties": {
                                "webhookUrl": { "type": "string" },
                                "webhookSecret": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "vfSettings": {
                              "type": "object",
                              "properties": {
                                "enableIgnoreUrlPaths": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "vapi": {},
                            "vapiConfig": {
                              "type": "object",
                              "properties": {
                                "syncKbOnSave": { "type": "boolean" },
                                "PUBLIC_API_KEY": { "type": "string" },
                                "PRIVATE_API_KEY": { "type": "string" },
                                "enableVapiOnWeb": { "type": "boolean" },
                                "overrideWithVG": { "type": "boolean" },
                                "promptOnWeb": { "type": "boolean" },
                                "maxCostMonthly": { "type": "number" },
                                "maxMinutesMonthly": { "type": "number" },
                                "useVfProject": { "type": "boolean" },
                                "syncTools": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "vgOptions": {
                              "type": "object",
                              "properties": {
                                "isLlmStudio": { "type": "boolean" },
                                "showSources": { "type": "boolean" },
                                "lightUiEngine": { "type": "boolean" },
                                "legacyKb": { "type": "boolean" },
                                "maxChunkSize": { "type": "number" },
                                "handoffTimeout": { "type": "number" }
                              },
                              "additionalProperties": false
                            },
                            "ui": {
                              "type": "object",
                              "properties": {
                                "showWhatsappButtonOnWeb": {
                                  "type": "boolean",
                                  "description": "Show little whatsapp button on web if it's connected."
                                },
                                "bgImageVisible": { "type": "boolean" },
                                "widgetType": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "enum": ["direct-chat"]
                                    },
                                    { "type": "string", "enum": ["tabs"] }
                                  ]
                                },
                                "enableFixedFeedbackBtns": {
                                  "type": "boolean"
                                },
                                "switchConversationSides": {
                                  "type": "boolean"
                                },
                                "switchDashboardOnly": { "type": "boolean" },
                                "voice": {
                                  "type": "object",
                                  "properties": {
                                    "question": { "type": "string" },
                                    "continueBtnLabel": { "type": "string" },
                                    "dismissBtnLabel": { "type": "string" },
                                    "disableVoiceOrb": { "type": "boolean" }
                                  },
                                  "required": [
                                    "question",
                                    "continueBtnLabel",
                                    "dismissBtnLabel"
                                  ],
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "assignedToolsIds": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "tools": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "isDefault": {
                                    "type": "boolean",
                                    "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                                  },
                                  "method": {
                                    "type": "string",
                                    "enum": ["GET", "POST", "PUT", "PATCH"],
                                    "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                                  },
                                  "id": {
                                    "type": "string",
                                    "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the tool, providing a human-readable identifier for display purposes."
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                                  },
                                  "serverUrl": {
                                    "type": "string",
                                    "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                                  },
                                  "serverUrlSecret": {
                                    "type": "string",
                                    "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                                  },
                                  "createdAt": {
                                    "type": "string",
                                    "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                                  },
                                  "updatedAt": {
                                    "type": "string",
                                    "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                                  },
                                  "disabled": {
                                    "type": "boolean",
                                    "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                                  },
                                  "isVapiTool": {
                                    "type": "boolean",
                                    "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                                  },
                                  "vapiId": {
                                    "type": "string",
                                    "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                                  },
                                  "variablesIds": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                                  },
                                  "agentId": {
                                    "type": "string",
                                    "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                                  },
                                  "userId": {
                                    "type": "string",
                                    "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                                  },
                                  "backchannellingPhrases": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                                  },
                                  "toolsSettings": {},
                                  "fields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                        },
                                        "in": {
                                          "type": "string",
                                          "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                        },
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "string",
                                            "number",
                                            "boolean",
                                            "system"
                                          ],
                                          "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                        },
                                        "value": {
                                          "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                        },
                                        "defaultValue": {
                                          "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                        },
                                        "key": {
                                          "type": "string",
                                          "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                        },
                                        "required": {
                                          "type": "boolean",
                                          "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                        },
                                        "reusable": {
                                          "type": "boolean",
                                          "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                        },
                                        "isEnv": {
                                          "type": "boolean",
                                          "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                        },
                                        "isSystem": {
                                          "type": "boolean",
                                          "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                        },
                                        "isGlobal": {
                                          "type": "boolean",
                                          "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                        },
                                        "agentId": {
                                          "type": "string",
                                          "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                        },
                                        "userId": {
                                          "type": "string",
                                          "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                        }
                                      },
                                      "required": ["id"],
                                      "additionalProperties": false
                                    }
                                  },
                                  "channels": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "web-chat",
                                        "whatsapp",
                                        "instagram",
                                        "telegram",
                                        "discord",
                                        "gb-chat",
                                        "vapi",
                                        "messenger",
                                        "voice",
                                        "telephony"
                                      ]
                                    },
                                    "description": "The channels that the tool can be used on."
                                  }
                                },
                                "required": ["id", "name", "description"],
                                "additionalProperties": false
                              }
                            },
                            "internal": {
                              "type": "object",
                              "properties": {
                                "accountCreationConfig": {
                                  "type": "string",
                                  "enum": ["v2"]
                                },
                                "websocketServer": {
                                  "anyOf": [
                                    { "type": "string", "enum": ["edge"] },
                                    { "type": "string", "enum": ["nodejs"] }
                                  ]
                                },
                                "setOnResponse": { "type": "boolean" },
                                "enableSetOnLoad": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "disableAutoTranscribeAudio": { "type": "boolean" },
                            "disableTranscriptSharing": { "type": "boolean" },
                            "instaAgentUsername": { "type": "string" },
                            "convoTags": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "vfConfig": {
                              "type": "object",
                              "properties": {
                                "alwaysEnableCardButtons": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "discord": {
                              "type": "object",
                              "properties": {
                                "channelIds": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "webhookUrls": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                }
                              },
                              "additionalProperties": false
                            },
                            "limits": {
                              "type": "object",
                              "properties": {
                                "maxInteractionsPerUserId": {
                                  "type": "number"
                                },
                                "maxAnnualCreditsUsage": { "type": "number" },
                                "maxMonthlyCreditsUsage": { "type": "number" },
                                "maxMessages": {
                                  "type": "number",
                                  "description": "Maximum number of messages allowed per conversation"
                                },
                                "maxMessagesRetentionDays": {
                                  "type": "number",
                                  "description": "Retention period in days for messages"
                                }
                              },
                              "additionalProperties": false
                            },
                            "tabs": { "type": "array" },
                            "kbTags": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "kbTagsDataMap": { "type": "array" },
                            "nodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "name": { "type": "string" },
                                  "description": {
                                    "type": "string",
                                    "description": "A short description of what this node does and when it should be used, specially useful if the node is global or when the LLM detects automatic rerouting."
                                  },
                                  "instructions": {
                                    "type": "string",
                                    "description": "What should this LLM node do."
                                  },
                                  "mcpServers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": { "type": "string" },
                                        "url": { "type": "string" },
                                        "transport": {
                                          "type": "string",
                                          "enum": ["sse", "websocket", "stdio"]
                                        },
                                        "useNodeEventSource": {
                                          "type": "boolean"
                                        },
                                        "reconnect": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": { "type": "boolean" },
                                            "maxAttempts": { "type": "number" },
                                            "delayMs": { "type": "number" }
                                          },
                                          "additionalProperties": false
                                        },
                                        "command": { "type": "string" },
                                        "args": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "voiceInstructions": {
                                    "type": "string",
                                    "description": "The voice instructions for this node, will be used instead of instructions in voice channels if provided."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If true, this node will be always present for the LLM"
                                  },
                                  "toolsIds": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "The tools that will be available for this node"
                                  },
                                  "toolsSettings": {
                                    "type": "object",
                                    "properties": {
                                      "googleCalendar": {
                                        "type": "object",
                                        "properties": {
                                          "calendarId": { "type": "string" },
                                          "methods": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "enum": [
                                                "create-event",
                                                "check-availability",
                                                "get-slots",
                                                "delete-event"
                                              ]
                                            }
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "childrenNodes": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "nodeId": { "type": "string" },
                                        "condition": {
                                          "type": "string",
                                          "description": "The condition that will be checked to determine if the node should advanced to the selected node id or not or should simply loop in the current node."
                                        }
                                      },
                                      "required": ["nodeId", "condition"],
                                      "additionalProperties": false
                                    },
                                    "description": "The outputs of this node which the node after finishing will choose from to either advance or to keep looping in this node till it caputures or reaches one of the mentioned routers."
                                  },
                                  "llmConfig": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": {
                                        "type": "string",
                                        "enum": [
                                          "gpt-5-chat-latest",
                                          "gpt-5-2025-08-07",
                                          "gpt-5-mini-2025-08-07",
                                          "gpt-5-nano-2025-08-07",
                                          "gpt-3.5-turbo-0125",
                                          "gpt-4-1106-preview",
                                          "gpt-4.5-preview-2025-02-27",
                                          "gpt-4o",
                                          "gpt-4o-mini",
                                          "gpt-4.1-2025-04-14",
                                          "gpt-4.1-mini-2025-04-14",
                                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                          "llama3-8b-8192",
                                          "llama3-70b-8192",
                                          "llama-3.1-8b-instant",
                                          "llama-3.1-70b-versatile",
                                          "llama-3.2-90b-text-preview",
                                          "llama-3.2-11b-text-preview",
                                          "llama-3.3-70b-versatile",
                                          "meta-llama/llama-4-scout-17b-16e-instruct",
                                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                                          "mixtral-8x7b-32768",
                                          "gemma-7b-it",
                                          "gemma2-9b-it",
                                          "claude-opus-4-20250514",
                                          "claude-sonnet-4-20250514",
                                          "claude-3-5-sonnet-20240620",
                                          "claude-3-5-sonnet-20241022",
                                          "claude-3-opus-20240229",
                                          "claude-3-sonnet-20240229",
                                          "claude-3-haiku-20240307",
                                          "claude-3-5-haiku-20241022",
                                          "claude-3-7-sonnet-20250219",
                                          "gemini-1.5-pro",
                                          "gemini-1.5-flash",
                                          "gemini-1.0-pro",
                                          "gemini-2.0-flash-exp",
                                          "gemini-2.0-flash-thinking-exp-1219",
                                          "gemini-2.5-pro",
                                          "gemini-2.5-pro-exp-03-25",
                                          "gemini-2.5-pro-preview-03-25",
                                          "gemini-2.5-flash-preview-05-20",
                                          "gemini-2.5-flash",
                                          "gpt-4-32k",
                                          "gpt-4",
                                          "gpt-3.5-turbo-16k",
                                          "gpt-3.5-turbo",
                                          "deepseek-chat",
                                          "deepseek-r1-distill-llama-70b",
                                          "grok-2-latest",
                                          "grok-3",
                                          "grok-3-mini",
                                          "grok-3-fast",
                                          "grok-4-0709",
                                          "qwen-max-latest",
                                          "qwen-plus-latest",
                                          "qwen-turbo-latest",
                                          "custom-llm",
                                          "models/gemini-2.5-pro-preview-03-25",
                                          "azure-eu-gpt-4o",
                                          "azure-na-gpt-4o"
                                        ]
                                      },
                                      "temperature": {
                                        "type": "number",
                                        "description": "The temperature of the LLM"
                                      },
                                      "maxTokens": {
                                        "type": "number",
                                        "description": "The max tokens of the LLM"
                                      },
                                      "customModelId": {
                                        "type": "string",
                                        "description": "The custom model id of the LLM"
                                      },
                                      "serverUrl": {
                                        "type": "string",
                                        "description": "The server url of the LLM"
                                      },
                                      "apiKey": {
                                        "type": "string",
                                        "description": "The api key of the LLM"
                                      }
                                    },
                                    "required": [
                                      "modelId",
                                      "temperature",
                                      "maxTokens"
                                    ],
                                    "additionalProperties": false
                                  },
                                  "routerLlmConfig": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": {
                                        "type": "string",
                                        "enum": [
                                          "gpt-5-chat-latest",
                                          "gpt-5-2025-08-07",
                                          "gpt-5-mini-2025-08-07",
                                          "gpt-5-nano-2025-08-07",
                                          "gpt-3.5-turbo-0125",
                                          "gpt-4-1106-preview",
                                          "gpt-4.5-preview-2025-02-27",
                                          "gpt-4o",
                                          "gpt-4o-mini",
                                          "gpt-4.1-2025-04-14",
                                          "gpt-4.1-mini-2025-04-14",
                                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                          "llama3-8b-8192",
                                          "llama3-70b-8192",
                                          "llama-3.1-8b-instant",
                                          "llama-3.1-70b-versatile",
                                          "llama-3.2-90b-text-preview",
                                          "llama-3.2-11b-text-preview",
                                          "llama-3.3-70b-versatile",
                                          "meta-llama/llama-4-scout-17b-16e-instruct",
                                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                                          "mixtral-8x7b-32768",
                                          "gemma-7b-it",
                                          "gemma2-9b-it",
                                          "claude-opus-4-20250514",
                                          "claude-sonnet-4-20250514",
                                          "claude-3-5-sonnet-20240620",
                                          "claude-3-5-sonnet-20241022",
                                          "claude-3-opus-20240229",
                                          "claude-3-sonnet-20240229",
                                          "claude-3-haiku-20240307",
                                          "claude-3-5-haiku-20241022",
                                          "claude-3-7-sonnet-20250219",
                                          "gemini-1.5-pro",
                                          "gemini-1.5-flash",
                                          "gemini-1.0-pro",
                                          "gemini-2.0-flash-exp",
                                          "gemini-2.0-flash-thinking-exp-1219",
                                          "gemini-2.5-pro",
                                          "gemini-2.5-pro-exp-03-25",
                                          "gemini-2.5-pro-preview-03-25",
                                          "gemini-2.5-flash-preview-05-20",
                                          "gemini-2.5-flash",
                                          "gpt-4-32k",
                                          "gpt-4",
                                          "gpt-3.5-turbo-16k",
                                          "gpt-3.5-turbo",
                                          "deepseek-chat",
                                          "deepseek-r1-distill-llama-70b",
                                          "grok-2-latest",
                                          "grok-3",
                                          "grok-3-mini",
                                          "grok-3-fast",
                                          "grok-4-0709",
                                          "qwen-max-latest",
                                          "qwen-plus-latest",
                                          "qwen-turbo-latest",
                                          "custom-llm",
                                          "models/gemini-2.5-pro-preview-03-25",
                                          "azure-eu-gpt-4o",
                                          "azure-na-gpt-4o"
                                        ]
                                      },
                                      "temperature": {
                                        "type": "number",
                                        "description": "The temperature of the LLM"
                                      },
                                      "maxTokens": {
                                        "type": "number",
                                        "description": "The max tokens of the LLM"
                                      },
                                      "customModelId": {
                                        "type": "string",
                                        "description": "The custom model id of the LLM"
                                      },
                                      "serverUrl": {
                                        "type": "string",
                                        "description": "The server url of the LLM"
                                      },
                                      "apiKey": {
                                        "type": "string",
                                        "description": "The api key of the LLM"
                                      }
                                    },
                                    "required": [
                                      "modelId",
                                      "temperature",
                                      "maxTokens"
                                    ],
                                    "additionalProperties": false,
                                    "description": "The LLM config that will be used for the router node, NOTE: This must be a fast LLM model or the latency will be too high between responses."
                                  },
                                  "toolUseBias": {
                                    "type": "number",
                                    "description": "The bias of the LLM to use tools if 0 it will never use tools, if 1 it will only use tools."
                                  },
                                  "autoRerouter": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "boolean",
                                        "description": "If true, the LLM will try to detect if the user has changed his mind about something enabling the AI to rewind back to the previous node."
                                      },
                                      "level": {
                                        "type": "number",
                                        "description": "The level of rewinding, if 1 the LLM will have access to only 1 level or rewind capabilities meaning if it went from node A > B > C > D  then if it at node d & it detects it needs to be at node B again it will be able to rewind back to node B if the level is at least 2, it will not be able to detect node A unless the level is 3 or more, and so on."
                                      }
                                    },
                                    "required": ["enabled", "level"],
                                    "additionalProperties": false,
                                    "description": "The auto rerouter of this node."
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "start",
                                      "end",
                                      "default",
                                      "condition",
                                      "note"
                                    ],
                                    "description": "The type of the node, if not provided it will be a normal LLM node."
                                  },
                                  "rf": {
                                    "description": "The position of the node in the reactflow canvas."
                                  },
                                  "kb": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": { "type": "boolean" },
                                      "maxChunks": {
                                        "type": "number",
                                        "description": "The max chunks to use from the KB."
                                      },
                                      "tags": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "The tags to use to filter the docs we search through"
                                      },
                                      "smartSearch": {
                                        "type": "boolean",
                                        "description": "If true, the LLM will use the smart search to search through the docs."
                                      }
                                    },
                                    "required": ["enabled", "maxChunks"],
                                    "additionalProperties": false
                                  },
                                  "conditionData": {
                                    "type": "object",
                                    "properties": {
                                      "condition": {
                                        "type": "string",
                                        "description": "The condition to check."
                                      }
                                    },
                                    "required": ["condition"],
                                    "additionalProperties": false
                                  },
                                  "preStart": {
                                    "type": "object",
                                    "properties": {
                                      "url": {
                                        "type": "string",
                                        "description": "The URL to send the GET request to."
                                      },
                                      "enabled": {
                                        "type": "boolean",
                                        "description": "If true, we will send a GET request to the URL before starting the node."
                                      },
                                      "testConvoIdValue": {
                                        "type": "string",
                                        "description": "The value to test the URL with."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "description": "The pre start tool of the node, we will send a GET request to this URL before starting the node and provide the results to the AI. GET {url}/{user_id}/{node_name}"
                                  },
                                  "startConfig": {
                                    "type": "object",
                                    "properties": {
                                      "initialMessage": {
                                        "type": "string",
                                        "description": "The initial message to start the conversation with"
                                      },
                                      "userStarts": {
                                        "type": "boolean",
                                        "description": "Whether the user or AI agent gives the first message"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "description": "Configuration for start nodes"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "description",
                                  "instructions",
                                  "llmConfig"
                                ],
                                "additionalProperties": false,
                                "description": "A node in the LLM chain."
                              }
                            },
                            "enableNodes": { "type": "boolean" },
                            "advanced": {
                              "type": "object",
                              "properties": {
                                "serverUrl": { "type": "string" },
                                "serverUrlSecret": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "nodesSettings": {
                              "type": "object",
                              "properties": {
                                "enableUIEngineForms": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will be able to show forms on web channel only."
                                },
                                "geminiLiveOptions": {},
                                "appendBeforePrompt": {
                                  "type": "string",
                                  "description": "The prompt to append to the nodes' prompt."
                                },
                                "routerLLmOptions": {
                                  "type": "object",
                                  "properties": {
                                    "modelId": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    },
                                    "temperature": {
                                      "type": "number",
                                      "description": "The temperature of the LLM"
                                    },
                                    "maxTokens": {
                                      "type": "number",
                                      "description": "The max tokens of the LLM"
                                    },
                                    "customModelId": {
                                      "type": "string",
                                      "description": "The custom model id of the LLM"
                                    },
                                    "serverUrl": {
                                      "type": "string",
                                      "description": "The server url of the LLM"
                                    },
                                    "apiKey": {
                                      "type": "string",
                                      "description": "The api key of the LLM"
                                    }
                                  },
                                  "required": [
                                    "modelId",
                                    "temperature",
                                    "maxTokens"
                                  ],
                                  "additionalProperties": false
                                },
                                "defaultLLmOptions": {
                                  "type": "object",
                                  "properties": {
                                    "modelId": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    },
                                    "temperature": {
                                      "type": "number",
                                      "description": "The temperature of the LLM"
                                    },
                                    "maxTokens": {
                                      "type": "number",
                                      "description": "The max tokens of the LLM"
                                    },
                                    "customModelId": {
                                      "type": "string",
                                      "description": "The custom model id of the LLM"
                                    },
                                    "serverUrl": {
                                      "type": "string",
                                      "description": "The server url of the LLM"
                                    },
                                    "apiKey": {
                                      "type": "string",
                                      "description": "The api key of the LLM"
                                    }
                                  },
                                  "required": [
                                    "modelId",
                                    "temperature",
                                    "maxTokens"
                                  ],
                                  "additionalProperties": false
                                },
                                "backchannelOnChoosingNodes": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will say uha/i see before choosing a node."
                                },
                                "enableUiEngine": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will be able to show buttons, cards, images on text channels only."
                                },
                                "fallbackModelIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "gpt-5-chat-latest",
                                      "gpt-5-2025-08-07",
                                      "gpt-5-mini-2025-08-07",
                                      "gpt-5-nano-2025-08-07",
                                      "gpt-3.5-turbo-0125",
                                      "gpt-4-1106-preview",
                                      "gpt-4.5-preview-2025-02-27",
                                      "gpt-4o",
                                      "gpt-4o-mini",
                                      "gpt-4.1-2025-04-14",
                                      "gpt-4.1-mini-2025-04-14",
                                      "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                      "llama3-8b-8192",
                                      "llama3-70b-8192",
                                      "llama-3.1-8b-instant",
                                      "llama-3.1-70b-versatile",
                                      "llama-3.2-90b-text-preview",
                                      "llama-3.2-11b-text-preview",
                                      "llama-3.3-70b-versatile",
                                      "meta-llama/llama-4-scout-17b-16e-instruct",
                                      "meta-llama/llama-4-maverick-17b-128e-instruct",
                                      "mixtral-8x7b-32768",
                                      "gemma-7b-it",
                                      "gemma2-9b-it",
                                      "claude-opus-4-20250514",
                                      "claude-sonnet-4-20250514",
                                      "claude-3-5-sonnet-20240620",
                                      "claude-3-5-sonnet-20241022",
                                      "claude-3-opus-20240229",
                                      "claude-3-sonnet-20240229",
                                      "claude-3-haiku-20240307",
                                      "claude-3-5-haiku-20241022",
                                      "claude-3-7-sonnet-20250219",
                                      "gemini-1.5-pro",
                                      "gemini-1.5-flash",
                                      "gemini-1.0-pro",
                                      "gemini-2.0-flash-exp",
                                      "gemini-2.0-flash-thinking-exp-1219",
                                      "gemini-2.5-pro",
                                      "gemini-2.5-pro-exp-03-25",
                                      "gemini-2.5-pro-preview-03-25",
                                      "gemini-2.5-flash-preview-05-20",
                                      "gemini-2.5-flash",
                                      "gpt-4-32k",
                                      "gpt-4",
                                      "gpt-3.5-turbo-16k",
                                      "gpt-3.5-turbo",
                                      "deepseek-chat",
                                      "deepseek-r1-distill-llama-70b",
                                      "grok-2-latest",
                                      "grok-3",
                                      "grok-3-mini",
                                      "grok-3-fast",
                                      "grok-4-0709",
                                      "qwen-max-latest",
                                      "qwen-plus-latest",
                                      "qwen-turbo-latest",
                                      "custom-llm",
                                      "models/gemini-2.5-pro-preview-03-25",
                                      "azure-eu-gpt-4o",
                                      "azure-na-gpt-4o"
                                    ]
                                  }
                                },
                                "silenceDetection": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Whether to enable the silence detection feature which will insert filler phrases during long periods of silence"
                                    },
                                    "timeoutSeconds": {
                                      "type": "number",
                                      "default": 60,
                                      "description": "Number of seconds of silence before triggering a filler phrase"
                                    },
                                    "endCallAfterNPhrases": {
                                      "type": "number",
                                      "default": 1,
                                      "description": "Number of filler phrases utterances to say before ending the call if 0 it will end the call instantly after reching the timeout."
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "startCallPhrases": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "fillerWordsOnToolUsage": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will say filler words on tool usage, like '1 moment', 'be right back', 'you know', etc."
                                },
                                "smartEndpointing": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": { "type": "boolean" },
                                    "waitSeconds": { "type": "number" },
                                    "onPunctuationSeconds": {
                                      "type": "number"
                                    },
                                    "onNoPunctuationSeconds": {
                                      "type": "number"
                                    },
                                    "onNumberSeconds": { "type": "number" }
                                  },
                                  "additionalProperties": false
                                },
                                "stopSpeakPlan": {
                                  "type": "object",
                                  "properties": {
                                    "minWords": {
                                      "type": "number",
                                      "description": "The minimum words to speak from the user for the AI to be interrupted and stop talking ."
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "callTimeoutSeconds": {
                                  "type": "number",
                                  "description": "The timeout for the call in seconds."
                                },
                                "enableEndcallTool": {
                                  "type": "boolean",
                                  "description": "Whether to enable endcall tool."
                                },
                                "voiceSpecific": {
                                  "type": "object",
                                  "properties": {
                                    "minCharacters": {
                                      "type": "number",
                                      "description": "The minimum number of characters to init the speech gen to generate audio for, the more the higher the latency will be, default is 5"
                                    },
                                    "maxLengthWithoutPunctuation": {
                                      "type": "number",
                                      "description": "The maximum length of the string without punctuation to init the speech gen to generate audio for, the more the higher the latency will be, default is 100"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "enabledGlobalTools": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "enum": ["handoffHumanDashboardTool"]
                                  },
                                  "description": "The global tools that will be enabled for the LLM."
                                },
                                "defaultToolOverrides": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "description": {
                                        "type": "string",
                                        "nullable": true
                                      },
                                      "fields": {
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "string",
                                                "number",
                                                "boolean"
                                              ]
                                            },
                                            "description": { "type": "string" }
                                          },
                                          "additionalProperties": false
                                        },
                                        "nullable": true
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "description": "Overrides for default system tools configuration."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Global options for the nodes setup, text/voice."
                            },
                            "id": { "type": "string" },
                            "enableFallback": {
                              "type": "boolean",
                              "description": "Enable fallback for the agent llm model."
                            },
                            "fallbackSettings": {
                              "type": "object",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ],
                                  "description": "The model to use for fallback."
                                },
                                "creditThreshold": {
                                  "type": "number",
                                  "description": "The credit threshold for fallback."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Fallback settings for the agent llm model."
                            },
                            "marketplace": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to show the agent in marketplace or not."
                                },
                                "priceUSD": {
                                  "type": "number",
                                  "description": "The price for the agent, default is 0/free"
                                }
                              },
                              "additionalProperties": false,
                              "description": "Marketplace settings for the agent."
                            },
                            "disableRating": {
                              "type": "boolean",
                              "description": "Whether to disable the chat end rating feature."
                            },
                            "chatEndMessage": {
                              "type": "string",
                              "description": "The message to show when the chat ends."
                            },
                            "aiIntroductionMessage": {
                              "type": "string",
                              "description": "The message to show when the user starts the chat on metachannels."
                            },
                            "enableAIIntroductionMessage": {
                              "type": "boolean",
                              "description": "Whether to enable the AI introduction message or not."
                            },
                            "deployed": {
                              "type": "boolean",
                              "description": "Whether the agent is deployed or not."
                            },
                            "captureIGStories": {
                              "type": "boolean",
                              "description": "Whether to capture instagram stories or not."
                            },
                            "gdprCompliance": {
                              "type": "boolean",
                              "description": "Whether to comply with GDPR or not."
                            },
                            "disableFileUpload": { "type": "boolean" },
                            "buttonVariant": {
                              "type": "string",
                              "enum": [
                                "custom",
                                "solid",
                                "bordered",
                                "light",
                                "flat",
                                "faded",
                                "shadow",
                                "ghost"
                              ],
                              "description": "The variant of the button. Custom is the default original styling."
                            },
                            "inputVariant": {
                              "type": "string",
                              "enum": [
                                "custom",
                                "flat",
                                "bordered",
                                "faded",
                                "underlined"
                              ],
                              "description": "The variant of the input. Custom is the default original styling."
                            },
                            "privacyDisclaimer": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to show privacy disclaimer before user interaction"
                                },
                                "text": {
                                  "type": "string",
                                  "description": "The privacy disclaimer text to display to users"
                                },
                                "privacyPolicyUrl": {
                                  "type": "string",
                                  "description": "URL to the privacy policy page"
                                },
                                "acceptButtonLabel": {
                                  "type": "string",
                                  "description": "Label for the accept/proceed button"
                                },
                                "privacyPolicyButtonLabel": {
                                  "type": "string",
                                  "description": "Label for the privacy policy link button"
                                }
                              },
                              "additionalProperties": false,
                              "description": "Privacy disclaimer configuration for the agent"
                            },
                            "leadCollectionRules": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to use custom lead collection rules. If false or not set, uses default behavior (collect when email, phone_number, or phone is present)"
                                },
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "variables": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "Array of variable names that must ALL be present for this rule to match (AND condition)"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Optional description of what this rule captures"
                                      }
                                    },
                                    "required": ["variables"],
                                    "additionalProperties": false
                                  },
                                  "description": "Array of rule sets. A lead is collected if it matches ANY rule set (OR condition between rules). Each rule requires ALL its variables to be present (AND condition within a rule)."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Custom lead collection rules. Allows defining which variable combinations should trigger lead capture. If not set, defaults to collecting leads when email, phone_number, or phone is present."
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "required": ["success", "message", "data"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Agent created successfully",
                  "data": {
                    "ID": "ag_123456789",
                    "title": "My Customer Service Agent",
                    "description": "An AI agent that handles customer inquiries"
                  }
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "get": {
        "operationId": "getAgents",
        "summary": "Get Agents",
        "tags": ["Agents"],
        "security": [{ "Authorization": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {}
                      },
                      "required": ["success", "message"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{id}": {
      "get": {
        "operationId": "getAgent",
        "summary": "Get Single Agent",
        "tags": ["Agents"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "**Title**: The title of the agent."
                            },
                            "description": {
                              "type": "string",
                              "description": "**Description**: A brief description of the agent."
                            },
                            "ownerID": {
                              "type": "string",
                              "description": "**Owner ID**: The unique identifier of the agent's owner."
                            },
                            "theme": {
                              "type": "string",
                              "description": "**Theme**: The visual theme of the agent, e.g., 'blue-light' or 'custom-blue-dark'."
                            },
                            "voiceConfig": {
                              "type": "object",
                              "properties": {
                                "transcriber": {
                                  "type": "object",
                                  "properties": {
                                    "speechConfig": {
                                      "type": "object",
                                      "properties": {
                                        "format": { "type": "string" },
                                        "sampleRate": { "type": "number" }
                                      },
                                      "additionalProperties": false
                                    },
                                    "modelId": { "type": "string" },
                                    "patienceFactor": { "type": "number" },
                                    "language": { "type": "string" },
                                    "provider": {
                                      "type": "string",
                                      "enum": [
                                        "deepgram",
                                        "gladia",
                                        "assemblyai",
                                        "speechmatics",
                                        "google-cloud-speech",
                                        "google-live-transcription"
                                      ]
                                    },
                                    "randomOptions": {},
                                    "internal": {
                                      "type": "object",
                                      "properties": {
                                        "inputAudioStream": {},
                                        "debug": { "type": "boolean" }
                                      },
                                      "additionalProperties": false
                                    },
                                    "apiKey": { "type": "string" },
                                    "platformSpecific": {
                                      "type": "object",
                                      "properties": {
                                        "deepgram": {
                                          "type": "object",
                                          "properties": {
                                            "keywords": {
                                              "type": "array",
                                              "items": { "type": "string" },
                                              "description": "Keywords to focus on in the transcription."
                                            },
                                            "language": { "type": "string" },
                                            "smart_format": {
                                              "type": "boolean"
                                            },
                                            "model": { "type": "string" },
                                            "interim_results": {
                                              "type": "boolean"
                                            },
                                            "endpointing": { "type": "number" },
                                            "no_delay": { "type": "boolean" },
                                            "autoLanguageDetection": {
                                              "type": "boolean"
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "assemblyai": {
                                          "type": "object",
                                          "properties": {
                                            "modelId": { "type": "string" }
                                          },
                                          "required": ["modelId"],
                                          "additionalProperties": false
                                        },
                                        "googleCloud": {
                                          "type": "object",
                                          "properties": {
                                            "keywords": {
                                              "type": "array",
                                              "items": { "type": "string" },
                                              "description": "Keywords or phrases to focus on in the transcription."
                                            },
                                            "model": {
                                              "type": "string",
                                              "description": "The Google Cloud Speech model to use."
                                            },
                                            "languageCode": {
                                              "type": "string",
                                              "description": "The language code for transcription."
                                            },
                                            "enableAutomaticPunctuation": {
                                              "type": "boolean",
                                              "description": "Enable automatic punctuation."
                                            },
                                            "enableWordTimeOffsets": {
                                              "type": "boolean",
                                              "description": "Enable word time offsets."
                                            },
                                            "maxAlternatives": {
                                              "type": "number",
                                              "description": "Maximum number of recognition alternatives."
                                            },
                                            "profanityFilter": {
                                              "type": "boolean",
                                              "description": "Enable profanity filter."
                                            },
                                            "speechContexts": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "phrases": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "boost": { "type": "number" }
                                                },
                                                "required": ["phrases"],
                                                "additionalProperties": false
                                              },
                                              "description": "Speech contexts for better recognition."
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "utteranceThreshold": { "type": "number" },
                                    "inputVoiceEnhancer": { "type": "boolean" }
                                  },
                                  "required": ["provider"],
                                  "additionalProperties": false,
                                  "description": "**Transcriber**: The configuration options for the transcriber provider used by the agent."
                                },
                                "speechGen": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "highAudioQuality": {
                                          "type": "boolean",
                                          "description": "Generate highest quality audio possible, must have pro plan or higher on elevenlabs to enable your own key to work with this option."
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "elevenlabs",
                                            "deepgram",
                                            "cartesia",
                                            "playht",
                                            "azure",
                                            "rime-ai",
                                            "openai",
                                            "playai-groq",
                                            "google-cloud",
                                            "google-live"
                                          ],
                                          "description": "Speech providers supported by the app."
                                        },
                                        "modelId": {
                                          "type": "string",
                                          "description": "The model id of the speech gen."
                                        },
                                        "voiceId": {
                                          "type": "string",
                                          "description": "The voice id for the speech service."
                                        },
                                        "apiKey": { "type": "string" },
                                        "region": { "type": "string" },
                                        "backgroundNoise": {
                                          "type": "string",
                                          "enum": [
                                            "restaurant",
                                            "office",
                                            "park",
                                            "street"
                                          ]
                                        },
                                        "punctuationBreaks": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        },
                                        "platformSpecific": {
                                          "type": "object",
                                          "properties": {
                                            "elevenLabs": {
                                              "type": "object",
                                              "properties": {
                                                "stability": {
                                                  "type": "number"
                                                },
                                                "similarity_boost": {
                                                  "type": "number"
                                                },
                                                "use_speaker_boost": {
                                                  "type": "boolean"
                                                },
                                                "speed": { "type": "number" },
                                                "style": { "type": "number" }
                                              },
                                              "additionalProperties": false
                                            },
                                            "playht": {
                                              "type": "object",
                                              "properties": {
                                                "voiceId": { "type": "string" }
                                              },
                                              "required": ["voiceId"],
                                              "additionalProperties": false
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "backChannelling": {
                                          "type": "boolean",
                                          "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                        },
                                        "language": { "type": "string" },
                                        "enableLongMessageBackchannelling": {
                                          "type": "boolean",
                                          "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                        },
                                        "backchannelMessages": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        },
                                        "backchannelInterval": {
                                          "type": "number"
                                        },
                                        "wordsReplacements": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "word": { "type": "string" },
                                              "replacement": {
                                                "type": "string"
                                              }
                                            },
                                            "required": ["word", "replacement"],
                                            "additionalProperties": false
                                          }
                                        }
                                      },
                                      "required": ["provider"]
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "internal": {
                                          "type": "object",
                                          "properties": {
                                            "inputTextStream": {},
                                            "audioConfig": {
                                              "type": "object",
                                              "properties": {
                                                "format": { "type": "string" },
                                                "sampleRate": {
                                                  "type": "number"
                                                },
                                                "channels": { "type": "number" }
                                              },
                                              "required": [
                                                "format",
                                                "sampleRate",
                                                "channels"
                                              ],
                                              "additionalProperties": false
                                            },
                                            "emitOnComplete": {
                                              "type": "boolean"
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      }
                                    }
                                  ],
                                  "description": "**Speech Generation**: The configuration options for the speech generation provider used by the agent."
                                },
                                "config": {
                                  "type": "object",
                                  "properties": {
                                    "recordAudio": { "type": "boolean" },
                                    "backgroundNoise": {
                                      "type": "string",
                                      "enum": [
                                        "restaurant",
                                        "office",
                                        "street",
                                        "none"
                                      ]
                                    },
                                    "enableWebCalling": { "type": "boolean" },
                                    "firstInputChunkUNIXMs": {
                                      "type": "number"
                                    },
                                    "firstOutputChunkUNIXMs": {
                                      "type": "number"
                                    }
                                  },
                                  "required": ["recordAudio"],
                                  "additionalProperties": false,
                                  "description": "**Call Configuration**: The call configuration settings for the agent."
                                }
                              },
                              "additionalProperties": false
                            },
                            "light": {
                              "type": "boolean",
                              "description": "Whether to enable light mode for the agent. If set to true, the agent will not retain previous chat interactions for privacy reasons."
                            },
                            "enableVertex": {
                              "type": "boolean",
                              "description": "Whether to enable Vertex AI for the agent."
                            },
                            "autoOpenWidget": {
                              "type": "boolean",
                              "description": "Whether to auto-open the widget when the agent is loaded."
                            },
                            "createdAtUNIX": {
                              "type": "number",
                              "description": "The timestamp when the agent was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                            },
                            "disabled": {
                              "type": "boolean",
                              "description": "Indicates whether the agent is disabled. If set to true, the agent will not be active."
                            },
                            "vectorDb": {
                              "description": "Specifies the vector database configuration for the agent. This database is used for handling vectorized data or embeddings."
                            },
                            "withRefresh": {
                              "type": "boolean",
                              "description": "Determines whether the agent should refresh its settings or data dynamically."
                            },
                            "agentPlatform": {
                              "type": "string",
                              "description": "Specifies the platform on which the agent operates, such as web, mobile, or other environments."
                            },
                            "ID": {
                              "type": "string",
                              "description": "A unique identifier for the agent used internally."
                            },
                            "storageID": {
                              "type": "string",
                              "description": "The identifier for the agent's storage configuration."
                            },
                            "VF_DIALOGUE_API_KEY": {
                              "type": "string",
                              "description": "API key for VF dialogue integration, enabling the agent to communicate with external systems."
                            },
                            "VF_PROJECT_API_KEY": {
                              "type": "string",
                              "description": "API key associated with the VF project to authenticate and enable specific functionalities."
                            },
                            "VF_PROJECT_ID": {
                              "type": "string",
                              "description": "The unique identifier of the VF project linked to the agent."
                            },
                            "VF_KB_API_KEY": {
                              "type": "string",
                              "description": "API key for accessing the VF knowledge base, enabling advanced knowledge retrieval capabilities."
                            },
                            "roundedImageURL": {
                              "type": "string",
                              "description": "URL pointing to the rounded image asset used to visually represent the agent."
                            },
                            "rectangeImageURL": {
                              "type": "string",
                              "description": "URL pointing to the rectangular image asset for the agent's branding or display."
                            },
                            "messageDelayMS": {
                              "type": "number",
                              "description": "Specifies the delay in milliseconds for the agent to send messages, simulating natural conversation timing."
                            },
                            "scrollAnimation": {
                              "type": "boolean",
                              "description": "Indicates whether scroll animations are enabled for smooth transitions in the chat interface."
                            },
                            "proactiveMessage": {
                              "type": "string",
                              "description": "A predefined message the agent sends proactively to engage users."
                            },
                            "acceptFileUpload": {
                              "type": "boolean",
                              "description": "Determines if the agent accepts file uploads from users as part of the interaction."
                            },
                            "recordChatHistory": {
                              "type": "boolean",
                              "description": "Specifies whether the agent logs chat histories for future reference or analysis."
                            },
                            "chatBgURL": {
                              "type": "string",
                              "description": "URL of the background image used in the chat interface."
                            },
                            "disableSmoothScroll": {
                              "type": "boolean",
                              "description": "Disables smooth scrolling if set to true, potentially improving performance on low-end devices."
                            },
                            "isDeployed": {
                              "type": "boolean",
                              "description": "Indicates whether the agent is currently deployed and operational."
                            },
                            "tokensUsage": {
                              "description": "Tracks the token usage statistics for the agent, typically used in LLM integrations."
                            },
                            "maxTokensUsage": {
                              "description": "Defines the maximum allowable token usage for the agent to prevent overconsumption."
                            },
                            "lastModified": {
                              "type": "number",
                              "description": "The timestamp of the last modification made to the agent's configuration."
                            },
                            "fontFamily": {
                              "type": "string",
                              "description": "The font family used in the agent's user interface for consistent branding."
                            },
                            "branding": {
                              "type": "string",
                              "description": "Custom branding information or labels associated with the agent."
                            },
                            "customThemeJSONString": {
                              "type": "string",
                              "description": "A JSON string defining a custom theme for the agent's interface."
                            },
                            "autoStartWidget": {
                              "type": "boolean",
                              "description": "Determines if the widget should auto-start upon page load."
                            },
                            "allTimeTriggers": {
                              "type": "number",
                              "description": "The total number of triggers or interactions the agent has handled."
                            },
                            "syncBrowser": {
                              "type": "boolean",
                              "description": "Enables synchronization of settings or states with the browser session."
                            },
                            "delayBeforeSubmit": {
                              "type": "number",
                              "description": "The delay (in milliseconds) before submitting user input to the agent."
                            },
                            "region": {
                              "type": "string",
                              "enum": ["eu", "na"],
                              "description": "Defines the geographical region settings for the agent, such as localization."
                            },
                            "listenForUrlChanges": {
                              "type": "boolean",
                              "description": "Specifies if the agent should monitor and react to changes in the browser URL."
                            },
                            "chatForget": {
                              "type": "boolean",
                              "description": "If enabled, the agent will not retain previous chat interactions for privacy reasons."
                            },
                            "lang": {
                              "type": "string",
                              "description": "Specifies the default language for the agent's interactions and responses."
                            },
                            "enableAudioSupport": {
                              "type": "boolean",
                              "description": "Enables audio features, allowing the agent to process and respond to audio inputs."
                            },
                            "AITranslateTo": {
                              "type": "string",
                              "description": "Defines the target language for AI translation during interactions."
                            },
                            "enableAITranslate": {
                              "type": "boolean",
                              "description": "Activates AI-based translation for multilingual support."
                            },
                            "disableNoReplyListener": {
                              "type": "boolean",
                              "description": "Disables the listener for instances where no reply is detected from the agent."
                            },
                            "disableHumanHandoff": {
                              "type": "boolean",
                              "description": "Prevents the agent from escalating interactions to a human operator."
                            },
                            "alwaysShowHandoff": {
                              "type": "boolean",
                              "description": "Ensures the handoff option is always visible, regardless of agent status."
                            },
                            "manualControl": {
                              "type": "boolean",
                              "description": "Allows manual control over specific agent functionalities."
                            },
                            "enableVGHandoff": {
                              "type": "boolean",
                              "description": "Activates VG-specific handoff mechanisms for the agent."
                            },
                            "enableGeoAnalytics": {
                              "type": "boolean",
                              "description": "Enables geographic analytics to track user interactions based on location."
                            },
                            "hideVoiceflowAnalytics": {
                              "type": "boolean",
                              "description": "Hides Voiceflow-specific analytics including intents, conversation flow metrics, and rating analytics."
                            },
                            "hideCallAnalytics": {
                              "type": "boolean",
                              "description": "Hides voice call analytics including duration, latency, cost breakdown, call counts, and call end reasons."
                            },
                            "hideConversationMetrics": {
                              "type": "boolean",
                              "description": "Hides conversation metrics including user retention, conversation length, time retention, and engagement metrics."
                            },
                            "hideCustomAnalytics": {
                              "type": "boolean",
                              "description": "Hides user-created custom charts and metrics from the analytics dashboard."
                            },
                            "hideVapiAnalytics": {
                              "type": "boolean",
                              "description": "Hides VAPI-specific analytics including cost tracking and voice-related metrics."
                            },
                            "hideFunnelAnalytics": {
                              "type": "boolean",
                              "description": "Hides the user engagement funnel chart that tracks progression from widget views to high engagement."
                            },
                            "fixedHandoffPopup": {
                              "type": "boolean",
                              "description": "Ensures the handoff popup remains fixed in the interface."
                            },
                            "buttonsLayout": {
                              "type": "string",
                              "enum": ["horizontal", "vertical", "in-footer"],
                              "description": "Defines the layout and style of buttons in the agent's interface."
                            },
                            "ADVANCED_customCSS": {
                              "type": "string",
                              "description": "Specifies advanced custom CSS for overriding the default styling of the agent's interface."
                            },
                            "messagesLimit": {
                              "type": "number",
                              "description": "Sets a cap on the number of messages the agent can exchange in a single session."
                            },
                            "whatsappToken": {
                              "type": "string",
                              "description": "Token for authenticating and integrating with WhatsApp services."
                            },
                            "whatsappNumberId": {
                              "type": "string",
                              "description": "The ID associated with the WhatsApp number used by the agent."
                            },
                            "whatsappBusniessId": {
                              "type": "string",
                              "description": "The business ID for WhatsApp integration, enabling enterprise-level features."
                            },
                            "waTestNumber": {
                              "type": "string",
                              "description": "A test number used during WhatsApp integration setup or testing."
                            },
                            "waVerifyPassed": {
                              "type": "boolean",
                              "description": "Indicates if WhatsApp verification was successfully completed."
                            },
                            "waTestPassed": {
                              "type": "boolean",
                              "description": "Indicates if the WhatsApp integration test was successful."
                            },
                            "webhookUrl": {
                              "type": "string",
                              "description": "The URL where the agent sends webhook events to external systems."
                            },
                            "gcloudPrivateKey": {
                              "type": "string",
                              "description": "Private key for Google Cloud services integration."
                            },
                            "gcloudClientEmail": {
                              "type": "string",
                              "description": "Client email for Google Cloud authentication."
                            },
                            "smartInit": {
                              "type": "boolean",
                              "description": "Activates smart initialization features for the agent."
                            },
                            "UIhandoffTitle": {
                              "type": "string",
                              "description": "Title displayed during UI handoff interactions."
                            },
                            "UIhandoffSubtitle": {
                              "type": "string",
                              "description": "Subtitle displayed during UI handoff interactions."
                            },
                            "igVerified": {
                              "type": "boolean",
                              "description": "Indicates if the agent's Instagram integration is verified."
                            },
                            "igAccessToken": {
                              "type": "string",
                              "description": "Access token for authenticating Instagram API requests."
                            },
                            "showHandoffEvenIfOffline": {
                              "type": "boolean",
                              "description": "Displays the handoff option even if the agent is offline."
                            },
                            "persistHandoffOnRefresh": {
                              "type": "boolean",
                              "description": "Maintains handoff state when users refresh or close their browser tabs."
                            },
                            "blockInputDuringHandoffRequest": {
                              "type": "boolean",
                              "description": "Blocks chat input when a user requests human handoff but no human has been assigned yet. Only applies to VF agents."
                            },
                            "customButtonJSON_STRING": {
                              "type": "string",
                              "description": "JSON string defining custom buttons for the agent's interface."
                            },
                            "vg_initPrompt": {
                              "type": "string",
                              "description": "The initial prompt displayed or used by the VF system."
                            },
                            "vg_prompt": {
                              "type": "string",
                              "description": "The main prompt template used for generating responses."
                            },
                            "vg_initMessages": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "Initial messages loaded for the agent's conversation flow."
                            },
                            "vg_systemPrompt": {
                              "type": "string",
                              "description": "System-level prompt defining the agent's behavior and rules."
                            },
                            "vg_temperature": {
                              "type": "number",
                              "description": "Defines the temperature setting for response variability in the VF model."
                            },
                            "vg_defaultModel": {
                              "type": "string",
                              "enum": [
                                "gpt-5-chat-latest",
                                "gpt-5-2025-08-07",
                                "gpt-5-mini-2025-08-07",
                                "gpt-5-nano-2025-08-07",
                                "gpt-3.5-turbo-0125",
                                "gpt-4-1106-preview",
                                "gpt-4.5-preview-2025-02-27",
                                "gpt-4o",
                                "gpt-4o-mini",
                                "gpt-4.1-2025-04-14",
                                "gpt-4.1-mini-2025-04-14",
                                "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                "llama3-8b-8192",
                                "llama3-70b-8192",
                                "llama-3.1-8b-instant",
                                "llama-3.1-70b-versatile",
                                "llama-3.2-90b-text-preview",
                                "llama-3.2-11b-text-preview",
                                "llama-3.3-70b-versatile",
                                "meta-llama/llama-4-scout-17b-16e-instruct",
                                "meta-llama/llama-4-maverick-17b-128e-instruct",
                                "mixtral-8x7b-32768",
                                "gemma-7b-it",
                                "gemma2-9b-it",
                                "claude-opus-4-20250514",
                                "claude-sonnet-4-20250514",
                                "claude-3-5-sonnet-20240620",
                                "claude-3-5-sonnet-20241022",
                                "claude-3-opus-20240229",
                                "claude-3-sonnet-20240229",
                                "claude-3-haiku-20240307",
                                "claude-3-5-haiku-20241022",
                                "claude-3-7-sonnet-20250219",
                                "gemini-1.5-pro",
                                "gemini-1.5-flash",
                                "gemini-1.0-pro",
                                "gemini-2.0-flash-exp",
                                "gemini-2.0-flash-thinking-exp-1219",
                                "gemini-2.5-pro",
                                "gemini-2.5-pro-exp-03-25",
                                "gemini-2.5-pro-preview-03-25",
                                "gemini-2.5-flash-preview-05-20",
                                "gemini-2.5-flash",
                                "gpt-4-32k",
                                "gpt-4",
                                "gpt-3.5-turbo-16k",
                                "gpt-3.5-turbo",
                                "deepseek-chat",
                                "deepseek-r1-distill-llama-70b",
                                "grok-2-latest",
                                "grok-3",
                                "grok-3-mini",
                                "grok-3-fast",
                                "grok-4-0709",
                                "qwen-max-latest",
                                "qwen-plus-latest",
                                "qwen-turbo-latest",
                                "custom-llm",
                                "models/gemini-2.5-pro-preview-03-25",
                                "azure-eu-gpt-4o",
                                "azure-na-gpt-4o"
                              ],
                              "description": "Specifies the default LLM model used by the agent for language processing."
                            },
                            "vg_maxTokens": {
                              "type": "number",
                              "description": "Sets the maximum token limit for generating responses."
                            },
                            "vg_kbDefaultDimension": {
                              "type": "number",
                              "description": "Default dimensionality for the agent's knowledge base embeddings."
                            },
                            "vg_kbTopChunks": {
                              "type": "number",
                              "description": "The number of top chunks retrieved from the knowledge base during a query."
                            },
                            "SECRET_API_KEY": {
                              "type": "string",
                              "description": "The secret API key for secure integration with VF services."
                            },
                            "vg_kbCharCount": {
                              "type": "number",
                              "description": "Tracks the total character count of the agent's knowledge base."
                            },
                            "vg_kbDocsNum": {
                              "type": "number",
                              "description": "The total number of documents stored in the agent's knowledge base."
                            },
                            "vg_enableUIEngine": {
                              "type": "boolean",
                              "description": "Activates the UI engine for enhanced interface capabilities."
                            },
                            "vg_enableAboutContext": {
                              "type": "boolean",
                              "description": "Enables contextual information about the agent for users."
                            },
                            "vg_kb_llm": {
                              "type": "object",
                              "properties": {
                                "searchMethod": {
                                  "anyOf": [
                                    { "type": "string", "enum": ["smart"] },
                                    { "type": "string", "enum": ["simple"] }
                                  ]
                                },
                                "searchPrompt": { "type": "string" },
                                "modelId": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ]
                                },
                                "temprature": { "type": "number" },
                                "maxTokens": { "type": "number" }
                              },
                              "additionalProperties": false,
                              "description": "Configuration for LLM-based knowledge base queries, including search methods and model parameters."
                            },
                            "vg_enableUIEngineForms": {
                              "type": "boolean",
                              "description": "Enables form and input components in the UI engine for web channel."
                            },
                            "vg_max_messages_history": {
                              "type": "number",
                              "description": "Maximum number of messages retained in the chat history."
                            },
                            "ifKnowsThreshold": {
                              "type": "number",
                              "description": "Confidence threshold for determining if the agent 'knows' an answer."
                            },
                            "avatarImageUrl": {
                              "type": "string",
                              "description": "URL of the avatar image representing the agent."
                            },
                            "headerImageUrl": {
                              "type": "string",
                              "description": "URL of the header image displayed in the chat interface."
                            },
                            "bannerImageUrl": {
                              "type": "string",
                              "description": "URL of the banner image used in the agent's branding."
                            },
                            "soundEffectUrl": {
                              "type": "string",
                              "description": "URL of the sound effect file used for agent interactions."
                            },
                            "soundEffectEnabled": {
                              "type": "boolean",
                              "description": "Enables or disables sound effects for the agent."
                            },
                            "enableQuickFileUpload": {
                              "type": "boolean",
                              "description": "Allows quick file uploads during chat interactions."
                            },
                            "instagramOptions": {
                              "type": "object",
                              "properties": {
                                "pageId": { "type": "string" },
                                "accessToken": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "translateUserResponse": { "type": "boolean" },
                            "starred": { "type": "boolean" },
                            "flowise": {
                              "type": "object",
                              "properties": {
                                "webhookUrl": { "type": "string" },
                                "webhookSecret": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "vfSettings": {
                              "type": "object",
                              "properties": {
                                "enableIgnoreUrlPaths": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "vapi": {},
                            "vapiConfig": {
                              "type": "object",
                              "properties": {
                                "syncKbOnSave": { "type": "boolean" },
                                "PUBLIC_API_KEY": { "type": "string" },
                                "PRIVATE_API_KEY": { "type": "string" },
                                "enableVapiOnWeb": { "type": "boolean" },
                                "overrideWithVG": { "type": "boolean" },
                                "promptOnWeb": { "type": "boolean" },
                                "maxCostMonthly": { "type": "number" },
                                "maxMinutesMonthly": { "type": "number" },
                                "useVfProject": { "type": "boolean" },
                                "syncTools": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "vgOptions": {
                              "type": "object",
                              "properties": {
                                "isLlmStudio": { "type": "boolean" },
                                "showSources": { "type": "boolean" },
                                "lightUiEngine": { "type": "boolean" },
                                "legacyKb": { "type": "boolean" },
                                "maxChunkSize": { "type": "number" },
                                "handoffTimeout": { "type": "number" }
                              },
                              "additionalProperties": false
                            },
                            "ui": {
                              "type": "object",
                              "properties": {
                                "showWhatsappButtonOnWeb": {
                                  "type": "boolean",
                                  "description": "Show little whatsapp button on web if it's connected."
                                },
                                "bgImageVisible": { "type": "boolean" },
                                "widgetType": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "enum": ["direct-chat"]
                                    },
                                    { "type": "string", "enum": ["tabs"] }
                                  ]
                                },
                                "enableFixedFeedbackBtns": {
                                  "type": "boolean"
                                },
                                "switchConversationSides": {
                                  "type": "boolean"
                                },
                                "switchDashboardOnly": { "type": "boolean" },
                                "voice": {
                                  "type": "object",
                                  "properties": {
                                    "question": { "type": "string" },
                                    "continueBtnLabel": { "type": "string" },
                                    "dismissBtnLabel": { "type": "string" },
                                    "disableVoiceOrb": { "type": "boolean" }
                                  },
                                  "required": [
                                    "question",
                                    "continueBtnLabel",
                                    "dismissBtnLabel"
                                  ],
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "assignedToolsIds": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "tools": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "isDefault": {
                                    "type": "boolean",
                                    "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                                  },
                                  "method": {
                                    "type": "string",
                                    "enum": ["GET", "POST", "PUT", "PATCH"],
                                    "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                                  },
                                  "id": {
                                    "type": "string",
                                    "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the tool, providing a human-readable identifier for display purposes."
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                                  },
                                  "serverUrl": {
                                    "type": "string",
                                    "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                                  },
                                  "serverUrlSecret": {
                                    "type": "string",
                                    "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                                  },
                                  "createdAt": {
                                    "type": "string",
                                    "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                                  },
                                  "updatedAt": {
                                    "type": "string",
                                    "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                                  },
                                  "disabled": {
                                    "type": "boolean",
                                    "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                                  },
                                  "isVapiTool": {
                                    "type": "boolean",
                                    "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                                  },
                                  "vapiId": {
                                    "type": "string",
                                    "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                                  },
                                  "variablesIds": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                                  },
                                  "agentId": {
                                    "type": "string",
                                    "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                                  },
                                  "userId": {
                                    "type": "string",
                                    "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                                  },
                                  "backchannellingPhrases": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                                  },
                                  "toolsSettings": {},
                                  "fields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                        },
                                        "in": {
                                          "type": "string",
                                          "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                        },
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "string",
                                            "number",
                                            "boolean",
                                            "system"
                                          ],
                                          "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                        },
                                        "value": {
                                          "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                        },
                                        "defaultValue": {
                                          "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                        },
                                        "key": {
                                          "type": "string",
                                          "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                        },
                                        "required": {
                                          "type": "boolean",
                                          "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                        },
                                        "reusable": {
                                          "type": "boolean",
                                          "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                        },
                                        "isEnv": {
                                          "type": "boolean",
                                          "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                        },
                                        "isSystem": {
                                          "type": "boolean",
                                          "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                        },
                                        "isGlobal": {
                                          "type": "boolean",
                                          "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                        },
                                        "agentId": {
                                          "type": "string",
                                          "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                        },
                                        "userId": {
                                          "type": "string",
                                          "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                        }
                                      },
                                      "required": ["id"],
                                      "additionalProperties": false
                                    }
                                  },
                                  "channels": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "web-chat",
                                        "whatsapp",
                                        "instagram",
                                        "telegram",
                                        "discord",
                                        "gb-chat",
                                        "vapi",
                                        "messenger",
                                        "voice",
                                        "telephony"
                                      ]
                                    },
                                    "description": "The channels that the tool can be used on."
                                  }
                                },
                                "required": ["id", "name", "description"],
                                "additionalProperties": false
                              }
                            },
                            "internal": {
                              "type": "object",
                              "properties": {
                                "accountCreationConfig": {
                                  "type": "string",
                                  "enum": ["v2"]
                                },
                                "websocketServer": {
                                  "anyOf": [
                                    { "type": "string", "enum": ["edge"] },
                                    { "type": "string", "enum": ["nodejs"] }
                                  ]
                                },
                                "setOnResponse": { "type": "boolean" },
                                "enableSetOnLoad": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "disableAutoTranscribeAudio": { "type": "boolean" },
                            "disableTranscriptSharing": { "type": "boolean" },
                            "instaAgentUsername": { "type": "string" },
                            "convoTags": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "vfConfig": {
                              "type": "object",
                              "properties": {
                                "alwaysEnableCardButtons": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "discord": {
                              "type": "object",
                              "properties": {
                                "channelIds": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "webhookUrls": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                }
                              },
                              "additionalProperties": false
                            },
                            "limits": {
                              "type": "object",
                              "properties": {
                                "maxInteractionsPerUserId": {
                                  "type": "number"
                                },
                                "maxAnnualCreditsUsage": { "type": "number" },
                                "maxMonthlyCreditsUsage": { "type": "number" },
                                "maxMessages": {
                                  "type": "number",
                                  "description": "Maximum number of messages allowed per conversation"
                                },
                                "maxMessagesRetentionDays": {
                                  "type": "number",
                                  "description": "Retention period in days for messages"
                                }
                              },
                              "additionalProperties": false
                            },
                            "tabs": { "type": "array" },
                            "kbTags": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "kbTagsDataMap": { "type": "array" },
                            "nodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "name": { "type": "string" },
                                  "description": {
                                    "type": "string",
                                    "description": "A short description of what this node does and when it should be used, specially useful if the node is global or when the LLM detects automatic rerouting."
                                  },
                                  "instructions": {
                                    "type": "string",
                                    "description": "What should this LLM node do."
                                  },
                                  "mcpServers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": { "type": "string" },
                                        "url": { "type": "string" },
                                        "transport": {
                                          "type": "string",
                                          "enum": ["sse", "websocket", "stdio"]
                                        },
                                        "useNodeEventSource": {
                                          "type": "boolean"
                                        },
                                        "reconnect": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": { "type": "boolean" },
                                            "maxAttempts": { "type": "number" },
                                            "delayMs": { "type": "number" }
                                          },
                                          "additionalProperties": false
                                        },
                                        "command": { "type": "string" },
                                        "args": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "voiceInstructions": {
                                    "type": "string",
                                    "description": "The voice instructions for this node, will be used instead of instructions in voice channels if provided."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If true, this node will be always present for the LLM"
                                  },
                                  "toolsIds": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "The tools that will be available for this node"
                                  },
                                  "toolsSettings": {
                                    "type": "object",
                                    "properties": {
                                      "googleCalendar": {
                                        "type": "object",
                                        "properties": {
                                          "calendarId": { "type": "string" },
                                          "methods": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "enum": [
                                                "create-event",
                                                "check-availability",
                                                "get-slots",
                                                "delete-event"
                                              ]
                                            }
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "childrenNodes": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "nodeId": { "type": "string" },
                                        "condition": {
                                          "type": "string",
                                          "description": "The condition that will be checked to determine if the node should advanced to the selected node id or not or should simply loop in the current node."
                                        }
                                      },
                                      "required": ["nodeId", "condition"],
                                      "additionalProperties": false
                                    },
                                    "description": "The outputs of this node which the node after finishing will choose from to either advance or to keep looping in this node till it caputures or reaches one of the mentioned routers."
                                  },
                                  "llmConfig": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": {
                                        "type": "string",
                                        "enum": [
                                          "gpt-5-chat-latest",
                                          "gpt-5-2025-08-07",
                                          "gpt-5-mini-2025-08-07",
                                          "gpt-5-nano-2025-08-07",
                                          "gpt-3.5-turbo-0125",
                                          "gpt-4-1106-preview",
                                          "gpt-4.5-preview-2025-02-27",
                                          "gpt-4o",
                                          "gpt-4o-mini",
                                          "gpt-4.1-2025-04-14",
                                          "gpt-4.1-mini-2025-04-14",
                                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                          "llama3-8b-8192",
                                          "llama3-70b-8192",
                                          "llama-3.1-8b-instant",
                                          "llama-3.1-70b-versatile",
                                          "llama-3.2-90b-text-preview",
                                          "llama-3.2-11b-text-preview",
                                          "llama-3.3-70b-versatile",
                                          "meta-llama/llama-4-scout-17b-16e-instruct",
                                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                                          "mixtral-8x7b-32768",
                                          "gemma-7b-it",
                                          "gemma2-9b-it",
                                          "claude-opus-4-20250514",
                                          "claude-sonnet-4-20250514",
                                          "claude-3-5-sonnet-20240620",
                                          "claude-3-5-sonnet-20241022",
                                          "claude-3-opus-20240229",
                                          "claude-3-sonnet-20240229",
                                          "claude-3-haiku-20240307",
                                          "claude-3-5-haiku-20241022",
                                          "claude-3-7-sonnet-20250219",
                                          "gemini-1.5-pro",
                                          "gemini-1.5-flash",
                                          "gemini-1.0-pro",
                                          "gemini-2.0-flash-exp",
                                          "gemini-2.0-flash-thinking-exp-1219",
                                          "gemini-2.5-pro",
                                          "gemini-2.5-pro-exp-03-25",
                                          "gemini-2.5-pro-preview-03-25",
                                          "gemini-2.5-flash-preview-05-20",
                                          "gemini-2.5-flash",
                                          "gpt-4-32k",
                                          "gpt-4",
                                          "gpt-3.5-turbo-16k",
                                          "gpt-3.5-turbo",
                                          "deepseek-chat",
                                          "deepseek-r1-distill-llama-70b",
                                          "grok-2-latest",
                                          "grok-3",
                                          "grok-3-mini",
                                          "grok-3-fast",
                                          "grok-4-0709",
                                          "qwen-max-latest",
                                          "qwen-plus-latest",
                                          "qwen-turbo-latest",
                                          "custom-llm",
                                          "models/gemini-2.5-pro-preview-03-25",
                                          "azure-eu-gpt-4o",
                                          "azure-na-gpt-4o"
                                        ]
                                      },
                                      "temperature": {
                                        "type": "number",
                                        "description": "The temperature of the LLM"
                                      },
                                      "maxTokens": {
                                        "type": "number",
                                        "description": "The max tokens of the LLM"
                                      },
                                      "customModelId": {
                                        "type": "string",
                                        "description": "The custom model id of the LLM"
                                      },
                                      "serverUrl": {
                                        "type": "string",
                                        "description": "The server url of the LLM"
                                      },
                                      "apiKey": {
                                        "type": "string",
                                        "description": "The api key of the LLM"
                                      }
                                    },
                                    "required": [
                                      "modelId",
                                      "temperature",
                                      "maxTokens"
                                    ],
                                    "additionalProperties": false
                                  },
                                  "routerLlmConfig": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": {
                                        "type": "string",
                                        "enum": [
                                          "gpt-5-chat-latest",
                                          "gpt-5-2025-08-07",
                                          "gpt-5-mini-2025-08-07",
                                          "gpt-5-nano-2025-08-07",
                                          "gpt-3.5-turbo-0125",
                                          "gpt-4-1106-preview",
                                          "gpt-4.5-preview-2025-02-27",
                                          "gpt-4o",
                                          "gpt-4o-mini",
                                          "gpt-4.1-2025-04-14",
                                          "gpt-4.1-mini-2025-04-14",
                                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                          "llama3-8b-8192",
                                          "llama3-70b-8192",
                                          "llama-3.1-8b-instant",
                                          "llama-3.1-70b-versatile",
                                          "llama-3.2-90b-text-preview",
                                          "llama-3.2-11b-text-preview",
                                          "llama-3.3-70b-versatile",
                                          "meta-llama/llama-4-scout-17b-16e-instruct",
                                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                                          "mixtral-8x7b-32768",
                                          "gemma-7b-it",
                                          "gemma2-9b-it",
                                          "claude-opus-4-20250514",
                                          "claude-sonnet-4-20250514",
                                          "claude-3-5-sonnet-20240620",
                                          "claude-3-5-sonnet-20241022",
                                          "claude-3-opus-20240229",
                                          "claude-3-sonnet-20240229",
                                          "claude-3-haiku-20240307",
                                          "claude-3-5-haiku-20241022",
                                          "claude-3-7-sonnet-20250219",
                                          "gemini-1.5-pro",
                                          "gemini-1.5-flash",
                                          "gemini-1.0-pro",
                                          "gemini-2.0-flash-exp",
                                          "gemini-2.0-flash-thinking-exp-1219",
                                          "gemini-2.5-pro",
                                          "gemini-2.5-pro-exp-03-25",
                                          "gemini-2.5-pro-preview-03-25",
                                          "gemini-2.5-flash-preview-05-20",
                                          "gemini-2.5-flash",
                                          "gpt-4-32k",
                                          "gpt-4",
                                          "gpt-3.5-turbo-16k",
                                          "gpt-3.5-turbo",
                                          "deepseek-chat",
                                          "deepseek-r1-distill-llama-70b",
                                          "grok-2-latest",
                                          "grok-3",
                                          "grok-3-mini",
                                          "grok-3-fast",
                                          "grok-4-0709",
                                          "qwen-max-latest",
                                          "qwen-plus-latest",
                                          "qwen-turbo-latest",
                                          "custom-llm",
                                          "models/gemini-2.5-pro-preview-03-25",
                                          "azure-eu-gpt-4o",
                                          "azure-na-gpt-4o"
                                        ]
                                      },
                                      "temperature": {
                                        "type": "number",
                                        "description": "The temperature of the LLM"
                                      },
                                      "maxTokens": {
                                        "type": "number",
                                        "description": "The max tokens of the LLM"
                                      },
                                      "customModelId": {
                                        "type": "string",
                                        "description": "The custom model id of the LLM"
                                      },
                                      "serverUrl": {
                                        "type": "string",
                                        "description": "The server url of the LLM"
                                      },
                                      "apiKey": {
                                        "type": "string",
                                        "description": "The api key of the LLM"
                                      }
                                    },
                                    "required": [
                                      "modelId",
                                      "temperature",
                                      "maxTokens"
                                    ],
                                    "additionalProperties": false,
                                    "description": "The LLM config that will be used for the router node, NOTE: This must be a fast LLM model or the latency will be too high between responses."
                                  },
                                  "toolUseBias": {
                                    "type": "number",
                                    "description": "The bias of the LLM to use tools if 0 it will never use tools, if 1 it will only use tools."
                                  },
                                  "autoRerouter": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "boolean",
                                        "description": "If true, the LLM will try to detect if the user has changed his mind about something enabling the AI to rewind back to the previous node."
                                      },
                                      "level": {
                                        "type": "number",
                                        "description": "The level of rewinding, if 1 the LLM will have access to only 1 level or rewind capabilities meaning if it went from node A > B > C > D  then if it at node d & it detects it needs to be at node B again it will be able to rewind back to node B if the level is at least 2, it will not be able to detect node A unless the level is 3 or more, and so on."
                                      }
                                    },
                                    "required": ["enabled", "level"],
                                    "additionalProperties": false,
                                    "description": "The auto rerouter of this node."
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "start",
                                      "end",
                                      "default",
                                      "condition",
                                      "note"
                                    ],
                                    "description": "The type of the node, if not provided it will be a normal LLM node."
                                  },
                                  "rf": {
                                    "description": "The position of the node in the reactflow canvas."
                                  },
                                  "kb": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": { "type": "boolean" },
                                      "maxChunks": {
                                        "type": "number",
                                        "description": "The max chunks to use from the KB."
                                      },
                                      "tags": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "The tags to use to filter the docs we search through"
                                      },
                                      "smartSearch": {
                                        "type": "boolean",
                                        "description": "If true, the LLM will use the smart search to search through the docs."
                                      }
                                    },
                                    "required": ["enabled", "maxChunks"],
                                    "additionalProperties": false
                                  },
                                  "conditionData": {
                                    "type": "object",
                                    "properties": {
                                      "condition": {
                                        "type": "string",
                                        "description": "The condition to check."
                                      }
                                    },
                                    "required": ["condition"],
                                    "additionalProperties": false
                                  },
                                  "preStart": {
                                    "type": "object",
                                    "properties": {
                                      "url": {
                                        "type": "string",
                                        "description": "The URL to send the GET request to."
                                      },
                                      "enabled": {
                                        "type": "boolean",
                                        "description": "If true, we will send a GET request to the URL before starting the node."
                                      },
                                      "testConvoIdValue": {
                                        "type": "string",
                                        "description": "The value to test the URL with."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "description": "The pre start tool of the node, we will send a GET request to this URL before starting the node and provide the results to the AI. GET {url}/{user_id}/{node_name}"
                                  },
                                  "startConfig": {
                                    "type": "object",
                                    "properties": {
                                      "initialMessage": {
                                        "type": "string",
                                        "description": "The initial message to start the conversation with"
                                      },
                                      "userStarts": {
                                        "type": "boolean",
                                        "description": "Whether the user or AI agent gives the first message"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "description": "Configuration for start nodes"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "description",
                                  "instructions",
                                  "llmConfig"
                                ],
                                "additionalProperties": false,
                                "description": "A node in the LLM chain."
                              }
                            },
                            "enableNodes": { "type": "boolean" },
                            "advanced": {
                              "type": "object",
                              "properties": {
                                "serverUrl": { "type": "string" },
                                "serverUrlSecret": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "nodesSettings": {
                              "type": "object",
                              "properties": {
                                "enableUIEngineForms": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will be able to show forms on web channel only."
                                },
                                "geminiLiveOptions": {},
                                "appendBeforePrompt": {
                                  "type": "string",
                                  "description": "The prompt to append to the nodes' prompt."
                                },
                                "routerLLmOptions": {
                                  "type": "object",
                                  "properties": {
                                    "modelId": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    },
                                    "temperature": {
                                      "type": "number",
                                      "description": "The temperature of the LLM"
                                    },
                                    "maxTokens": {
                                      "type": "number",
                                      "description": "The max tokens of the LLM"
                                    },
                                    "customModelId": {
                                      "type": "string",
                                      "description": "The custom model id of the LLM"
                                    },
                                    "serverUrl": {
                                      "type": "string",
                                      "description": "The server url of the LLM"
                                    },
                                    "apiKey": {
                                      "type": "string",
                                      "description": "The api key of the LLM"
                                    }
                                  },
                                  "required": [
                                    "modelId",
                                    "temperature",
                                    "maxTokens"
                                  ],
                                  "additionalProperties": false
                                },
                                "defaultLLmOptions": {
                                  "type": "object",
                                  "properties": {
                                    "modelId": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    },
                                    "temperature": {
                                      "type": "number",
                                      "description": "The temperature of the LLM"
                                    },
                                    "maxTokens": {
                                      "type": "number",
                                      "description": "The max tokens of the LLM"
                                    },
                                    "customModelId": {
                                      "type": "string",
                                      "description": "The custom model id of the LLM"
                                    },
                                    "serverUrl": {
                                      "type": "string",
                                      "description": "The server url of the LLM"
                                    },
                                    "apiKey": {
                                      "type": "string",
                                      "description": "The api key of the LLM"
                                    }
                                  },
                                  "required": [
                                    "modelId",
                                    "temperature",
                                    "maxTokens"
                                  ],
                                  "additionalProperties": false
                                },
                                "backchannelOnChoosingNodes": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will say uha/i see before choosing a node."
                                },
                                "enableUiEngine": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will be able to show buttons, cards, images on text channels only."
                                },
                                "fallbackModelIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "gpt-5-chat-latest",
                                      "gpt-5-2025-08-07",
                                      "gpt-5-mini-2025-08-07",
                                      "gpt-5-nano-2025-08-07",
                                      "gpt-3.5-turbo-0125",
                                      "gpt-4-1106-preview",
                                      "gpt-4.5-preview-2025-02-27",
                                      "gpt-4o",
                                      "gpt-4o-mini",
                                      "gpt-4.1-2025-04-14",
                                      "gpt-4.1-mini-2025-04-14",
                                      "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                      "llama3-8b-8192",
                                      "llama3-70b-8192",
                                      "llama-3.1-8b-instant",
                                      "llama-3.1-70b-versatile",
                                      "llama-3.2-90b-text-preview",
                                      "llama-3.2-11b-text-preview",
                                      "llama-3.3-70b-versatile",
                                      "meta-llama/llama-4-scout-17b-16e-instruct",
                                      "meta-llama/llama-4-maverick-17b-128e-instruct",
                                      "mixtral-8x7b-32768",
                                      "gemma-7b-it",
                                      "gemma2-9b-it",
                                      "claude-opus-4-20250514",
                                      "claude-sonnet-4-20250514",
                                      "claude-3-5-sonnet-20240620",
                                      "claude-3-5-sonnet-20241022",
                                      "claude-3-opus-20240229",
                                      "claude-3-sonnet-20240229",
                                      "claude-3-haiku-20240307",
                                      "claude-3-5-haiku-20241022",
                                      "claude-3-7-sonnet-20250219",
                                      "gemini-1.5-pro",
                                      "gemini-1.5-flash",
                                      "gemini-1.0-pro",
                                      "gemini-2.0-flash-exp",
                                      "gemini-2.0-flash-thinking-exp-1219",
                                      "gemini-2.5-pro",
                                      "gemini-2.5-pro-exp-03-25",
                                      "gemini-2.5-pro-preview-03-25",
                                      "gemini-2.5-flash-preview-05-20",
                                      "gemini-2.5-flash",
                                      "gpt-4-32k",
                                      "gpt-4",
                                      "gpt-3.5-turbo-16k",
                                      "gpt-3.5-turbo",
                                      "deepseek-chat",
                                      "deepseek-r1-distill-llama-70b",
                                      "grok-2-latest",
                                      "grok-3",
                                      "grok-3-mini",
                                      "grok-3-fast",
                                      "grok-4-0709",
                                      "qwen-max-latest",
                                      "qwen-plus-latest",
                                      "qwen-turbo-latest",
                                      "custom-llm",
                                      "models/gemini-2.5-pro-preview-03-25",
                                      "azure-eu-gpt-4o",
                                      "azure-na-gpt-4o"
                                    ]
                                  }
                                },
                                "silenceDetection": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Whether to enable the silence detection feature which will insert filler phrases during long periods of silence"
                                    },
                                    "timeoutSeconds": {
                                      "type": "number",
                                      "default": 60,
                                      "description": "Number of seconds of silence before triggering a filler phrase"
                                    },
                                    "endCallAfterNPhrases": {
                                      "type": "number",
                                      "default": 1,
                                      "description": "Number of filler phrases utterances to say before ending the call if 0 it will end the call instantly after reching the timeout."
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "startCallPhrases": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "fillerWordsOnToolUsage": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will say filler words on tool usage, like '1 moment', 'be right back', 'you know', etc."
                                },
                                "smartEndpointing": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": { "type": "boolean" },
                                    "waitSeconds": { "type": "number" },
                                    "onPunctuationSeconds": {
                                      "type": "number"
                                    },
                                    "onNoPunctuationSeconds": {
                                      "type": "number"
                                    },
                                    "onNumberSeconds": { "type": "number" }
                                  },
                                  "additionalProperties": false
                                },
                                "stopSpeakPlan": {
                                  "type": "object",
                                  "properties": {
                                    "minWords": {
                                      "type": "number",
                                      "description": "The minimum words to speak from the user for the AI to be interrupted and stop talking ."
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "callTimeoutSeconds": {
                                  "type": "number",
                                  "description": "The timeout for the call in seconds."
                                },
                                "enableEndcallTool": {
                                  "type": "boolean",
                                  "description": "Whether to enable endcall tool."
                                },
                                "voiceSpecific": {
                                  "type": "object",
                                  "properties": {
                                    "minCharacters": {
                                      "type": "number",
                                      "description": "The minimum number of characters to init the speech gen to generate audio for, the more the higher the latency will be, default is 5"
                                    },
                                    "maxLengthWithoutPunctuation": {
                                      "type": "number",
                                      "description": "The maximum length of the string without punctuation to init the speech gen to generate audio for, the more the higher the latency will be, default is 100"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "enabledGlobalTools": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "enum": ["handoffHumanDashboardTool"]
                                  },
                                  "description": "The global tools that will be enabled for the LLM."
                                },
                                "defaultToolOverrides": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "description": {
                                        "type": "string",
                                        "nullable": true
                                      },
                                      "fields": {
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "string",
                                                "number",
                                                "boolean"
                                              ]
                                            },
                                            "description": { "type": "string" }
                                          },
                                          "additionalProperties": false
                                        },
                                        "nullable": true
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "description": "Overrides for default system tools configuration."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Global options for the nodes setup, text/voice."
                            },
                            "id": { "type": "string" },
                            "enableFallback": {
                              "type": "boolean",
                              "description": "Enable fallback for the agent llm model."
                            },
                            "fallbackSettings": {
                              "type": "object",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ],
                                  "description": "The model to use for fallback."
                                },
                                "creditThreshold": {
                                  "type": "number",
                                  "description": "The credit threshold for fallback."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Fallback settings for the agent llm model."
                            },
                            "marketplace": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to show the agent in marketplace or not."
                                },
                                "priceUSD": {
                                  "type": "number",
                                  "description": "The price for the agent, default is 0/free"
                                }
                              },
                              "additionalProperties": false,
                              "description": "Marketplace settings for the agent."
                            },
                            "disableRating": {
                              "type": "boolean",
                              "description": "Whether to disable the chat end rating feature."
                            },
                            "chatEndMessage": {
                              "type": "string",
                              "description": "The message to show when the chat ends."
                            },
                            "aiIntroductionMessage": {
                              "type": "string",
                              "description": "The message to show when the user starts the chat on metachannels."
                            },
                            "enableAIIntroductionMessage": {
                              "type": "boolean",
                              "description": "Whether to enable the AI introduction message or not."
                            },
                            "deployed": {
                              "type": "boolean",
                              "description": "Whether the agent is deployed or not."
                            },
                            "captureIGStories": {
                              "type": "boolean",
                              "description": "Whether to capture instagram stories or not."
                            },
                            "gdprCompliance": {
                              "type": "boolean",
                              "description": "Whether to comply with GDPR or not."
                            },
                            "disableFileUpload": { "type": "boolean" },
                            "buttonVariant": {
                              "type": "string",
                              "enum": [
                                "custom",
                                "solid",
                                "bordered",
                                "light",
                                "flat",
                                "faded",
                                "shadow",
                                "ghost"
                              ],
                              "description": "The variant of the button. Custom is the default original styling."
                            },
                            "inputVariant": {
                              "type": "string",
                              "enum": [
                                "custom",
                                "flat",
                                "bordered",
                                "faded",
                                "underlined"
                              ],
                              "description": "The variant of the input. Custom is the default original styling."
                            },
                            "privacyDisclaimer": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to show privacy disclaimer before user interaction"
                                },
                                "text": {
                                  "type": "string",
                                  "description": "The privacy disclaimer text to display to users"
                                },
                                "privacyPolicyUrl": {
                                  "type": "string",
                                  "description": "URL to the privacy policy page"
                                },
                                "acceptButtonLabel": {
                                  "type": "string",
                                  "description": "Label for the accept/proceed button"
                                },
                                "privacyPolicyButtonLabel": {
                                  "type": "string",
                                  "description": "Label for the privacy policy link button"
                                }
                              },
                              "additionalProperties": false,
                              "description": "Privacy disclaimer configuration for the agent"
                            },
                            "leadCollectionRules": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to use custom lead collection rules. If false or not set, uses default behavior (collect when email, phone_number, or phone is present)"
                                },
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "variables": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "Array of variable names that must ALL be present for this rule to match (AND condition)"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Optional description of what this rule captures"
                                      }
                                    },
                                    "required": ["variables"],
                                    "additionalProperties": false
                                  },
                                  "description": "Array of rule sets. A lead is collected if it matches ANY rule set (OR condition between rules). Each rule requires ALL its variables to be present (AND condition within a rule)."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Custom lead collection rules. Allows defining which variable combinations should trigger lead capture. If not set, defaults to collecting leads when email, phone_number, or phone is present."
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "required": ["success", "message"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "patch": {
        "operationId": "updateAgent",
        "summary": "Update Agent",
        "tags": ["Agents"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "agent": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "**Title**: The title of the agent."
                      },
                      "description": {
                        "type": "string",
                        "description": "**Description**: A brief description of the agent."
                      },
                      "ownerID": {
                        "type": "string",
                        "description": "**Owner ID**: The unique identifier of the agent's owner."
                      },
                      "theme": {
                        "type": "string",
                        "description": "**Theme**: The visual theme of the agent, e.g., 'blue-light' or 'custom-blue-dark'."
                      },
                      "voiceConfig": {
                        "type": "object",
                        "properties": {
                          "transcriber": {
                            "type": "object",
                            "properties": {
                              "speechConfig": {
                                "type": "object",
                                "properties": {
                                  "format": { "type": "string" },
                                  "sampleRate": { "type": "number" }
                                },
                                "additionalProperties": false
                              },
                              "modelId": { "type": "string" },
                              "patienceFactor": { "type": "number" },
                              "language": { "type": "string" },
                              "provider": {
                                "type": "string",
                                "enum": [
                                  "deepgram",
                                  "gladia",
                                  "assemblyai",
                                  "speechmatics",
                                  "google-cloud-speech",
                                  "google-live-transcription"
                                ]
                              },
                              "randomOptions": {},
                              "internal": {
                                "type": "object",
                                "properties": {
                                  "inputAudioStream": {},
                                  "debug": { "type": "boolean" }
                                },
                                "additionalProperties": false
                              },
                              "apiKey": { "type": "string" },
                              "platformSpecific": {
                                "type": "object",
                                "properties": {
                                  "deepgram": {
                                    "type": "object",
                                    "properties": {
                                      "keywords": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "Keywords to focus on in the transcription."
                                      },
                                      "language": { "type": "string" },
                                      "smart_format": { "type": "boolean" },
                                      "model": { "type": "string" },
                                      "interim_results": { "type": "boolean" },
                                      "endpointing": { "type": "number" },
                                      "no_delay": { "type": "boolean" },
                                      "autoLanguageDetection": {
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "assemblyai": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": { "type": "string" }
                                    },
                                    "required": ["modelId"],
                                    "additionalProperties": false
                                  },
                                  "googleCloud": {
                                    "type": "object",
                                    "properties": {
                                      "keywords": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "Keywords or phrases to focus on in the transcription."
                                      },
                                      "model": {
                                        "type": "string",
                                        "description": "The Google Cloud Speech model to use."
                                      },
                                      "languageCode": {
                                        "type": "string",
                                        "description": "The language code for transcription."
                                      },
                                      "enableAutomaticPunctuation": {
                                        "type": "boolean",
                                        "description": "Enable automatic punctuation."
                                      },
                                      "enableWordTimeOffsets": {
                                        "type": "boolean",
                                        "description": "Enable word time offsets."
                                      },
                                      "maxAlternatives": {
                                        "type": "number",
                                        "description": "Maximum number of recognition alternatives."
                                      },
                                      "profanityFilter": {
                                        "type": "boolean",
                                        "description": "Enable profanity filter."
                                      },
                                      "speechContexts": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "phrases": {
                                              "type": "array",
                                              "items": { "type": "string" }
                                            },
                                            "boost": { "type": "number" }
                                          },
                                          "required": ["phrases"],
                                          "additionalProperties": false
                                        },
                                        "description": "Speech contexts for better recognition."
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              },
                              "utteranceThreshold": { "type": "number" },
                              "inputVoiceEnhancer": { "type": "boolean" }
                            },
                            "required": ["provider"],
                            "additionalProperties": false,
                            "description": "**Transcriber**: The configuration options for the transcriber provider used by the agent."
                          },
                          "speechGen": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "highAudioQuality": {
                                    "type": "boolean",
                                    "description": "Generate highest quality audio possible, must have pro plan or higher on elevenlabs to enable your own key to work with this option."
                                  },
                                  "provider": {
                                    "type": "string",
                                    "enum": [
                                      "elevenlabs",
                                      "deepgram",
                                      "cartesia",
                                      "playht",
                                      "azure",
                                      "rime-ai",
                                      "openai",
                                      "playai-groq",
                                      "google-cloud",
                                      "google-live"
                                    ],
                                    "description": "Speech providers supported by the app."
                                  },
                                  "modelId": {
                                    "type": "string",
                                    "description": "The model id of the speech gen."
                                  },
                                  "voiceId": {
                                    "type": "string",
                                    "description": "The voice id for the speech service."
                                  },
                                  "apiKey": { "type": "string" },
                                  "region": { "type": "string" },
                                  "backgroundNoise": {
                                    "type": "string",
                                    "enum": [
                                      "restaurant",
                                      "office",
                                      "park",
                                      "street"
                                    ]
                                  },
                                  "punctuationBreaks": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  },
                                  "platformSpecific": {
                                    "type": "object",
                                    "properties": {
                                      "elevenLabs": {
                                        "type": "object",
                                        "properties": {
                                          "stability": { "type": "number" },
                                          "similarity_boost": {
                                            "type": "number"
                                          },
                                          "use_speaker_boost": {
                                            "type": "boolean"
                                          },
                                          "speed": { "type": "number" },
                                          "style": { "type": "number" }
                                        },
                                        "additionalProperties": false
                                      },
                                      "playht": {
                                        "type": "object",
                                        "properties": {
                                          "voiceId": { "type": "string" }
                                        },
                                        "required": ["voiceId"],
                                        "additionalProperties": false
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "backChannelling": {
                                    "type": "boolean",
                                    "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                  },
                                  "language": { "type": "string" },
                                  "enableLongMessageBackchannelling": {
                                    "type": "boolean",
                                    "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                  },
                                  "backchannelMessages": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  },
                                  "backchannelInterval": { "type": "number" },
                                  "wordsReplacements": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "word": { "type": "string" },
                                        "replacement": { "type": "string" }
                                      },
                                      "required": ["word", "replacement"],
                                      "additionalProperties": false
                                    }
                                  }
                                },
                                "required": ["provider"]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "internal": {
                                    "type": "object",
                                    "properties": {
                                      "inputTextStream": {},
                                      "audioConfig": {
                                        "type": "object",
                                        "properties": {
                                          "format": { "type": "string" },
                                          "sampleRate": { "type": "number" },
                                          "channels": { "type": "number" }
                                        },
                                        "required": [
                                          "format",
                                          "sampleRate",
                                          "channels"
                                        ],
                                        "additionalProperties": false
                                      },
                                      "emitOnComplete": { "type": "boolean" }
                                    },
                                    "additionalProperties": false
                                  }
                                }
                              }
                            ],
                            "description": "**Speech Generation**: The configuration options for the speech generation provider used by the agent."
                          },
                          "config": {
                            "type": "object",
                            "properties": {
                              "recordAudio": { "type": "boolean" },
                              "backgroundNoise": {
                                "type": "string",
                                "enum": [
                                  "restaurant",
                                  "office",
                                  "street",
                                  "none"
                                ]
                              },
                              "enableWebCalling": { "type": "boolean" },
                              "firstInputChunkUNIXMs": { "type": "number" },
                              "firstOutputChunkUNIXMs": { "type": "number" }
                            },
                            "required": ["recordAudio"],
                            "additionalProperties": false,
                            "description": "**Call Configuration**: The call configuration settings for the agent."
                          }
                        },
                        "additionalProperties": false
                      },
                      "light": {
                        "type": "boolean",
                        "description": "Whether to enable light mode for the agent. If set to true, the agent will not retain previous chat interactions for privacy reasons."
                      },
                      "enableVertex": {
                        "type": "boolean",
                        "description": "Whether to enable Vertex AI for the agent."
                      },
                      "autoOpenWidget": {
                        "type": "boolean",
                        "description": "Whether to auto-open the widget when the agent is loaded."
                      },
                      "createdAtUNIX": {
                        "type": "number",
                        "description": "The timestamp when the agent was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                      },
                      "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether the agent is disabled. If set to true, the agent will not be active."
                      },
                      "vectorDb": {
                        "description": "Specifies the vector database configuration for the agent. This database is used for handling vectorized data or embeddings."
                      },
                      "withRefresh": {
                        "type": "boolean",
                        "description": "Determines whether the agent should refresh its settings or data dynamically."
                      },
                      "agentPlatform": {
                        "type": "string",
                        "description": "Specifies the platform on which the agent operates, such as web, mobile, or other environments."
                      },
                      "ID": {
                        "type": "string",
                        "description": "A unique identifier for the agent used internally."
                      },
                      "storageID": {
                        "type": "string",
                        "description": "The identifier for the agent's storage configuration."
                      },
                      "VF_DIALOGUE_API_KEY": {
                        "type": "string",
                        "description": "API key for VF dialogue integration, enabling the agent to communicate with external systems."
                      },
                      "VF_PROJECT_API_KEY": {
                        "type": "string",
                        "description": "API key associated with the VF project to authenticate and enable specific functionalities."
                      },
                      "VF_PROJECT_ID": {
                        "type": "string",
                        "description": "The unique identifier of the VF project linked to the agent."
                      },
                      "VF_KB_API_KEY": {
                        "type": "string",
                        "description": "API key for accessing the VF knowledge base, enabling advanced knowledge retrieval capabilities."
                      },
                      "roundedImageURL": {
                        "type": "string",
                        "description": "URL pointing to the rounded image asset used to visually represent the agent."
                      },
                      "rectangeImageURL": {
                        "type": "string",
                        "description": "URL pointing to the rectangular image asset for the agent's branding or display."
                      },
                      "messageDelayMS": {
                        "type": "number",
                        "description": "Specifies the delay in milliseconds for the agent to send messages, simulating natural conversation timing."
                      },
                      "scrollAnimation": {
                        "type": "boolean",
                        "description": "Indicates whether scroll animations are enabled for smooth transitions in the chat interface."
                      },
                      "proactiveMessage": {
                        "type": "string",
                        "description": "A predefined message the agent sends proactively to engage users."
                      },
                      "acceptFileUpload": {
                        "type": "boolean",
                        "description": "Determines if the agent accepts file uploads from users as part of the interaction."
                      },
                      "recordChatHistory": {
                        "type": "boolean",
                        "description": "Specifies whether the agent logs chat histories for future reference or analysis."
                      },
                      "chatBgURL": {
                        "type": "string",
                        "description": "URL of the background image used in the chat interface."
                      },
                      "disableSmoothScroll": {
                        "type": "boolean",
                        "description": "Disables smooth scrolling if set to true, potentially improving performance on low-end devices."
                      },
                      "isDeployed": {
                        "type": "boolean",
                        "description": "Indicates whether the agent is currently deployed and operational."
                      },
                      "tokensUsage": {
                        "description": "Tracks the token usage statistics for the agent, typically used in LLM integrations."
                      },
                      "maxTokensUsage": {
                        "description": "Defines the maximum allowable token usage for the agent to prevent overconsumption."
                      },
                      "lastModified": {
                        "type": "number",
                        "description": "The timestamp of the last modification made to the agent's configuration."
                      },
                      "fontFamily": {
                        "type": "string",
                        "description": "The font family used in the agent's user interface for consistent branding."
                      },
                      "branding": {
                        "type": "string",
                        "description": "Custom branding information or labels associated with the agent."
                      },
                      "customThemeJSONString": {
                        "type": "string",
                        "description": "A JSON string defining a custom theme for the agent's interface."
                      },
                      "autoStartWidget": {
                        "type": "boolean",
                        "description": "Determines if the widget should auto-start upon page load."
                      },
                      "allTimeTriggers": {
                        "type": "number",
                        "description": "The total number of triggers or interactions the agent has handled."
                      },
                      "syncBrowser": {
                        "type": "boolean",
                        "description": "Enables synchronization of settings or states with the browser session."
                      },
                      "delayBeforeSubmit": {
                        "type": "number",
                        "description": "The delay (in milliseconds) before submitting user input to the agent."
                      },
                      "region": {
                        "type": "string",
                        "enum": ["eu", "na"],
                        "description": "Defines the geographical region settings for the agent, such as localization."
                      },
                      "listenForUrlChanges": {
                        "type": "boolean",
                        "description": "Specifies if the agent should monitor and react to changes in the browser URL."
                      },
                      "chatForget": {
                        "type": "boolean",
                        "description": "If enabled, the agent will not retain previous chat interactions for privacy reasons."
                      },
                      "lang": {
                        "type": "string",
                        "description": "Specifies the default language for the agent's interactions and responses."
                      },
                      "enableAudioSupport": {
                        "type": "boolean",
                        "description": "Enables audio features, allowing the agent to process and respond to audio inputs."
                      },
                      "AITranslateTo": {
                        "type": "string",
                        "description": "Defines the target language for AI translation during interactions."
                      },
                      "enableAITranslate": {
                        "type": "boolean",
                        "description": "Activates AI-based translation for multilingual support."
                      },
                      "disableNoReplyListener": {
                        "type": "boolean",
                        "description": "Disables the listener for instances where no reply is detected from the agent."
                      },
                      "disableHumanHandoff": {
                        "type": "boolean",
                        "description": "Prevents the agent from escalating interactions to a human operator."
                      },
                      "alwaysShowHandoff": {
                        "type": "boolean",
                        "description": "Ensures the handoff option is always visible, regardless of agent status."
                      },
                      "manualControl": {
                        "type": "boolean",
                        "description": "Allows manual control over specific agent functionalities."
                      },
                      "enableVGHandoff": {
                        "type": "boolean",
                        "description": "Activates VG-specific handoff mechanisms for the agent."
                      },
                      "enableGeoAnalytics": {
                        "type": "boolean",
                        "description": "Enables geographic analytics to track user interactions based on location."
                      },
                      "hideVoiceflowAnalytics": {
                        "type": "boolean",
                        "description": "Hides Voiceflow-specific analytics including intents, conversation flow metrics, and rating analytics."
                      },
                      "hideCallAnalytics": {
                        "type": "boolean",
                        "description": "Hides voice call analytics including duration, latency, cost breakdown, call counts, and call end reasons."
                      },
                      "hideConversationMetrics": {
                        "type": "boolean",
                        "description": "Hides conversation metrics including user retention, conversation length, time retention, and engagement metrics."
                      },
                      "hideCustomAnalytics": {
                        "type": "boolean",
                        "description": "Hides user-created custom charts and metrics from the analytics dashboard."
                      },
                      "hideVapiAnalytics": {
                        "type": "boolean",
                        "description": "Hides VAPI-specific analytics including cost tracking and voice-related metrics."
                      },
                      "hideFunnelAnalytics": {
                        "type": "boolean",
                        "description": "Hides the user engagement funnel chart that tracks progression from widget views to high engagement."
                      },
                      "fixedHandoffPopup": {
                        "type": "boolean",
                        "description": "Ensures the handoff popup remains fixed in the interface."
                      },
                      "buttonsLayout": {
                        "type": "string",
                        "enum": ["horizontal", "vertical", "in-footer"],
                        "description": "Defines the layout and style of buttons in the agent's interface."
                      },
                      "ADVANCED_customCSS": {
                        "type": "string",
                        "description": "Specifies advanced custom CSS for overriding the default styling of the agent's interface."
                      },
                      "messagesLimit": {
                        "type": "number",
                        "description": "Sets a cap on the number of messages the agent can exchange in a single session."
                      },
                      "whatsappToken": {
                        "type": "string",
                        "description": "Token for authenticating and integrating with WhatsApp services."
                      },
                      "whatsappNumberId": {
                        "type": "string",
                        "description": "The ID associated with the WhatsApp number used by the agent."
                      },
                      "whatsappBusniessId": {
                        "type": "string",
                        "description": "The business ID for WhatsApp integration, enabling enterprise-level features."
                      },
                      "waTestNumber": {
                        "type": "string",
                        "description": "A test number used during WhatsApp integration setup or testing."
                      },
                      "waVerifyPassed": {
                        "type": "boolean",
                        "description": "Indicates if WhatsApp verification was successfully completed."
                      },
                      "waTestPassed": {
                        "type": "boolean",
                        "description": "Indicates if the WhatsApp integration test was successful."
                      },
                      "webhookUrl": {
                        "type": "string",
                        "description": "The URL where the agent sends webhook events to external systems."
                      },
                      "gcloudPrivateKey": {
                        "type": "string",
                        "description": "Private key for Google Cloud services integration."
                      },
                      "gcloudClientEmail": {
                        "type": "string",
                        "description": "Client email for Google Cloud authentication."
                      },
                      "smartInit": {
                        "type": "boolean",
                        "description": "Activates smart initialization features for the agent."
                      },
                      "UIhandoffTitle": {
                        "type": "string",
                        "description": "Title displayed during UI handoff interactions."
                      },
                      "UIhandoffSubtitle": {
                        "type": "string",
                        "description": "Subtitle displayed during UI handoff interactions."
                      },
                      "igVerified": {
                        "type": "boolean",
                        "description": "Indicates if the agent's Instagram integration is verified."
                      },
                      "igAccessToken": {
                        "type": "string",
                        "description": "Access token for authenticating Instagram API requests."
                      },
                      "showHandoffEvenIfOffline": {
                        "type": "boolean",
                        "description": "Displays the handoff option even if the agent is offline."
                      },
                      "persistHandoffOnRefresh": {
                        "type": "boolean",
                        "description": "Maintains handoff state when users refresh or close their browser tabs."
                      },
                      "blockInputDuringHandoffRequest": {
                        "type": "boolean",
                        "description": "Blocks chat input when a user requests human handoff but no human has been assigned yet. Only applies to VF agents."
                      },
                      "customButtonJSON_STRING": {
                        "type": "string",
                        "description": "JSON string defining custom buttons for the agent's interface."
                      },
                      "vg_initPrompt": {
                        "type": "string",
                        "description": "The initial prompt displayed or used by the VF system."
                      },
                      "vg_prompt": {
                        "type": "string",
                        "description": "The main prompt template used for generating responses."
                      },
                      "vg_initMessages": {
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Initial messages loaded for the agent's conversation flow."
                      },
                      "vg_systemPrompt": {
                        "type": "string",
                        "description": "System-level prompt defining the agent's behavior and rules."
                      },
                      "vg_temperature": {
                        "type": "number",
                        "description": "Defines the temperature setting for response variability in the VF model."
                      },
                      "vg_defaultModel": {
                        "type": "string",
                        "enum": [
                          "gpt-5-chat-latest",
                          "gpt-5-2025-08-07",
                          "gpt-5-mini-2025-08-07",
                          "gpt-5-nano-2025-08-07",
                          "gpt-3.5-turbo-0125",
                          "gpt-4-1106-preview",
                          "gpt-4.5-preview-2025-02-27",
                          "gpt-4o",
                          "gpt-4o-mini",
                          "gpt-4.1-2025-04-14",
                          "gpt-4.1-mini-2025-04-14",
                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                          "llama3-8b-8192",
                          "llama3-70b-8192",
                          "llama-3.1-8b-instant",
                          "llama-3.1-70b-versatile",
                          "llama-3.2-90b-text-preview",
                          "llama-3.2-11b-text-preview",
                          "llama-3.3-70b-versatile",
                          "meta-llama/llama-4-scout-17b-16e-instruct",
                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                          "mixtral-8x7b-32768",
                          "gemma-7b-it",
                          "gemma2-9b-it",
                          "claude-opus-4-20250514",
                          "claude-sonnet-4-20250514",
                          "claude-3-5-sonnet-20240620",
                          "claude-3-5-sonnet-20241022",
                          "claude-3-opus-20240229",
                          "claude-3-sonnet-20240229",
                          "claude-3-haiku-20240307",
                          "claude-3-5-haiku-20241022",
                          "claude-3-7-sonnet-20250219",
                          "gemini-1.5-pro",
                          "gemini-1.5-flash",
                          "gemini-1.0-pro",
                          "gemini-2.0-flash-exp",
                          "gemini-2.0-flash-thinking-exp-1219",
                          "gemini-2.5-pro",
                          "gemini-2.5-pro-exp-03-25",
                          "gemini-2.5-pro-preview-03-25",
                          "gemini-2.5-flash-preview-05-20",
                          "gemini-2.5-flash",
                          "gpt-4-32k",
                          "gpt-4",
                          "gpt-3.5-turbo-16k",
                          "gpt-3.5-turbo",
                          "deepseek-chat",
                          "deepseek-r1-distill-llama-70b",
                          "grok-2-latest",
                          "grok-3",
                          "grok-3-mini",
                          "grok-3-fast",
                          "grok-4-0709",
                          "qwen-max-latest",
                          "qwen-plus-latest",
                          "qwen-turbo-latest",
                          "custom-llm",
                          "models/gemini-2.5-pro-preview-03-25",
                          "azure-eu-gpt-4o",
                          "azure-na-gpt-4o"
                        ],
                        "description": "Specifies the default LLM model used by the agent for language processing."
                      },
                      "vg_maxTokens": {
                        "type": "number",
                        "description": "Sets the maximum token limit for generating responses."
                      },
                      "vg_kbDefaultDimension": {
                        "type": "number",
                        "description": "Default dimensionality for the agent's knowledge base embeddings."
                      },
                      "vg_kbTopChunks": {
                        "type": "number",
                        "description": "The number of top chunks retrieved from the knowledge base during a query."
                      },
                      "SECRET_API_KEY": {
                        "type": "string",
                        "description": "The secret API key for secure integration with VF services."
                      },
                      "vg_kbCharCount": {
                        "type": "number",
                        "description": "Tracks the total character count of the agent's knowledge base."
                      },
                      "vg_kbDocsNum": {
                        "type": "number",
                        "description": "The total number of documents stored in the agent's knowledge base."
                      },
                      "vg_enableUIEngine": {
                        "type": "boolean",
                        "description": "Activates the UI engine for enhanced interface capabilities."
                      },
                      "vg_enableAboutContext": {
                        "type": "boolean",
                        "description": "Enables contextual information about the agent for users."
                      },
                      "vg_kb_llm": {
                        "type": "object",
                        "properties": {
                          "searchMethod": {
                            "anyOf": [
                              { "type": "string", "enum": ["smart"] },
                              { "type": "string", "enum": ["simple"] }
                            ]
                          },
                          "searchPrompt": { "type": "string" },
                          "modelId": {
                            "type": "string",
                            "enum": [
                              "gpt-5-chat-latest",
                              "gpt-5-2025-08-07",
                              "gpt-5-mini-2025-08-07",
                              "gpt-5-nano-2025-08-07",
                              "gpt-3.5-turbo-0125",
                              "gpt-4-1106-preview",
                              "gpt-4.5-preview-2025-02-27",
                              "gpt-4o",
                              "gpt-4o-mini",
                              "gpt-4.1-2025-04-14",
                              "gpt-4.1-mini-2025-04-14",
                              "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                              "llama3-8b-8192",
                              "llama3-70b-8192",
                              "llama-3.1-8b-instant",
                              "llama-3.1-70b-versatile",
                              "llama-3.2-90b-text-preview",
                              "llama-3.2-11b-text-preview",
                              "llama-3.3-70b-versatile",
                              "meta-llama/llama-4-scout-17b-16e-instruct",
                              "meta-llama/llama-4-maverick-17b-128e-instruct",
                              "mixtral-8x7b-32768",
                              "gemma-7b-it",
                              "gemma2-9b-it",
                              "claude-opus-4-20250514",
                              "claude-sonnet-4-20250514",
                              "claude-3-5-sonnet-20240620",
                              "claude-3-5-sonnet-20241022",
                              "claude-3-opus-20240229",
                              "claude-3-sonnet-20240229",
                              "claude-3-haiku-20240307",
                              "claude-3-5-haiku-20241022",
                              "claude-3-7-sonnet-20250219",
                              "gemini-1.5-pro",
                              "gemini-1.5-flash",
                              "gemini-1.0-pro",
                              "gemini-2.0-flash-exp",
                              "gemini-2.0-flash-thinking-exp-1219",
                              "gemini-2.5-pro",
                              "gemini-2.5-pro-exp-03-25",
                              "gemini-2.5-pro-preview-03-25",
                              "gemini-2.5-flash-preview-05-20",
                              "gemini-2.5-flash",
                              "gpt-4-32k",
                              "gpt-4",
                              "gpt-3.5-turbo-16k",
                              "gpt-3.5-turbo",
                              "deepseek-chat",
                              "deepseek-r1-distill-llama-70b",
                              "grok-2-latest",
                              "grok-3",
                              "grok-3-mini",
                              "grok-3-fast",
                              "grok-4-0709",
                              "qwen-max-latest",
                              "qwen-plus-latest",
                              "qwen-turbo-latest",
                              "custom-llm",
                              "models/gemini-2.5-pro-preview-03-25",
                              "azure-eu-gpt-4o",
                              "azure-na-gpt-4o"
                            ]
                          },
                          "temprature": { "type": "number" },
                          "maxTokens": { "type": "number" }
                        },
                        "additionalProperties": false,
                        "description": "Configuration for LLM-based knowledge base queries, including search methods and model parameters."
                      },
                      "vg_enableUIEngineForms": {
                        "type": "boolean",
                        "description": "Enables form and input components in the UI engine for web channel."
                      },
                      "vg_max_messages_history": {
                        "type": "number",
                        "description": "Maximum number of messages retained in the chat history."
                      },
                      "ifKnowsThreshold": {
                        "type": "number",
                        "description": "Confidence threshold for determining if the agent 'knows' an answer."
                      },
                      "avatarImageUrl": {
                        "type": "string",
                        "description": "URL of the avatar image representing the agent."
                      },
                      "headerImageUrl": {
                        "type": "string",
                        "description": "URL of the header image displayed in the chat interface."
                      },
                      "bannerImageUrl": {
                        "type": "string",
                        "description": "URL of the banner image used in the agent's branding."
                      },
                      "soundEffectUrl": {
                        "type": "string",
                        "description": "URL of the sound effect file used for agent interactions."
                      },
                      "soundEffectEnabled": {
                        "type": "boolean",
                        "description": "Enables or disables sound effects for the agent."
                      },
                      "enableQuickFileUpload": {
                        "type": "boolean",
                        "description": "Allows quick file uploads during chat interactions."
                      },
                      "instagramOptions": {
                        "type": "object",
                        "properties": {
                          "pageId": { "type": "string" },
                          "accessToken": { "type": "string" }
                        },
                        "additionalProperties": false
                      },
                      "translateUserResponse": { "type": "boolean" },
                      "starred": { "type": "boolean" },
                      "flowise": {
                        "type": "object",
                        "properties": {
                          "webhookUrl": { "type": "string" },
                          "webhookSecret": { "type": "string" }
                        },
                        "additionalProperties": false
                      },
                      "vfSettings": {
                        "type": "object",
                        "properties": {
                          "enableIgnoreUrlPaths": { "type": "boolean" }
                        },
                        "additionalProperties": false
                      },
                      "vapi": {},
                      "vapiConfig": {
                        "type": "object",
                        "properties": {
                          "syncKbOnSave": { "type": "boolean" },
                          "PUBLIC_API_KEY": { "type": "string" },
                          "PRIVATE_API_KEY": { "type": "string" },
                          "enableVapiOnWeb": { "type": "boolean" },
                          "overrideWithVG": { "type": "boolean" },
                          "promptOnWeb": { "type": "boolean" },
                          "maxCostMonthly": { "type": "number" },
                          "maxMinutesMonthly": { "type": "number" },
                          "useVfProject": { "type": "boolean" },
                          "syncTools": { "type": "boolean" }
                        },
                        "additionalProperties": false
                      },
                      "vgOptions": {
                        "type": "object",
                        "properties": {
                          "isLlmStudio": { "type": "boolean" },
                          "showSources": { "type": "boolean" },
                          "lightUiEngine": { "type": "boolean" },
                          "legacyKb": { "type": "boolean" },
                          "maxChunkSize": { "type": "number" },
                          "handoffTimeout": { "type": "number" }
                        },
                        "additionalProperties": false
                      },
                      "ui": {
                        "type": "object",
                        "properties": {
                          "showWhatsappButtonOnWeb": {
                            "type": "boolean",
                            "description": "Show little whatsapp button on web if it's connected."
                          },
                          "bgImageVisible": { "type": "boolean" },
                          "widgetType": {
                            "anyOf": [
                              { "type": "string", "enum": ["direct-chat"] },
                              { "type": "string", "enum": ["tabs"] }
                            ]
                          },
                          "enableFixedFeedbackBtns": { "type": "boolean" },
                          "switchConversationSides": { "type": "boolean" },
                          "switchDashboardOnly": { "type": "boolean" },
                          "voice": {
                            "type": "object",
                            "properties": {
                              "question": { "type": "string" },
                              "continueBtnLabel": { "type": "string" },
                              "dismissBtnLabel": { "type": "string" },
                              "disableVoiceOrb": { "type": "boolean" }
                            },
                            "required": [
                              "question",
                              "continueBtnLabel",
                              "dismissBtnLabel"
                            ],
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "assignedToolsIds": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "tools": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "isDefault": {
                              "type": "boolean",
                              "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                            },
                            "method": {
                              "type": "string",
                              "enum": ["GET", "POST", "PUT", "PATCH"],
                              "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                            },
                            "id": {
                              "type": "string",
                              "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the tool, providing a human-readable identifier for display purposes."
                            },
                            "description": {
                              "type": "string",
                              "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                            },
                            "serverUrl": {
                              "type": "string",
                              "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                            },
                            "serverUrlSecret": {
                              "type": "string",
                              "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                            },
                            "createdAt": {
                              "type": "string",
                              "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                            },
                            "updatedAt": {
                              "type": "string",
                              "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                            },
                            "disabled": {
                              "type": "boolean",
                              "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                            },
                            "isVapiTool": {
                              "type": "boolean",
                              "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                            },
                            "vapiId": {
                              "type": "string",
                              "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                            },
                            "variablesIds": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                            },
                            "agentId": {
                              "type": "string",
                              "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                            },
                            "userId": {
                              "type": "string",
                              "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                            },
                            "backchannellingPhrases": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                            },
                            "toolsSettings": {},
                            "fields": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                  },
                                  "in": {
                                    "type": "string",
                                    "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "system"
                                    ],
                                    "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                  },
                                  "value": {
                                    "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                  },
                                  "defaultValue": {
                                    "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                  },
                                  "key": {
                                    "type": "string",
                                    "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                  },
                                  "reusable": {
                                    "type": "boolean",
                                    "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                  },
                                  "isEnv": {
                                    "type": "boolean",
                                    "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                  },
                                  "isSystem": {
                                    "type": "boolean",
                                    "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                  },
                                  "agentId": {
                                    "type": "string",
                                    "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                  },
                                  "userId": {
                                    "type": "string",
                                    "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                  }
                                },
                                "required": ["id"],
                                "additionalProperties": false
                              }
                            },
                            "channels": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "web-chat",
                                  "whatsapp",
                                  "instagram",
                                  "telegram",
                                  "discord",
                                  "gb-chat",
                                  "vapi",
                                  "messenger",
                                  "voice",
                                  "telephony"
                                ]
                              },
                              "description": "The channels that the tool can be used on."
                            }
                          },
                          "required": ["id", "name", "description"],
                          "additionalProperties": false
                        }
                      },
                      "internal": {
                        "type": "object",
                        "properties": {
                          "accountCreationConfig": {
                            "type": "string",
                            "enum": ["v2"]
                          },
                          "websocketServer": {
                            "anyOf": [
                              { "type": "string", "enum": ["edge"] },
                              { "type": "string", "enum": ["nodejs"] }
                            ]
                          },
                          "setOnResponse": { "type": "boolean" },
                          "enableSetOnLoad": { "type": "boolean" }
                        },
                        "additionalProperties": false
                      },
                      "disableAutoTranscribeAudio": { "type": "boolean" },
                      "disableTranscriptSharing": { "type": "boolean" },
                      "instaAgentUsername": { "type": "string" },
                      "convoTags": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "vfConfig": {
                        "type": "object",
                        "properties": {
                          "alwaysEnableCardButtons": { "type": "boolean" }
                        },
                        "additionalProperties": false
                      },
                      "discord": {
                        "type": "object",
                        "properties": {
                          "channelIds": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "webhookUrls": {
                            "type": "array",
                            "items": { "type": "string" }
                          }
                        },
                        "additionalProperties": false
                      },
                      "limits": {
                        "type": "object",
                        "properties": {
                          "maxInteractionsPerUserId": { "type": "number" },
                          "maxAnnualCreditsUsage": { "type": "number" },
                          "maxMonthlyCreditsUsage": { "type": "number" },
                          "maxMessages": {
                            "type": "number",
                            "description": "Maximum number of messages allowed per conversation"
                          },
                          "maxMessagesRetentionDays": {
                            "type": "number",
                            "description": "Retention period in days for messages"
                          }
                        },
                        "additionalProperties": false
                      },
                      "tabs": { "type": "array" },
                      "kbTags": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "kbTagsDataMap": { "type": "array" },
                      "nodes": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" },
                            "description": {
                              "type": "string",
                              "description": "A short description of what this node does and when it should be used, specially useful if the node is global or when the LLM detects automatic rerouting."
                            },
                            "instructions": {
                              "type": "string",
                              "description": "What should this LLM node do."
                            },
                            "mcpServers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": { "type": "string" },
                                  "url": { "type": "string" },
                                  "transport": {
                                    "type": "string",
                                    "enum": ["sse", "websocket", "stdio"]
                                  },
                                  "useNodeEventSource": { "type": "boolean" },
                                  "reconnect": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": { "type": "boolean" },
                                      "maxAttempts": { "type": "number" },
                                      "delayMs": { "type": "number" }
                                    },
                                    "additionalProperties": false
                                  },
                                  "command": { "type": "string" },
                                  "args": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "voiceInstructions": {
                              "type": "string",
                              "description": "The voice instructions for this node, will be used instead of instructions in voice channels if provided."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If true, this node will be always present for the LLM"
                            },
                            "toolsIds": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The tools that will be available for this node"
                            },
                            "toolsSettings": {
                              "type": "object",
                              "properties": {
                                "googleCalendar": {
                                  "type": "object",
                                  "properties": {
                                    "calendarId": { "type": "string" },
                                    "methods": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "create-event",
                                          "check-availability",
                                          "get-slots",
                                          "delete-event"
                                        ]
                                      }
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "childrenNodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "nodeId": { "type": "string" },
                                  "condition": {
                                    "type": "string",
                                    "description": "The condition that will be checked to determine if the node should advanced to the selected node id or not or should simply loop in the current node."
                                  }
                                },
                                "required": ["nodeId", "condition"],
                                "additionalProperties": false
                              },
                              "description": "The outputs of this node which the node after finishing will choose from to either advance or to keep looping in this node till it caputures or reaches one of the mentioned routers."
                            },
                            "llmConfig": {
                              "type": "object",
                              "properties": {
                                "modelId": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ]
                                },
                                "temperature": {
                                  "type": "number",
                                  "description": "The temperature of the LLM"
                                },
                                "maxTokens": {
                                  "type": "number",
                                  "description": "The max tokens of the LLM"
                                },
                                "customModelId": {
                                  "type": "string",
                                  "description": "The custom model id of the LLM"
                                },
                                "serverUrl": {
                                  "type": "string",
                                  "description": "The server url of the LLM"
                                },
                                "apiKey": {
                                  "type": "string",
                                  "description": "The api key of the LLM"
                                }
                              },
                              "required": [
                                "modelId",
                                "temperature",
                                "maxTokens"
                              ],
                              "additionalProperties": false
                            },
                            "routerLlmConfig": {
                              "type": "object",
                              "properties": {
                                "modelId": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ]
                                },
                                "temperature": {
                                  "type": "number",
                                  "description": "The temperature of the LLM"
                                },
                                "maxTokens": {
                                  "type": "number",
                                  "description": "The max tokens of the LLM"
                                },
                                "customModelId": {
                                  "type": "string",
                                  "description": "The custom model id of the LLM"
                                },
                                "serverUrl": {
                                  "type": "string",
                                  "description": "The server url of the LLM"
                                },
                                "apiKey": {
                                  "type": "string",
                                  "description": "The api key of the LLM"
                                }
                              },
                              "required": [
                                "modelId",
                                "temperature",
                                "maxTokens"
                              ],
                              "additionalProperties": false,
                              "description": "The LLM config that will be used for the router node, NOTE: This must be a fast LLM model or the latency will be too high between responses."
                            },
                            "toolUseBias": {
                              "type": "number",
                              "description": "The bias of the LLM to use tools if 0 it will never use tools, if 1 it will only use tools."
                            },
                            "autoRerouter": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will try to detect if the user has changed his mind about something enabling the AI to rewind back to the previous node."
                                },
                                "level": {
                                  "type": "number",
                                  "description": "The level of rewinding, if 1 the LLM will have access to only 1 level or rewind capabilities meaning if it went from node A > B > C > D  then if it at node d & it detects it needs to be at node B again it will be able to rewind back to node B if the level is at least 2, it will not be able to detect node A unless the level is 3 or more, and so on."
                                }
                              },
                              "required": ["enabled", "level"],
                              "additionalProperties": false,
                              "description": "The auto rerouter of this node."
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "start",
                                "end",
                                "default",
                                "condition",
                                "note"
                              ],
                              "description": "The type of the node, if not provided it will be a normal LLM node."
                            },
                            "rf": {
                              "description": "The position of the node in the reactflow canvas."
                            },
                            "kb": {
                              "type": "object",
                              "properties": {
                                "enabled": { "type": "boolean" },
                                "maxChunks": {
                                  "type": "number",
                                  "description": "The max chunks to use from the KB."
                                },
                                "tags": {
                                  "type": "array",
                                  "items": { "type": "string" },
                                  "description": "The tags to use to filter the docs we search through"
                                },
                                "smartSearch": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will use the smart search to search through the docs."
                                }
                              },
                              "required": ["enabled", "maxChunks"],
                              "additionalProperties": false
                            },
                            "conditionData": {
                              "type": "object",
                              "properties": {
                                "condition": {
                                  "type": "string",
                                  "description": "The condition to check."
                                }
                              },
                              "required": ["condition"],
                              "additionalProperties": false
                            },
                            "preStart": {
                              "type": "object",
                              "properties": {
                                "url": {
                                  "type": "string",
                                  "description": "The URL to send the GET request to."
                                },
                                "enabled": {
                                  "type": "boolean",
                                  "description": "If true, we will send a GET request to the URL before starting the node."
                                },
                                "testConvoIdValue": {
                                  "type": "string",
                                  "description": "The value to test the URL with."
                                }
                              },
                              "additionalProperties": false,
                              "description": "The pre start tool of the node, we will send a GET request to this URL before starting the node and provide the results to the AI. GET {url}/{user_id}/{node_name}"
                            },
                            "startConfig": {
                              "type": "object",
                              "properties": {
                                "initialMessage": {
                                  "type": "string",
                                  "description": "The initial message to start the conversation with"
                                },
                                "userStarts": {
                                  "type": "boolean",
                                  "description": "Whether the user or AI agent gives the first message"
                                }
                              },
                              "additionalProperties": false,
                              "description": "Configuration for start nodes"
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "description",
                            "instructions",
                            "llmConfig"
                          ],
                          "additionalProperties": false,
                          "description": "A node in the LLM chain."
                        }
                      },
                      "enableNodes": { "type": "boolean" },
                      "advanced": {
                        "type": "object",
                        "properties": {
                          "serverUrl": { "type": "string" },
                          "serverUrlSecret": { "type": "string" }
                        },
                        "additionalProperties": false
                      },
                      "nodesSettings": {
                        "type": "object",
                        "properties": {
                          "enableUIEngineForms": {
                            "type": "boolean",
                            "description": "If true, the LLM will be able to show forms on web channel only."
                          },
                          "geminiLiveOptions": {},
                          "appendBeforePrompt": {
                            "type": "string",
                            "description": "The prompt to append to the nodes' prompt."
                          },
                          "routerLLmOptions": {
                            "type": "object",
                            "properties": {
                              "modelId": {
                                "type": "string",
                                "enum": [
                                  "gpt-5-chat-latest",
                                  "gpt-5-2025-08-07",
                                  "gpt-5-mini-2025-08-07",
                                  "gpt-5-nano-2025-08-07",
                                  "gpt-3.5-turbo-0125",
                                  "gpt-4-1106-preview",
                                  "gpt-4.5-preview-2025-02-27",
                                  "gpt-4o",
                                  "gpt-4o-mini",
                                  "gpt-4.1-2025-04-14",
                                  "gpt-4.1-mini-2025-04-14",
                                  "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                  "llama3-8b-8192",
                                  "llama3-70b-8192",
                                  "llama-3.1-8b-instant",
                                  "llama-3.1-70b-versatile",
                                  "llama-3.2-90b-text-preview",
                                  "llama-3.2-11b-text-preview",
                                  "llama-3.3-70b-versatile",
                                  "meta-llama/llama-4-scout-17b-16e-instruct",
                                  "meta-llama/llama-4-maverick-17b-128e-instruct",
                                  "mixtral-8x7b-32768",
                                  "gemma-7b-it",
                                  "gemma2-9b-it",
                                  "claude-opus-4-20250514",
                                  "claude-sonnet-4-20250514",
                                  "claude-3-5-sonnet-20240620",
                                  "claude-3-5-sonnet-20241022",
                                  "claude-3-opus-20240229",
                                  "claude-3-sonnet-20240229",
                                  "claude-3-haiku-20240307",
                                  "claude-3-5-haiku-20241022",
                                  "claude-3-7-sonnet-20250219",
                                  "gemini-1.5-pro",
                                  "gemini-1.5-flash",
                                  "gemini-1.0-pro",
                                  "gemini-2.0-flash-exp",
                                  "gemini-2.0-flash-thinking-exp-1219",
                                  "gemini-2.5-pro",
                                  "gemini-2.5-pro-exp-03-25",
                                  "gemini-2.5-pro-preview-03-25",
                                  "gemini-2.5-flash-preview-05-20",
                                  "gemini-2.5-flash",
                                  "gpt-4-32k",
                                  "gpt-4",
                                  "gpt-3.5-turbo-16k",
                                  "gpt-3.5-turbo",
                                  "deepseek-chat",
                                  "deepseek-r1-distill-llama-70b",
                                  "grok-2-latest",
                                  "grok-3",
                                  "grok-3-mini",
                                  "grok-3-fast",
                                  "grok-4-0709",
                                  "qwen-max-latest",
                                  "qwen-plus-latest",
                                  "qwen-turbo-latest",
                                  "custom-llm",
                                  "models/gemini-2.5-pro-preview-03-25",
                                  "azure-eu-gpt-4o",
                                  "azure-na-gpt-4o"
                                ]
                              },
                              "temperature": {
                                "type": "number",
                                "description": "The temperature of the LLM"
                              },
                              "maxTokens": {
                                "type": "number",
                                "description": "The max tokens of the LLM"
                              },
                              "customModelId": {
                                "type": "string",
                                "description": "The custom model id of the LLM"
                              },
                              "serverUrl": {
                                "type": "string",
                                "description": "The server url of the LLM"
                              },
                              "apiKey": {
                                "type": "string",
                                "description": "The api key of the LLM"
                              }
                            },
                            "required": ["modelId", "temperature", "maxTokens"],
                            "additionalProperties": false
                          },
                          "defaultLLmOptions": {
                            "type": "object",
                            "properties": {
                              "modelId": {
                                "type": "string",
                                "enum": [
                                  "gpt-5-chat-latest",
                                  "gpt-5-2025-08-07",
                                  "gpt-5-mini-2025-08-07",
                                  "gpt-5-nano-2025-08-07",
                                  "gpt-3.5-turbo-0125",
                                  "gpt-4-1106-preview",
                                  "gpt-4.5-preview-2025-02-27",
                                  "gpt-4o",
                                  "gpt-4o-mini",
                                  "gpt-4.1-2025-04-14",
                                  "gpt-4.1-mini-2025-04-14",
                                  "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                  "llama3-8b-8192",
                                  "llama3-70b-8192",
                                  "llama-3.1-8b-instant",
                                  "llama-3.1-70b-versatile",
                                  "llama-3.2-90b-text-preview",
                                  "llama-3.2-11b-text-preview",
                                  "llama-3.3-70b-versatile",
                                  "meta-llama/llama-4-scout-17b-16e-instruct",
                                  "meta-llama/llama-4-maverick-17b-128e-instruct",
                                  "mixtral-8x7b-32768",
                                  "gemma-7b-it",
                                  "gemma2-9b-it",
                                  "claude-opus-4-20250514",
                                  "claude-sonnet-4-20250514",
                                  "claude-3-5-sonnet-20240620",
                                  "claude-3-5-sonnet-20241022",
                                  "claude-3-opus-20240229",
                                  "claude-3-sonnet-20240229",
                                  "claude-3-haiku-20240307",
                                  "claude-3-5-haiku-20241022",
                                  "claude-3-7-sonnet-20250219",
                                  "gemini-1.5-pro",
                                  "gemini-1.5-flash",
                                  "gemini-1.0-pro",
                                  "gemini-2.0-flash-exp",
                                  "gemini-2.0-flash-thinking-exp-1219",
                                  "gemini-2.5-pro",
                                  "gemini-2.5-pro-exp-03-25",
                                  "gemini-2.5-pro-preview-03-25",
                                  "gemini-2.5-flash-preview-05-20",
                                  "gemini-2.5-flash",
                                  "gpt-4-32k",
                                  "gpt-4",
                                  "gpt-3.5-turbo-16k",
                                  "gpt-3.5-turbo",
                                  "deepseek-chat",
                                  "deepseek-r1-distill-llama-70b",
                                  "grok-2-latest",
                                  "grok-3",
                                  "grok-3-mini",
                                  "grok-3-fast",
                                  "grok-4-0709",
                                  "qwen-max-latest",
                                  "qwen-plus-latest",
                                  "qwen-turbo-latest",
                                  "custom-llm",
                                  "models/gemini-2.5-pro-preview-03-25",
                                  "azure-eu-gpt-4o",
                                  "azure-na-gpt-4o"
                                ]
                              },
                              "temperature": {
                                "type": "number",
                                "description": "The temperature of the LLM"
                              },
                              "maxTokens": {
                                "type": "number",
                                "description": "The max tokens of the LLM"
                              },
                              "customModelId": {
                                "type": "string",
                                "description": "The custom model id of the LLM"
                              },
                              "serverUrl": {
                                "type": "string",
                                "description": "The server url of the LLM"
                              },
                              "apiKey": {
                                "type": "string",
                                "description": "The api key of the LLM"
                              }
                            },
                            "required": ["modelId", "temperature", "maxTokens"],
                            "additionalProperties": false
                          },
                          "backchannelOnChoosingNodes": {
                            "type": "boolean",
                            "description": "If true, the LLM will say uha/i see before choosing a node."
                          },
                          "enableUiEngine": {
                            "type": "boolean",
                            "description": "If true, the LLM will be able to show buttons, cards, images on text channels only."
                          },
                          "fallbackModelIds": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "gpt-5-chat-latest",
                                "gpt-5-2025-08-07",
                                "gpt-5-mini-2025-08-07",
                                "gpt-5-nano-2025-08-07",
                                "gpt-3.5-turbo-0125",
                                "gpt-4-1106-preview",
                                "gpt-4.5-preview-2025-02-27",
                                "gpt-4o",
                                "gpt-4o-mini",
                                "gpt-4.1-2025-04-14",
                                "gpt-4.1-mini-2025-04-14",
                                "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                "llama3-8b-8192",
                                "llama3-70b-8192",
                                "llama-3.1-8b-instant",
                                "llama-3.1-70b-versatile",
                                "llama-3.2-90b-text-preview",
                                "llama-3.2-11b-text-preview",
                                "llama-3.3-70b-versatile",
                                "meta-llama/llama-4-scout-17b-16e-instruct",
                                "meta-llama/llama-4-maverick-17b-128e-instruct",
                                "mixtral-8x7b-32768",
                                "gemma-7b-it",
                                "gemma2-9b-it",
                                "claude-opus-4-20250514",
                                "claude-sonnet-4-20250514",
                                "claude-3-5-sonnet-20240620",
                                "claude-3-5-sonnet-20241022",
                                "claude-3-opus-20240229",
                                "claude-3-sonnet-20240229",
                                "claude-3-haiku-20240307",
                                "claude-3-5-haiku-20241022",
                                "claude-3-7-sonnet-20250219",
                                "gemini-1.5-pro",
                                "gemini-1.5-flash",
                                "gemini-1.0-pro",
                                "gemini-2.0-flash-exp",
                                "gemini-2.0-flash-thinking-exp-1219",
                                "gemini-2.5-pro",
                                "gemini-2.5-pro-exp-03-25",
                                "gemini-2.5-pro-preview-03-25",
                                "gemini-2.5-flash-preview-05-20",
                                "gemini-2.5-flash",
                                "gpt-4-32k",
                                "gpt-4",
                                "gpt-3.5-turbo-16k",
                                "gpt-3.5-turbo",
                                "deepseek-chat",
                                "deepseek-r1-distill-llama-70b",
                                "grok-2-latest",
                                "grok-3",
                                "grok-3-mini",
                                "grok-3-fast",
                                "grok-4-0709",
                                "qwen-max-latest",
                                "qwen-plus-latest",
                                "qwen-turbo-latest",
                                "custom-llm",
                                "models/gemini-2.5-pro-preview-03-25",
                                "azure-eu-gpt-4o",
                                "azure-na-gpt-4o"
                              ]
                            }
                          },
                          "silenceDetection": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "default": false,
                                "description": "Whether to enable the silence detection feature which will insert filler phrases during long periods of silence"
                              },
                              "timeoutSeconds": {
                                "type": "number",
                                "default": 60,
                                "description": "Number of seconds of silence before triggering a filler phrase"
                              },
                              "endCallAfterNPhrases": {
                                "type": "number",
                                "default": 1,
                                "description": "Number of filler phrases utterances to say before ending the call if 0 it will end the call instantly after reching the timeout."
                              }
                            },
                            "additionalProperties": false
                          },
                          "startCallPhrases": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "fillerWordsOnToolUsage": {
                            "type": "boolean",
                            "description": "If true, the LLM will say filler words on tool usage, like '1 moment', 'be right back', 'you know', etc."
                          },
                          "smartEndpointing": {
                            "type": "object",
                            "properties": {
                              "enabled": { "type": "boolean" },
                              "waitSeconds": { "type": "number" },
                              "onPunctuationSeconds": { "type": "number" },
                              "onNoPunctuationSeconds": { "type": "number" },
                              "onNumberSeconds": { "type": "number" }
                            },
                            "additionalProperties": false
                          },
                          "stopSpeakPlan": {
                            "type": "object",
                            "properties": {
                              "minWords": {
                                "type": "number",
                                "description": "The minimum words to speak from the user for the AI to be interrupted and stop talking ."
                              }
                            },
                            "additionalProperties": false
                          },
                          "callTimeoutSeconds": {
                            "type": "number",
                            "description": "The timeout for the call in seconds."
                          },
                          "enableEndcallTool": {
                            "type": "boolean",
                            "description": "Whether to enable endcall tool."
                          },
                          "voiceSpecific": {
                            "type": "object",
                            "properties": {
                              "minCharacters": {
                                "type": "number",
                                "description": "The minimum number of characters to init the speech gen to generate audio for, the more the higher the latency will be, default is 5"
                              },
                              "maxLengthWithoutPunctuation": {
                                "type": "number",
                                "description": "The maximum length of the string without punctuation to init the speech gen to generate audio for, the more the higher the latency will be, default is 100"
                              }
                            },
                            "additionalProperties": false
                          },
                          "enabledGlobalTools": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": ["handoffHumanDashboardTool"]
                            },
                            "description": "The global tools that will be enabled for the LLM."
                          },
                          "defaultToolOverrides": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "fields": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": ["string", "number", "boolean"]
                                      },
                                      "description": { "type": "string" }
                                    },
                                    "additionalProperties": false
                                  },
                                  "nullable": true
                                }
                              },
                              "additionalProperties": false
                            },
                            "description": "Overrides for default system tools configuration."
                          }
                        },
                        "additionalProperties": false,
                        "description": "Global options for the nodes setup, text/voice."
                      },
                      "id": { "type": "string" },
                      "enableFallback": {
                        "type": "boolean",
                        "description": "Enable fallback for the agent llm model."
                      },
                      "fallbackSettings": {
                        "type": "object",
                        "properties": {
                          "model": {
                            "type": "string",
                            "enum": [
                              "gpt-5-chat-latest",
                              "gpt-5-2025-08-07",
                              "gpt-5-mini-2025-08-07",
                              "gpt-5-nano-2025-08-07",
                              "gpt-3.5-turbo-0125",
                              "gpt-4-1106-preview",
                              "gpt-4.5-preview-2025-02-27",
                              "gpt-4o",
                              "gpt-4o-mini",
                              "gpt-4.1-2025-04-14",
                              "gpt-4.1-mini-2025-04-14",
                              "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                              "llama3-8b-8192",
                              "llama3-70b-8192",
                              "llama-3.1-8b-instant",
                              "llama-3.1-70b-versatile",
                              "llama-3.2-90b-text-preview",
                              "llama-3.2-11b-text-preview",
                              "llama-3.3-70b-versatile",
                              "meta-llama/llama-4-scout-17b-16e-instruct",
                              "meta-llama/llama-4-maverick-17b-128e-instruct",
                              "mixtral-8x7b-32768",
                              "gemma-7b-it",
                              "gemma2-9b-it",
                              "claude-opus-4-20250514",
                              "claude-sonnet-4-20250514",
                              "claude-3-5-sonnet-20240620",
                              "claude-3-5-sonnet-20241022",
                              "claude-3-opus-20240229",
                              "claude-3-sonnet-20240229",
                              "claude-3-haiku-20240307",
                              "claude-3-5-haiku-20241022",
                              "claude-3-7-sonnet-20250219",
                              "gemini-1.5-pro",
                              "gemini-1.5-flash",
                              "gemini-1.0-pro",
                              "gemini-2.0-flash-exp",
                              "gemini-2.0-flash-thinking-exp-1219",
                              "gemini-2.5-pro",
                              "gemini-2.5-pro-exp-03-25",
                              "gemini-2.5-pro-preview-03-25",
                              "gemini-2.5-flash-preview-05-20",
                              "gemini-2.5-flash",
                              "gpt-4-32k",
                              "gpt-4",
                              "gpt-3.5-turbo-16k",
                              "gpt-3.5-turbo",
                              "deepseek-chat",
                              "deepseek-r1-distill-llama-70b",
                              "grok-2-latest",
                              "grok-3",
                              "grok-3-mini",
                              "grok-3-fast",
                              "grok-4-0709",
                              "qwen-max-latest",
                              "qwen-plus-latest",
                              "qwen-turbo-latest",
                              "custom-llm",
                              "models/gemini-2.5-pro-preview-03-25",
                              "azure-eu-gpt-4o",
                              "azure-na-gpt-4o"
                            ],
                            "description": "The model to use for fallback."
                          },
                          "creditThreshold": {
                            "type": "number",
                            "description": "The credit threshold for fallback."
                          }
                        },
                        "additionalProperties": false,
                        "description": "Fallback settings for the agent llm model."
                      },
                      "marketplace": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Whether to show the agent in marketplace or not."
                          },
                          "priceUSD": {
                            "type": "number",
                            "description": "The price for the agent, default is 0/free"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Marketplace settings for the agent."
                      },
                      "disableRating": {
                        "type": "boolean",
                        "description": "Whether to disable the chat end rating feature."
                      },
                      "chatEndMessage": {
                        "type": "string",
                        "description": "The message to show when the chat ends."
                      },
                      "aiIntroductionMessage": {
                        "type": "string",
                        "description": "The message to show when the user starts the chat on metachannels."
                      },
                      "enableAIIntroductionMessage": {
                        "type": "boolean",
                        "description": "Whether to enable the AI introduction message or not."
                      },
                      "deployed": {
                        "type": "boolean",
                        "description": "Whether the agent is deployed or not."
                      },
                      "captureIGStories": {
                        "type": "boolean",
                        "description": "Whether to capture instagram stories or not."
                      },
                      "gdprCompliance": {
                        "type": "boolean",
                        "description": "Whether to comply with GDPR or not."
                      },
                      "disableFileUpload": { "type": "boolean" },
                      "buttonVariant": {
                        "type": "string",
                        "enum": [
                          "custom",
                          "solid",
                          "bordered",
                          "light",
                          "flat",
                          "faded",
                          "shadow",
                          "ghost"
                        ],
                        "description": "The variant of the button. Custom is the default original styling."
                      },
                      "inputVariant": {
                        "type": "string",
                        "enum": [
                          "custom",
                          "flat",
                          "bordered",
                          "faded",
                          "underlined"
                        ],
                        "description": "The variant of the input. Custom is the default original styling."
                      },
                      "privacyDisclaimer": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Whether to show privacy disclaimer before user interaction"
                          },
                          "text": {
                            "type": "string",
                            "description": "The privacy disclaimer text to display to users"
                          },
                          "privacyPolicyUrl": {
                            "type": "string",
                            "description": "URL to the privacy policy page"
                          },
                          "acceptButtonLabel": {
                            "type": "string",
                            "description": "Label for the accept/proceed button"
                          },
                          "privacyPolicyButtonLabel": {
                            "type": "string",
                            "description": "Label for the privacy policy link button"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Privacy disclaimer configuration for the agent"
                      },
                      "leadCollectionRules": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Whether to use custom lead collection rules. If false or not set, uses default behavior (collect when email, phone_number, or phone is present)"
                          },
                          "rules": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "variables": {
                                  "type": "array",
                                  "items": { "type": "string" },
                                  "description": "Array of variable names that must ALL be present for this rule to match (AND condition)"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Optional description of what this rule captures"
                                }
                              },
                              "required": ["variables"],
                              "additionalProperties": false
                            },
                            "description": "Array of rule sets. A lead is collected if it matches ANY rule set (OR condition between rules). Each rule requires ALL its variables to be present (AND condition within a rule)."
                          }
                        },
                        "additionalProperties": false,
                        "description": "Custom lead collection rules. Allows defining which variable combinations should trigger lead capture. If not set, defaults to collecting leads when email, phone_number, or phone is present."
                      },
                      "customTheme": {
                        "type": "object",
                        "properties": {
                          "themeType": { "type": "string" },
                          "primary": { "type": "string" },
                          "nineColorPallet": { "type": "array" }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "required": ["agent"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" },
                        "data": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "**Title**: The title of the agent."
                            },
                            "description": {
                              "type": "string",
                              "description": "**Description**: A brief description of the agent."
                            },
                            "ownerID": {
                              "type": "string",
                              "description": "**Owner ID**: The unique identifier of the agent's owner."
                            },
                            "theme": {
                              "type": "string",
                              "description": "**Theme**: The visual theme of the agent, e.g., 'blue-light' or 'custom-blue-dark'."
                            },
                            "voiceConfig": {
                              "type": "object",
                              "properties": {
                                "transcriber": {
                                  "type": "object",
                                  "properties": {
                                    "speechConfig": {
                                      "type": "object",
                                      "properties": {
                                        "format": { "type": "string" },
                                        "sampleRate": { "type": "number" }
                                      },
                                      "additionalProperties": false
                                    },
                                    "modelId": { "type": "string" },
                                    "patienceFactor": { "type": "number" },
                                    "language": { "type": "string" },
                                    "provider": {
                                      "type": "string",
                                      "enum": [
                                        "deepgram",
                                        "gladia",
                                        "assemblyai",
                                        "speechmatics",
                                        "google-cloud-speech",
                                        "google-live-transcription"
                                      ]
                                    },
                                    "randomOptions": {},
                                    "internal": {
                                      "type": "object",
                                      "properties": {
                                        "inputAudioStream": {},
                                        "debug": { "type": "boolean" }
                                      },
                                      "additionalProperties": false
                                    },
                                    "apiKey": { "type": "string" },
                                    "platformSpecific": {
                                      "type": "object",
                                      "properties": {
                                        "deepgram": {
                                          "type": "object",
                                          "properties": {
                                            "keywords": {
                                              "type": "array",
                                              "items": { "type": "string" },
                                              "description": "Keywords to focus on in the transcription."
                                            },
                                            "language": { "type": "string" },
                                            "smart_format": {
                                              "type": "boolean"
                                            },
                                            "model": { "type": "string" },
                                            "interim_results": {
                                              "type": "boolean"
                                            },
                                            "endpointing": { "type": "number" },
                                            "no_delay": { "type": "boolean" },
                                            "autoLanguageDetection": {
                                              "type": "boolean"
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "assemblyai": {
                                          "type": "object",
                                          "properties": {
                                            "modelId": { "type": "string" }
                                          },
                                          "required": ["modelId"],
                                          "additionalProperties": false
                                        },
                                        "googleCloud": {
                                          "type": "object",
                                          "properties": {
                                            "keywords": {
                                              "type": "array",
                                              "items": { "type": "string" },
                                              "description": "Keywords or phrases to focus on in the transcription."
                                            },
                                            "model": {
                                              "type": "string",
                                              "description": "The Google Cloud Speech model to use."
                                            },
                                            "languageCode": {
                                              "type": "string",
                                              "description": "The language code for transcription."
                                            },
                                            "enableAutomaticPunctuation": {
                                              "type": "boolean",
                                              "description": "Enable automatic punctuation."
                                            },
                                            "enableWordTimeOffsets": {
                                              "type": "boolean",
                                              "description": "Enable word time offsets."
                                            },
                                            "maxAlternatives": {
                                              "type": "number",
                                              "description": "Maximum number of recognition alternatives."
                                            },
                                            "profanityFilter": {
                                              "type": "boolean",
                                              "description": "Enable profanity filter."
                                            },
                                            "speechContexts": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "phrases": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "boost": { "type": "number" }
                                                },
                                                "required": ["phrases"],
                                                "additionalProperties": false
                                              },
                                              "description": "Speech contexts for better recognition."
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "utteranceThreshold": { "type": "number" },
                                    "inputVoiceEnhancer": { "type": "boolean" }
                                  },
                                  "required": ["provider"],
                                  "additionalProperties": false,
                                  "description": "**Transcriber**: The configuration options for the transcriber provider used by the agent."
                                },
                                "speechGen": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "highAudioQuality": {
                                          "type": "boolean",
                                          "description": "Generate highest quality audio possible, must have pro plan or higher on elevenlabs to enable your own key to work with this option."
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "elevenlabs",
                                            "deepgram",
                                            "cartesia",
                                            "playht",
                                            "azure",
                                            "rime-ai",
                                            "openai",
                                            "playai-groq",
                                            "google-cloud",
                                            "google-live"
                                          ],
                                          "description": "Speech providers supported by the app."
                                        },
                                        "modelId": {
                                          "type": "string",
                                          "description": "The model id of the speech gen."
                                        },
                                        "voiceId": {
                                          "type": "string",
                                          "description": "The voice id for the speech service."
                                        },
                                        "apiKey": { "type": "string" },
                                        "region": { "type": "string" },
                                        "backgroundNoise": {
                                          "type": "string",
                                          "enum": [
                                            "restaurant",
                                            "office",
                                            "park",
                                            "street"
                                          ]
                                        },
                                        "punctuationBreaks": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        },
                                        "platformSpecific": {
                                          "type": "object",
                                          "properties": {
                                            "elevenLabs": {
                                              "type": "object",
                                              "properties": {
                                                "stability": {
                                                  "type": "number"
                                                },
                                                "similarity_boost": {
                                                  "type": "number"
                                                },
                                                "use_speaker_boost": {
                                                  "type": "boolean"
                                                },
                                                "speed": { "type": "number" },
                                                "style": { "type": "number" }
                                              },
                                              "additionalProperties": false
                                            },
                                            "playht": {
                                              "type": "object",
                                              "properties": {
                                                "voiceId": { "type": "string" }
                                              },
                                              "required": ["voiceId"],
                                              "additionalProperties": false
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "backChannelling": {
                                          "type": "boolean",
                                          "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                        },
                                        "language": { "type": "string" },
                                        "enableLongMessageBackchannelling": {
                                          "type": "boolean",
                                          "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                        },
                                        "backchannelMessages": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        },
                                        "backchannelInterval": {
                                          "type": "number"
                                        },
                                        "wordsReplacements": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "word": { "type": "string" },
                                              "replacement": {
                                                "type": "string"
                                              }
                                            },
                                            "required": ["word", "replacement"],
                                            "additionalProperties": false
                                          }
                                        }
                                      },
                                      "required": ["provider"]
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "internal": {
                                          "type": "object",
                                          "properties": {
                                            "inputTextStream": {},
                                            "audioConfig": {
                                              "type": "object",
                                              "properties": {
                                                "format": { "type": "string" },
                                                "sampleRate": {
                                                  "type": "number"
                                                },
                                                "channels": { "type": "number" }
                                              },
                                              "required": [
                                                "format",
                                                "sampleRate",
                                                "channels"
                                              ],
                                              "additionalProperties": false
                                            },
                                            "emitOnComplete": {
                                              "type": "boolean"
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      }
                                    }
                                  ],
                                  "description": "**Speech Generation**: The configuration options for the speech generation provider used by the agent."
                                },
                                "config": {
                                  "type": "object",
                                  "properties": {
                                    "recordAudio": { "type": "boolean" },
                                    "backgroundNoise": {
                                      "type": "string",
                                      "enum": [
                                        "restaurant",
                                        "office",
                                        "street",
                                        "none"
                                      ]
                                    },
                                    "enableWebCalling": { "type": "boolean" },
                                    "firstInputChunkUNIXMs": {
                                      "type": "number"
                                    },
                                    "firstOutputChunkUNIXMs": {
                                      "type": "number"
                                    }
                                  },
                                  "required": ["recordAudio"],
                                  "additionalProperties": false,
                                  "description": "**Call Configuration**: The call configuration settings for the agent."
                                }
                              },
                              "additionalProperties": false
                            },
                            "light": {
                              "type": "boolean",
                              "description": "Whether to enable light mode for the agent. If set to true, the agent will not retain previous chat interactions for privacy reasons."
                            },
                            "enableVertex": {
                              "type": "boolean",
                              "description": "Whether to enable Vertex AI for the agent."
                            },
                            "autoOpenWidget": {
                              "type": "boolean",
                              "description": "Whether to auto-open the widget when the agent is loaded."
                            },
                            "createdAtUNIX": {
                              "type": "number",
                              "description": "The timestamp when the agent was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                            },
                            "disabled": {
                              "type": "boolean",
                              "description": "Indicates whether the agent is disabled. If set to true, the agent will not be active."
                            },
                            "vectorDb": {
                              "description": "Specifies the vector database configuration for the agent. This database is used for handling vectorized data or embeddings."
                            },
                            "withRefresh": {
                              "type": "boolean",
                              "description": "Determines whether the agent should refresh its settings or data dynamically."
                            },
                            "agentPlatform": {
                              "type": "string",
                              "description": "Specifies the platform on which the agent operates, such as web, mobile, or other environments."
                            },
                            "ID": {
                              "type": "string",
                              "description": "A unique identifier for the agent used internally."
                            },
                            "storageID": {
                              "type": "string",
                              "description": "The identifier for the agent's storage configuration."
                            },
                            "VF_DIALOGUE_API_KEY": {
                              "type": "string",
                              "description": "API key for VF dialogue integration, enabling the agent to communicate with external systems."
                            },
                            "VF_PROJECT_API_KEY": {
                              "type": "string",
                              "description": "API key associated with the VF project to authenticate and enable specific functionalities."
                            },
                            "VF_PROJECT_ID": {
                              "type": "string",
                              "description": "The unique identifier of the VF project linked to the agent."
                            },
                            "VF_KB_API_KEY": {
                              "type": "string",
                              "description": "API key for accessing the VF knowledge base, enabling advanced knowledge retrieval capabilities."
                            },
                            "roundedImageURL": {
                              "type": "string",
                              "description": "URL pointing to the rounded image asset used to visually represent the agent."
                            },
                            "rectangeImageURL": {
                              "type": "string",
                              "description": "URL pointing to the rectangular image asset for the agent's branding or display."
                            },
                            "messageDelayMS": {
                              "type": "number",
                              "description": "Specifies the delay in milliseconds for the agent to send messages, simulating natural conversation timing."
                            },
                            "scrollAnimation": {
                              "type": "boolean",
                              "description": "Indicates whether scroll animations are enabled for smooth transitions in the chat interface."
                            },
                            "proactiveMessage": {
                              "type": "string",
                              "description": "A predefined message the agent sends proactively to engage users."
                            },
                            "acceptFileUpload": {
                              "type": "boolean",
                              "description": "Determines if the agent accepts file uploads from users as part of the interaction."
                            },
                            "recordChatHistory": {
                              "type": "boolean",
                              "description": "Specifies whether the agent logs chat histories for future reference or analysis."
                            },
                            "chatBgURL": {
                              "type": "string",
                              "description": "URL of the background image used in the chat interface."
                            },
                            "disableSmoothScroll": {
                              "type": "boolean",
                              "description": "Disables smooth scrolling if set to true, potentially improving performance on low-end devices."
                            },
                            "isDeployed": {
                              "type": "boolean",
                              "description": "Indicates whether the agent is currently deployed and operational."
                            },
                            "tokensUsage": {
                              "description": "Tracks the token usage statistics for the agent, typically used in LLM integrations."
                            },
                            "maxTokensUsage": {
                              "description": "Defines the maximum allowable token usage for the agent to prevent overconsumption."
                            },
                            "lastModified": {
                              "type": "number",
                              "description": "The timestamp of the last modification made to the agent's configuration."
                            },
                            "fontFamily": {
                              "type": "string",
                              "description": "The font family used in the agent's user interface for consistent branding."
                            },
                            "branding": {
                              "type": "string",
                              "description": "Custom branding information or labels associated with the agent."
                            },
                            "customThemeJSONString": {
                              "type": "string",
                              "description": "A JSON string defining a custom theme for the agent's interface."
                            },
                            "autoStartWidget": {
                              "type": "boolean",
                              "description": "Determines if the widget should auto-start upon page load."
                            },
                            "allTimeTriggers": {
                              "type": "number",
                              "description": "The total number of triggers or interactions the agent has handled."
                            },
                            "syncBrowser": {
                              "type": "boolean",
                              "description": "Enables synchronization of settings or states with the browser session."
                            },
                            "delayBeforeSubmit": {
                              "type": "number",
                              "description": "The delay (in milliseconds) before submitting user input to the agent."
                            },
                            "region": {
                              "type": "string",
                              "enum": ["eu", "na"],
                              "description": "Defines the geographical region settings for the agent, such as localization."
                            },
                            "listenForUrlChanges": {
                              "type": "boolean",
                              "description": "Specifies if the agent should monitor and react to changes in the browser URL."
                            },
                            "chatForget": {
                              "type": "boolean",
                              "description": "If enabled, the agent will not retain previous chat interactions for privacy reasons."
                            },
                            "lang": {
                              "type": "string",
                              "description": "Specifies the default language for the agent's interactions and responses."
                            },
                            "enableAudioSupport": {
                              "type": "boolean",
                              "description": "Enables audio features, allowing the agent to process and respond to audio inputs."
                            },
                            "AITranslateTo": {
                              "type": "string",
                              "description": "Defines the target language for AI translation during interactions."
                            },
                            "enableAITranslate": {
                              "type": "boolean",
                              "description": "Activates AI-based translation for multilingual support."
                            },
                            "disableNoReplyListener": {
                              "type": "boolean",
                              "description": "Disables the listener for instances where no reply is detected from the agent."
                            },
                            "disableHumanHandoff": {
                              "type": "boolean",
                              "description": "Prevents the agent from escalating interactions to a human operator."
                            },
                            "alwaysShowHandoff": {
                              "type": "boolean",
                              "description": "Ensures the handoff option is always visible, regardless of agent status."
                            },
                            "manualControl": {
                              "type": "boolean",
                              "description": "Allows manual control over specific agent functionalities."
                            },
                            "enableVGHandoff": {
                              "type": "boolean",
                              "description": "Activates VG-specific handoff mechanisms for the agent."
                            },
                            "enableGeoAnalytics": {
                              "type": "boolean",
                              "description": "Enables geographic analytics to track user interactions based on location."
                            },
                            "hideVoiceflowAnalytics": {
                              "type": "boolean",
                              "description": "Hides Voiceflow-specific analytics including intents, conversation flow metrics, and rating analytics."
                            },
                            "hideCallAnalytics": {
                              "type": "boolean",
                              "description": "Hides voice call analytics including duration, latency, cost breakdown, call counts, and call end reasons."
                            },
                            "hideConversationMetrics": {
                              "type": "boolean",
                              "description": "Hides conversation metrics including user retention, conversation length, time retention, and engagement metrics."
                            },
                            "hideCustomAnalytics": {
                              "type": "boolean",
                              "description": "Hides user-created custom charts and metrics from the analytics dashboard."
                            },
                            "hideVapiAnalytics": {
                              "type": "boolean",
                              "description": "Hides VAPI-specific analytics including cost tracking and voice-related metrics."
                            },
                            "hideFunnelAnalytics": {
                              "type": "boolean",
                              "description": "Hides the user engagement funnel chart that tracks progression from widget views to high engagement."
                            },
                            "fixedHandoffPopup": {
                              "type": "boolean",
                              "description": "Ensures the handoff popup remains fixed in the interface."
                            },
                            "buttonsLayout": {
                              "type": "string",
                              "enum": ["horizontal", "vertical", "in-footer"],
                              "description": "Defines the layout and style of buttons in the agent's interface."
                            },
                            "ADVANCED_customCSS": {
                              "type": "string",
                              "description": "Specifies advanced custom CSS for overriding the default styling of the agent's interface."
                            },
                            "messagesLimit": {
                              "type": "number",
                              "description": "Sets a cap on the number of messages the agent can exchange in a single session."
                            },
                            "whatsappToken": {
                              "type": "string",
                              "description": "Token for authenticating and integrating with WhatsApp services."
                            },
                            "whatsappNumberId": {
                              "type": "string",
                              "description": "The ID associated with the WhatsApp number used by the agent."
                            },
                            "whatsappBusniessId": {
                              "type": "string",
                              "description": "The business ID for WhatsApp integration, enabling enterprise-level features."
                            },
                            "waTestNumber": {
                              "type": "string",
                              "description": "A test number used during WhatsApp integration setup or testing."
                            },
                            "waVerifyPassed": {
                              "type": "boolean",
                              "description": "Indicates if WhatsApp verification was successfully completed."
                            },
                            "waTestPassed": {
                              "type": "boolean",
                              "description": "Indicates if the WhatsApp integration test was successful."
                            },
                            "webhookUrl": {
                              "type": "string",
                              "description": "The URL where the agent sends webhook events to external systems."
                            },
                            "gcloudPrivateKey": {
                              "type": "string",
                              "description": "Private key for Google Cloud services integration."
                            },
                            "gcloudClientEmail": {
                              "type": "string",
                              "description": "Client email for Google Cloud authentication."
                            },
                            "smartInit": {
                              "type": "boolean",
                              "description": "Activates smart initialization features for the agent."
                            },
                            "UIhandoffTitle": {
                              "type": "string",
                              "description": "Title displayed during UI handoff interactions."
                            },
                            "UIhandoffSubtitle": {
                              "type": "string",
                              "description": "Subtitle displayed during UI handoff interactions."
                            },
                            "igVerified": {
                              "type": "boolean",
                              "description": "Indicates if the agent's Instagram integration is verified."
                            },
                            "igAccessToken": {
                              "type": "string",
                              "description": "Access token for authenticating Instagram API requests."
                            },
                            "showHandoffEvenIfOffline": {
                              "type": "boolean",
                              "description": "Displays the handoff option even if the agent is offline."
                            },
                            "persistHandoffOnRefresh": {
                              "type": "boolean",
                              "description": "Maintains handoff state when users refresh or close their browser tabs."
                            },
                            "blockInputDuringHandoffRequest": {
                              "type": "boolean",
                              "description": "Blocks chat input when a user requests human handoff but no human has been assigned yet. Only applies to VF agents."
                            },
                            "customButtonJSON_STRING": {
                              "type": "string",
                              "description": "JSON string defining custom buttons for the agent's interface."
                            },
                            "vg_initPrompt": {
                              "type": "string",
                              "description": "The initial prompt displayed or used by the VF system."
                            },
                            "vg_prompt": {
                              "type": "string",
                              "description": "The main prompt template used for generating responses."
                            },
                            "vg_initMessages": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "Initial messages loaded for the agent's conversation flow."
                            },
                            "vg_systemPrompt": {
                              "type": "string",
                              "description": "System-level prompt defining the agent's behavior and rules."
                            },
                            "vg_temperature": {
                              "type": "number",
                              "description": "Defines the temperature setting for response variability in the VF model."
                            },
                            "vg_defaultModel": {
                              "type": "string",
                              "enum": [
                                "gpt-5-chat-latest",
                                "gpt-5-2025-08-07",
                                "gpt-5-mini-2025-08-07",
                                "gpt-5-nano-2025-08-07",
                                "gpt-3.5-turbo-0125",
                                "gpt-4-1106-preview",
                                "gpt-4.5-preview-2025-02-27",
                                "gpt-4o",
                                "gpt-4o-mini",
                                "gpt-4.1-2025-04-14",
                                "gpt-4.1-mini-2025-04-14",
                                "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                "llama3-8b-8192",
                                "llama3-70b-8192",
                                "llama-3.1-8b-instant",
                                "llama-3.1-70b-versatile",
                                "llama-3.2-90b-text-preview",
                                "llama-3.2-11b-text-preview",
                                "llama-3.3-70b-versatile",
                                "meta-llama/llama-4-scout-17b-16e-instruct",
                                "meta-llama/llama-4-maverick-17b-128e-instruct",
                                "mixtral-8x7b-32768",
                                "gemma-7b-it",
                                "gemma2-9b-it",
                                "claude-opus-4-20250514",
                                "claude-sonnet-4-20250514",
                                "claude-3-5-sonnet-20240620",
                                "claude-3-5-sonnet-20241022",
                                "claude-3-opus-20240229",
                                "claude-3-sonnet-20240229",
                                "claude-3-haiku-20240307",
                                "claude-3-5-haiku-20241022",
                                "claude-3-7-sonnet-20250219",
                                "gemini-1.5-pro",
                                "gemini-1.5-flash",
                                "gemini-1.0-pro",
                                "gemini-2.0-flash-exp",
                                "gemini-2.0-flash-thinking-exp-1219",
                                "gemini-2.5-pro",
                                "gemini-2.5-pro-exp-03-25",
                                "gemini-2.5-pro-preview-03-25",
                                "gemini-2.5-flash-preview-05-20",
                                "gemini-2.5-flash",
                                "gpt-4-32k",
                                "gpt-4",
                                "gpt-3.5-turbo-16k",
                                "gpt-3.5-turbo",
                                "deepseek-chat",
                                "deepseek-r1-distill-llama-70b",
                                "grok-2-latest",
                                "grok-3",
                                "grok-3-mini",
                                "grok-3-fast",
                                "grok-4-0709",
                                "qwen-max-latest",
                                "qwen-plus-latest",
                                "qwen-turbo-latest",
                                "custom-llm",
                                "models/gemini-2.5-pro-preview-03-25",
                                "azure-eu-gpt-4o",
                                "azure-na-gpt-4o"
                              ],
                              "description": "Specifies the default LLM model used by the agent for language processing."
                            },
                            "vg_maxTokens": {
                              "type": "number",
                              "description": "Sets the maximum token limit for generating responses."
                            },
                            "vg_kbDefaultDimension": {
                              "type": "number",
                              "description": "Default dimensionality for the agent's knowledge base embeddings."
                            },
                            "vg_kbTopChunks": {
                              "type": "number",
                              "description": "The number of top chunks retrieved from the knowledge base during a query."
                            },
                            "SECRET_API_KEY": {
                              "type": "string",
                              "description": "The secret API key for secure integration with VF services."
                            },
                            "vg_kbCharCount": {
                              "type": "number",
                              "description": "Tracks the total character count of the agent's knowledge base."
                            },
                            "vg_kbDocsNum": {
                              "type": "number",
                              "description": "The total number of documents stored in the agent's knowledge base."
                            },
                            "vg_enableUIEngine": {
                              "type": "boolean",
                              "description": "Activates the UI engine for enhanced interface capabilities."
                            },
                            "vg_enableAboutContext": {
                              "type": "boolean",
                              "description": "Enables contextual information about the agent for users."
                            },
                            "vg_kb_llm": {
                              "type": "object",
                              "properties": {
                                "searchMethod": {
                                  "anyOf": [
                                    { "type": "string", "enum": ["smart"] },
                                    { "type": "string", "enum": ["simple"] }
                                  ]
                                },
                                "searchPrompt": { "type": "string" },
                                "modelId": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ]
                                },
                                "temprature": { "type": "number" },
                                "maxTokens": { "type": "number" }
                              },
                              "additionalProperties": false,
                              "description": "Configuration for LLM-based knowledge base queries, including search methods and model parameters."
                            },
                            "vg_enableUIEngineForms": {
                              "type": "boolean",
                              "description": "Enables form and input components in the UI engine for web channel."
                            },
                            "vg_max_messages_history": {
                              "type": "number",
                              "description": "Maximum number of messages retained in the chat history."
                            },
                            "ifKnowsThreshold": {
                              "type": "number",
                              "description": "Confidence threshold for determining if the agent 'knows' an answer."
                            },
                            "avatarImageUrl": {
                              "type": "string",
                              "description": "URL of the avatar image representing the agent."
                            },
                            "headerImageUrl": {
                              "type": "string",
                              "description": "URL of the header image displayed in the chat interface."
                            },
                            "bannerImageUrl": {
                              "type": "string",
                              "description": "URL of the banner image used in the agent's branding."
                            },
                            "soundEffectUrl": {
                              "type": "string",
                              "description": "URL of the sound effect file used for agent interactions."
                            },
                            "soundEffectEnabled": {
                              "type": "boolean",
                              "description": "Enables or disables sound effects for the agent."
                            },
                            "enableQuickFileUpload": {
                              "type": "boolean",
                              "description": "Allows quick file uploads during chat interactions."
                            },
                            "instagramOptions": {
                              "type": "object",
                              "properties": {
                                "pageId": { "type": "string" },
                                "accessToken": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "translateUserResponse": { "type": "boolean" },
                            "starred": { "type": "boolean" },
                            "flowise": {
                              "type": "object",
                              "properties": {
                                "webhookUrl": { "type": "string" },
                                "webhookSecret": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "vfSettings": {
                              "type": "object",
                              "properties": {
                                "enableIgnoreUrlPaths": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "vapi": {},
                            "vapiConfig": {
                              "type": "object",
                              "properties": {
                                "syncKbOnSave": { "type": "boolean" },
                                "PUBLIC_API_KEY": { "type": "string" },
                                "PRIVATE_API_KEY": { "type": "string" },
                                "enableVapiOnWeb": { "type": "boolean" },
                                "overrideWithVG": { "type": "boolean" },
                                "promptOnWeb": { "type": "boolean" },
                                "maxCostMonthly": { "type": "number" },
                                "maxMinutesMonthly": { "type": "number" },
                                "useVfProject": { "type": "boolean" },
                                "syncTools": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "vgOptions": {
                              "type": "object",
                              "properties": {
                                "isLlmStudio": { "type": "boolean" },
                                "showSources": { "type": "boolean" },
                                "lightUiEngine": { "type": "boolean" },
                                "legacyKb": { "type": "boolean" },
                                "maxChunkSize": { "type": "number" },
                                "handoffTimeout": { "type": "number" }
                              },
                              "additionalProperties": false
                            },
                            "ui": {
                              "type": "object",
                              "properties": {
                                "showWhatsappButtonOnWeb": {
                                  "type": "boolean",
                                  "description": "Show little whatsapp button on web if it's connected."
                                },
                                "bgImageVisible": { "type": "boolean" },
                                "widgetType": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "enum": ["direct-chat"]
                                    },
                                    { "type": "string", "enum": ["tabs"] }
                                  ]
                                },
                                "enableFixedFeedbackBtns": {
                                  "type": "boolean"
                                },
                                "switchConversationSides": {
                                  "type": "boolean"
                                },
                                "switchDashboardOnly": { "type": "boolean" },
                                "voice": {
                                  "type": "object",
                                  "properties": {
                                    "question": { "type": "string" },
                                    "continueBtnLabel": { "type": "string" },
                                    "dismissBtnLabel": { "type": "string" },
                                    "disableVoiceOrb": { "type": "boolean" }
                                  },
                                  "required": [
                                    "question",
                                    "continueBtnLabel",
                                    "dismissBtnLabel"
                                  ],
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "assignedToolsIds": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "tools": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "isDefault": {
                                    "type": "boolean",
                                    "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                                  },
                                  "method": {
                                    "type": "string",
                                    "enum": ["GET", "POST", "PUT", "PATCH"],
                                    "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                                  },
                                  "id": {
                                    "type": "string",
                                    "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the tool, providing a human-readable identifier for display purposes."
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                                  },
                                  "serverUrl": {
                                    "type": "string",
                                    "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                                  },
                                  "serverUrlSecret": {
                                    "type": "string",
                                    "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                                  },
                                  "createdAt": {
                                    "type": "string",
                                    "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                                  },
                                  "updatedAt": {
                                    "type": "string",
                                    "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                                  },
                                  "disabled": {
                                    "type": "boolean",
                                    "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                                  },
                                  "isVapiTool": {
                                    "type": "boolean",
                                    "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                                  },
                                  "vapiId": {
                                    "type": "string",
                                    "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                                  },
                                  "variablesIds": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                                  },
                                  "agentId": {
                                    "type": "string",
                                    "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                                  },
                                  "userId": {
                                    "type": "string",
                                    "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                                  },
                                  "backchannellingPhrases": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                                  },
                                  "toolsSettings": {},
                                  "fields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                        },
                                        "in": {
                                          "type": "string",
                                          "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                        },
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "string",
                                            "number",
                                            "boolean",
                                            "system"
                                          ],
                                          "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                        },
                                        "value": {
                                          "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                        },
                                        "defaultValue": {
                                          "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                        },
                                        "key": {
                                          "type": "string",
                                          "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                        },
                                        "required": {
                                          "type": "boolean",
                                          "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                        },
                                        "reusable": {
                                          "type": "boolean",
                                          "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                        },
                                        "isEnv": {
                                          "type": "boolean",
                                          "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                        },
                                        "isSystem": {
                                          "type": "boolean",
                                          "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                        },
                                        "isGlobal": {
                                          "type": "boolean",
                                          "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                        },
                                        "agentId": {
                                          "type": "string",
                                          "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                        },
                                        "userId": {
                                          "type": "string",
                                          "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                        }
                                      },
                                      "required": ["id"],
                                      "additionalProperties": false
                                    }
                                  },
                                  "channels": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "web-chat",
                                        "whatsapp",
                                        "instagram",
                                        "telegram",
                                        "discord",
                                        "gb-chat",
                                        "vapi",
                                        "messenger",
                                        "voice",
                                        "telephony"
                                      ]
                                    },
                                    "description": "The channels that the tool can be used on."
                                  }
                                },
                                "required": ["id", "name", "description"],
                                "additionalProperties": false
                              }
                            },
                            "internal": {
                              "type": "object",
                              "properties": {
                                "accountCreationConfig": {
                                  "type": "string",
                                  "enum": ["v2"]
                                },
                                "websocketServer": {
                                  "anyOf": [
                                    { "type": "string", "enum": ["edge"] },
                                    { "type": "string", "enum": ["nodejs"] }
                                  ]
                                },
                                "setOnResponse": { "type": "boolean" },
                                "enableSetOnLoad": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "disableAutoTranscribeAudio": { "type": "boolean" },
                            "disableTranscriptSharing": { "type": "boolean" },
                            "instaAgentUsername": { "type": "string" },
                            "convoTags": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "vfConfig": {
                              "type": "object",
                              "properties": {
                                "alwaysEnableCardButtons": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "discord": {
                              "type": "object",
                              "properties": {
                                "channelIds": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "webhookUrls": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                }
                              },
                              "additionalProperties": false
                            },
                            "limits": {
                              "type": "object",
                              "properties": {
                                "maxInteractionsPerUserId": {
                                  "type": "number"
                                },
                                "maxAnnualCreditsUsage": { "type": "number" },
                                "maxMonthlyCreditsUsage": { "type": "number" },
                                "maxMessages": {
                                  "type": "number",
                                  "description": "Maximum number of messages allowed per conversation"
                                },
                                "maxMessagesRetentionDays": {
                                  "type": "number",
                                  "description": "Retention period in days for messages"
                                }
                              },
                              "additionalProperties": false
                            },
                            "tabs": { "type": "array" },
                            "kbTags": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "kbTagsDataMap": { "type": "array" },
                            "nodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "name": { "type": "string" },
                                  "description": {
                                    "type": "string",
                                    "description": "A short description of what this node does and when it should be used, specially useful if the node is global or when the LLM detects automatic rerouting."
                                  },
                                  "instructions": {
                                    "type": "string",
                                    "description": "What should this LLM node do."
                                  },
                                  "mcpServers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": { "type": "string" },
                                        "url": { "type": "string" },
                                        "transport": {
                                          "type": "string",
                                          "enum": ["sse", "websocket", "stdio"]
                                        },
                                        "useNodeEventSource": {
                                          "type": "boolean"
                                        },
                                        "reconnect": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": { "type": "boolean" },
                                            "maxAttempts": { "type": "number" },
                                            "delayMs": { "type": "number" }
                                          },
                                          "additionalProperties": false
                                        },
                                        "command": { "type": "string" },
                                        "args": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "voiceInstructions": {
                                    "type": "string",
                                    "description": "The voice instructions for this node, will be used instead of instructions in voice channels if provided."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If true, this node will be always present for the LLM"
                                  },
                                  "toolsIds": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "The tools that will be available for this node"
                                  },
                                  "toolsSettings": {
                                    "type": "object",
                                    "properties": {
                                      "googleCalendar": {
                                        "type": "object",
                                        "properties": {
                                          "calendarId": { "type": "string" },
                                          "methods": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "enum": [
                                                "create-event",
                                                "check-availability",
                                                "get-slots",
                                                "delete-event"
                                              ]
                                            }
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "childrenNodes": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "nodeId": { "type": "string" },
                                        "condition": {
                                          "type": "string",
                                          "description": "The condition that will be checked to determine if the node should advanced to the selected node id or not or should simply loop in the current node."
                                        }
                                      },
                                      "required": ["nodeId", "condition"],
                                      "additionalProperties": false
                                    },
                                    "description": "The outputs of this node which the node after finishing will choose from to either advance or to keep looping in this node till it caputures or reaches one of the mentioned routers."
                                  },
                                  "llmConfig": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": {
                                        "type": "string",
                                        "enum": [
                                          "gpt-5-chat-latest",
                                          "gpt-5-2025-08-07",
                                          "gpt-5-mini-2025-08-07",
                                          "gpt-5-nano-2025-08-07",
                                          "gpt-3.5-turbo-0125",
                                          "gpt-4-1106-preview",
                                          "gpt-4.5-preview-2025-02-27",
                                          "gpt-4o",
                                          "gpt-4o-mini",
                                          "gpt-4.1-2025-04-14",
                                          "gpt-4.1-mini-2025-04-14",
                                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                          "llama3-8b-8192",
                                          "llama3-70b-8192",
                                          "llama-3.1-8b-instant",
                                          "llama-3.1-70b-versatile",
                                          "llama-3.2-90b-text-preview",
                                          "llama-3.2-11b-text-preview",
                                          "llama-3.3-70b-versatile",
                                          "meta-llama/llama-4-scout-17b-16e-instruct",
                                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                                          "mixtral-8x7b-32768",
                                          "gemma-7b-it",
                                          "gemma2-9b-it",
                                          "claude-opus-4-20250514",
                                          "claude-sonnet-4-20250514",
                                          "claude-3-5-sonnet-20240620",
                                          "claude-3-5-sonnet-20241022",
                                          "claude-3-opus-20240229",
                                          "claude-3-sonnet-20240229",
                                          "claude-3-haiku-20240307",
                                          "claude-3-5-haiku-20241022",
                                          "claude-3-7-sonnet-20250219",
                                          "gemini-1.5-pro",
                                          "gemini-1.5-flash",
                                          "gemini-1.0-pro",
                                          "gemini-2.0-flash-exp",
                                          "gemini-2.0-flash-thinking-exp-1219",
                                          "gemini-2.5-pro",
                                          "gemini-2.5-pro-exp-03-25",
                                          "gemini-2.5-pro-preview-03-25",
                                          "gemini-2.5-flash-preview-05-20",
                                          "gemini-2.5-flash",
                                          "gpt-4-32k",
                                          "gpt-4",
                                          "gpt-3.5-turbo-16k",
                                          "gpt-3.5-turbo",
                                          "deepseek-chat",
                                          "deepseek-r1-distill-llama-70b",
                                          "grok-2-latest",
                                          "grok-3",
                                          "grok-3-mini",
                                          "grok-3-fast",
                                          "grok-4-0709",
                                          "qwen-max-latest",
                                          "qwen-plus-latest",
                                          "qwen-turbo-latest",
                                          "custom-llm",
                                          "models/gemini-2.5-pro-preview-03-25",
                                          "azure-eu-gpt-4o",
                                          "azure-na-gpt-4o"
                                        ]
                                      },
                                      "temperature": {
                                        "type": "number",
                                        "description": "The temperature of the LLM"
                                      },
                                      "maxTokens": {
                                        "type": "number",
                                        "description": "The max tokens of the LLM"
                                      },
                                      "customModelId": {
                                        "type": "string",
                                        "description": "The custom model id of the LLM"
                                      },
                                      "serverUrl": {
                                        "type": "string",
                                        "description": "The server url of the LLM"
                                      },
                                      "apiKey": {
                                        "type": "string",
                                        "description": "The api key of the LLM"
                                      }
                                    },
                                    "required": [
                                      "modelId",
                                      "temperature",
                                      "maxTokens"
                                    ],
                                    "additionalProperties": false
                                  },
                                  "routerLlmConfig": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": {
                                        "type": "string",
                                        "enum": [
                                          "gpt-5-chat-latest",
                                          "gpt-5-2025-08-07",
                                          "gpt-5-mini-2025-08-07",
                                          "gpt-5-nano-2025-08-07",
                                          "gpt-3.5-turbo-0125",
                                          "gpt-4-1106-preview",
                                          "gpt-4.5-preview-2025-02-27",
                                          "gpt-4o",
                                          "gpt-4o-mini",
                                          "gpt-4.1-2025-04-14",
                                          "gpt-4.1-mini-2025-04-14",
                                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                          "llama3-8b-8192",
                                          "llama3-70b-8192",
                                          "llama-3.1-8b-instant",
                                          "llama-3.1-70b-versatile",
                                          "llama-3.2-90b-text-preview",
                                          "llama-3.2-11b-text-preview",
                                          "llama-3.3-70b-versatile",
                                          "meta-llama/llama-4-scout-17b-16e-instruct",
                                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                                          "mixtral-8x7b-32768",
                                          "gemma-7b-it",
                                          "gemma2-9b-it",
                                          "claude-opus-4-20250514",
                                          "claude-sonnet-4-20250514",
                                          "claude-3-5-sonnet-20240620",
                                          "claude-3-5-sonnet-20241022",
                                          "claude-3-opus-20240229",
                                          "claude-3-sonnet-20240229",
                                          "claude-3-haiku-20240307",
                                          "claude-3-5-haiku-20241022",
                                          "claude-3-7-sonnet-20250219",
                                          "gemini-1.5-pro",
                                          "gemini-1.5-flash",
                                          "gemini-1.0-pro",
                                          "gemini-2.0-flash-exp",
                                          "gemini-2.0-flash-thinking-exp-1219",
                                          "gemini-2.5-pro",
                                          "gemini-2.5-pro-exp-03-25",
                                          "gemini-2.5-pro-preview-03-25",
                                          "gemini-2.5-flash-preview-05-20",
                                          "gemini-2.5-flash",
                                          "gpt-4-32k",
                                          "gpt-4",
                                          "gpt-3.5-turbo-16k",
                                          "gpt-3.5-turbo",
                                          "deepseek-chat",
                                          "deepseek-r1-distill-llama-70b",
                                          "grok-2-latest",
                                          "grok-3",
                                          "grok-3-mini",
                                          "grok-3-fast",
                                          "grok-4-0709",
                                          "qwen-max-latest",
                                          "qwen-plus-latest",
                                          "qwen-turbo-latest",
                                          "custom-llm",
                                          "models/gemini-2.5-pro-preview-03-25",
                                          "azure-eu-gpt-4o",
                                          "azure-na-gpt-4o"
                                        ]
                                      },
                                      "temperature": {
                                        "type": "number",
                                        "description": "The temperature of the LLM"
                                      },
                                      "maxTokens": {
                                        "type": "number",
                                        "description": "The max tokens of the LLM"
                                      },
                                      "customModelId": {
                                        "type": "string",
                                        "description": "The custom model id of the LLM"
                                      },
                                      "serverUrl": {
                                        "type": "string",
                                        "description": "The server url of the LLM"
                                      },
                                      "apiKey": {
                                        "type": "string",
                                        "description": "The api key of the LLM"
                                      }
                                    },
                                    "required": [
                                      "modelId",
                                      "temperature",
                                      "maxTokens"
                                    ],
                                    "additionalProperties": false,
                                    "description": "The LLM config that will be used for the router node, NOTE: This must be a fast LLM model or the latency will be too high between responses."
                                  },
                                  "toolUseBias": {
                                    "type": "number",
                                    "description": "The bias of the LLM to use tools if 0 it will never use tools, if 1 it will only use tools."
                                  },
                                  "autoRerouter": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "boolean",
                                        "description": "If true, the LLM will try to detect if the user has changed his mind about something enabling the AI to rewind back to the previous node."
                                      },
                                      "level": {
                                        "type": "number",
                                        "description": "The level of rewinding, if 1 the LLM will have access to only 1 level or rewind capabilities meaning if it went from node A > B > C > D  then if it at node d & it detects it needs to be at node B again it will be able to rewind back to node B if the level is at least 2, it will not be able to detect node A unless the level is 3 or more, and so on."
                                      }
                                    },
                                    "required": ["enabled", "level"],
                                    "additionalProperties": false,
                                    "description": "The auto rerouter of this node."
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "start",
                                      "end",
                                      "default",
                                      "condition",
                                      "note"
                                    ],
                                    "description": "The type of the node, if not provided it will be a normal LLM node."
                                  },
                                  "rf": {
                                    "description": "The position of the node in the reactflow canvas."
                                  },
                                  "kb": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": { "type": "boolean" },
                                      "maxChunks": {
                                        "type": "number",
                                        "description": "The max chunks to use from the KB."
                                      },
                                      "tags": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "The tags to use to filter the docs we search through"
                                      },
                                      "smartSearch": {
                                        "type": "boolean",
                                        "description": "If true, the LLM will use the smart search to search through the docs."
                                      }
                                    },
                                    "required": ["enabled", "maxChunks"],
                                    "additionalProperties": false
                                  },
                                  "conditionData": {
                                    "type": "object",
                                    "properties": {
                                      "condition": {
                                        "type": "string",
                                        "description": "The condition to check."
                                      }
                                    },
                                    "required": ["condition"],
                                    "additionalProperties": false
                                  },
                                  "preStart": {
                                    "type": "object",
                                    "properties": {
                                      "url": {
                                        "type": "string",
                                        "description": "The URL to send the GET request to."
                                      },
                                      "enabled": {
                                        "type": "boolean",
                                        "description": "If true, we will send a GET request to the URL before starting the node."
                                      },
                                      "testConvoIdValue": {
                                        "type": "string",
                                        "description": "The value to test the URL with."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "description": "The pre start tool of the node, we will send a GET request to this URL before starting the node and provide the results to the AI. GET {url}/{user_id}/{node_name}"
                                  },
                                  "startConfig": {
                                    "type": "object",
                                    "properties": {
                                      "initialMessage": {
                                        "type": "string",
                                        "description": "The initial message to start the conversation with"
                                      },
                                      "userStarts": {
                                        "type": "boolean",
                                        "description": "Whether the user or AI agent gives the first message"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "description": "Configuration for start nodes"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "description",
                                  "instructions",
                                  "llmConfig"
                                ],
                                "additionalProperties": false,
                                "description": "A node in the LLM chain."
                              }
                            },
                            "enableNodes": { "type": "boolean" },
                            "advanced": {
                              "type": "object",
                              "properties": {
                                "serverUrl": { "type": "string" },
                                "serverUrlSecret": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "nodesSettings": {
                              "type": "object",
                              "properties": {
                                "enableUIEngineForms": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will be able to show forms on web channel only."
                                },
                                "geminiLiveOptions": {},
                                "appendBeforePrompt": {
                                  "type": "string",
                                  "description": "The prompt to append to the nodes' prompt."
                                },
                                "routerLLmOptions": {
                                  "type": "object",
                                  "properties": {
                                    "modelId": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    },
                                    "temperature": {
                                      "type": "number",
                                      "description": "The temperature of the LLM"
                                    },
                                    "maxTokens": {
                                      "type": "number",
                                      "description": "The max tokens of the LLM"
                                    },
                                    "customModelId": {
                                      "type": "string",
                                      "description": "The custom model id of the LLM"
                                    },
                                    "serverUrl": {
                                      "type": "string",
                                      "description": "The server url of the LLM"
                                    },
                                    "apiKey": {
                                      "type": "string",
                                      "description": "The api key of the LLM"
                                    }
                                  },
                                  "required": [
                                    "modelId",
                                    "temperature",
                                    "maxTokens"
                                  ],
                                  "additionalProperties": false
                                },
                                "defaultLLmOptions": {
                                  "type": "object",
                                  "properties": {
                                    "modelId": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    },
                                    "temperature": {
                                      "type": "number",
                                      "description": "The temperature of the LLM"
                                    },
                                    "maxTokens": {
                                      "type": "number",
                                      "description": "The max tokens of the LLM"
                                    },
                                    "customModelId": {
                                      "type": "string",
                                      "description": "The custom model id of the LLM"
                                    },
                                    "serverUrl": {
                                      "type": "string",
                                      "description": "The server url of the LLM"
                                    },
                                    "apiKey": {
                                      "type": "string",
                                      "description": "The api key of the LLM"
                                    }
                                  },
                                  "required": [
                                    "modelId",
                                    "temperature",
                                    "maxTokens"
                                  ],
                                  "additionalProperties": false
                                },
                                "backchannelOnChoosingNodes": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will say uha/i see before choosing a node."
                                },
                                "enableUiEngine": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will be able to show buttons, cards, images on text channels only."
                                },
                                "fallbackModelIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "gpt-5-chat-latest",
                                      "gpt-5-2025-08-07",
                                      "gpt-5-mini-2025-08-07",
                                      "gpt-5-nano-2025-08-07",
                                      "gpt-3.5-turbo-0125",
                                      "gpt-4-1106-preview",
                                      "gpt-4.5-preview-2025-02-27",
                                      "gpt-4o",
                                      "gpt-4o-mini",
                                      "gpt-4.1-2025-04-14",
                                      "gpt-4.1-mini-2025-04-14",
                                      "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                      "llama3-8b-8192",
                                      "llama3-70b-8192",
                                      "llama-3.1-8b-instant",
                                      "llama-3.1-70b-versatile",
                                      "llama-3.2-90b-text-preview",
                                      "llama-3.2-11b-text-preview",
                                      "llama-3.3-70b-versatile",
                                      "meta-llama/llama-4-scout-17b-16e-instruct",
                                      "meta-llama/llama-4-maverick-17b-128e-instruct",
                                      "mixtral-8x7b-32768",
                                      "gemma-7b-it",
                                      "gemma2-9b-it",
                                      "claude-opus-4-20250514",
                                      "claude-sonnet-4-20250514",
                                      "claude-3-5-sonnet-20240620",
                                      "claude-3-5-sonnet-20241022",
                                      "claude-3-opus-20240229",
                                      "claude-3-sonnet-20240229",
                                      "claude-3-haiku-20240307",
                                      "claude-3-5-haiku-20241022",
                                      "claude-3-7-sonnet-20250219",
                                      "gemini-1.5-pro",
                                      "gemini-1.5-flash",
                                      "gemini-1.0-pro",
                                      "gemini-2.0-flash-exp",
                                      "gemini-2.0-flash-thinking-exp-1219",
                                      "gemini-2.5-pro",
                                      "gemini-2.5-pro-exp-03-25",
                                      "gemini-2.5-pro-preview-03-25",
                                      "gemini-2.5-flash-preview-05-20",
                                      "gemini-2.5-flash",
                                      "gpt-4-32k",
                                      "gpt-4",
                                      "gpt-3.5-turbo-16k",
                                      "gpt-3.5-turbo",
                                      "deepseek-chat",
                                      "deepseek-r1-distill-llama-70b",
                                      "grok-2-latest",
                                      "grok-3",
                                      "grok-3-mini",
                                      "grok-3-fast",
                                      "grok-4-0709",
                                      "qwen-max-latest",
                                      "qwen-plus-latest",
                                      "qwen-turbo-latest",
                                      "custom-llm",
                                      "models/gemini-2.5-pro-preview-03-25",
                                      "azure-eu-gpt-4o",
                                      "azure-na-gpt-4o"
                                    ]
                                  }
                                },
                                "silenceDetection": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Whether to enable the silence detection feature which will insert filler phrases during long periods of silence"
                                    },
                                    "timeoutSeconds": {
                                      "type": "number",
                                      "default": 60,
                                      "description": "Number of seconds of silence before triggering a filler phrase"
                                    },
                                    "endCallAfterNPhrases": {
                                      "type": "number",
                                      "default": 1,
                                      "description": "Number of filler phrases utterances to say before ending the call if 0 it will end the call instantly after reching the timeout."
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "startCallPhrases": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "fillerWordsOnToolUsage": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will say filler words on tool usage, like '1 moment', 'be right back', 'you know', etc."
                                },
                                "smartEndpointing": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": { "type": "boolean" },
                                    "waitSeconds": { "type": "number" },
                                    "onPunctuationSeconds": {
                                      "type": "number"
                                    },
                                    "onNoPunctuationSeconds": {
                                      "type": "number"
                                    },
                                    "onNumberSeconds": { "type": "number" }
                                  },
                                  "additionalProperties": false
                                },
                                "stopSpeakPlan": {
                                  "type": "object",
                                  "properties": {
                                    "minWords": {
                                      "type": "number",
                                      "description": "The minimum words to speak from the user for the AI to be interrupted and stop talking ."
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "callTimeoutSeconds": {
                                  "type": "number",
                                  "description": "The timeout for the call in seconds."
                                },
                                "enableEndcallTool": {
                                  "type": "boolean",
                                  "description": "Whether to enable endcall tool."
                                },
                                "voiceSpecific": {
                                  "type": "object",
                                  "properties": {
                                    "minCharacters": {
                                      "type": "number",
                                      "description": "The minimum number of characters to init the speech gen to generate audio for, the more the higher the latency will be, default is 5"
                                    },
                                    "maxLengthWithoutPunctuation": {
                                      "type": "number",
                                      "description": "The maximum length of the string without punctuation to init the speech gen to generate audio for, the more the higher the latency will be, default is 100"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "enabledGlobalTools": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "enum": ["handoffHumanDashboardTool"]
                                  },
                                  "description": "The global tools that will be enabled for the LLM."
                                },
                                "defaultToolOverrides": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "description": {
                                        "type": "string",
                                        "nullable": true
                                      },
                                      "fields": {
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "string",
                                                "number",
                                                "boolean"
                                              ]
                                            },
                                            "description": { "type": "string" }
                                          },
                                          "additionalProperties": false
                                        },
                                        "nullable": true
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "description": "Overrides for default system tools configuration."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Global options for the nodes setup, text/voice."
                            },
                            "id": { "type": "string" },
                            "enableFallback": {
                              "type": "boolean",
                              "description": "Enable fallback for the agent llm model."
                            },
                            "fallbackSettings": {
                              "type": "object",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ],
                                  "description": "The model to use for fallback."
                                },
                                "creditThreshold": {
                                  "type": "number",
                                  "description": "The credit threshold for fallback."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Fallback settings for the agent llm model."
                            },
                            "marketplace": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to show the agent in marketplace or not."
                                },
                                "priceUSD": {
                                  "type": "number",
                                  "description": "The price for the agent, default is 0/free"
                                }
                              },
                              "additionalProperties": false,
                              "description": "Marketplace settings for the agent."
                            },
                            "disableRating": {
                              "type": "boolean",
                              "description": "Whether to disable the chat end rating feature."
                            },
                            "chatEndMessage": {
                              "type": "string",
                              "description": "The message to show when the chat ends."
                            },
                            "aiIntroductionMessage": {
                              "type": "string",
                              "description": "The message to show when the user starts the chat on metachannels."
                            },
                            "enableAIIntroductionMessage": {
                              "type": "boolean",
                              "description": "Whether to enable the AI introduction message or not."
                            },
                            "deployed": {
                              "type": "boolean",
                              "description": "Whether the agent is deployed or not."
                            },
                            "captureIGStories": {
                              "type": "boolean",
                              "description": "Whether to capture instagram stories or not."
                            },
                            "gdprCompliance": {
                              "type": "boolean",
                              "description": "Whether to comply with GDPR or not."
                            },
                            "disableFileUpload": { "type": "boolean" },
                            "buttonVariant": {
                              "type": "string",
                              "enum": [
                                "custom",
                                "solid",
                                "bordered",
                                "light",
                                "flat",
                                "faded",
                                "shadow",
                                "ghost"
                              ],
                              "description": "The variant of the button. Custom is the default original styling."
                            },
                            "inputVariant": {
                              "type": "string",
                              "enum": [
                                "custom",
                                "flat",
                                "bordered",
                                "faded",
                                "underlined"
                              ],
                              "description": "The variant of the input. Custom is the default original styling."
                            },
                            "privacyDisclaimer": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to show privacy disclaimer before user interaction"
                                },
                                "text": {
                                  "type": "string",
                                  "description": "The privacy disclaimer text to display to users"
                                },
                                "privacyPolicyUrl": {
                                  "type": "string",
                                  "description": "URL to the privacy policy page"
                                },
                                "acceptButtonLabel": {
                                  "type": "string",
                                  "description": "Label for the accept/proceed button"
                                },
                                "privacyPolicyButtonLabel": {
                                  "type": "string",
                                  "description": "Label for the privacy policy link button"
                                }
                              },
                              "additionalProperties": false,
                              "description": "Privacy disclaimer configuration for the agent"
                            },
                            "leadCollectionRules": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to use custom lead collection rules. If false or not set, uses default behavior (collect when email, phone_number, or phone is present)"
                                },
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "variables": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "Array of variable names that must ALL be present for this rule to match (AND condition)"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Optional description of what this rule captures"
                                      }
                                    },
                                    "required": ["variables"],
                                    "additionalProperties": false
                                  },
                                  "description": "Array of rule sets. A lead is collected if it matches ANY rule set (OR condition between rules). Each rule requires ALL its variables to be present (AND condition within a rule)."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Custom lead collection rules. Allows defining which variable combinations should trigger lead capture. If not set, defaults to collecting leads when email, phone_number, or phone is present."
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "required": ["success", "message", "data"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "delete": {
        "operationId": "deleteAgent",
        "summary": "Delete Agent",
        "tags": ["Agents"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean" },
                        "message": { "type": "string" }
                      },
                      "required": ["success", "message"],
                      "additionalProperties": false
                    },
                    {}
                  ]
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/export-template": {
      "get": {
        "operationId": "exportAgentToJson",
        "summary": "Export Agent Template",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "agentTemplate": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "description": { "type": "string" },
                        "nodes": { "type": "array" },
                        "tools": { "type": "array" },
                        "variables": { "type": "array" },
                        "agentData": {},
                        "workspaceId": { "type": "string" }
                      },
                      "required": ["workspaceId"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["agentTemplate"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/import-template": {
      "post": {
        "operationId": "convertAgentTemplateToAgent",
        "summary": "Import Agent Template",
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "agentTemplate": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string" },
                      "description": { "type": "string" },
                      "nodes": { "type": "array" },
                      "tools": { "type": "array" },
                      "variables": { "type": "array" },
                      "agentData": {},
                      "workspaceId": { "type": "string" }
                    },
                    "required": ["workspaceId"],
                    "additionalProperties": {}
                  },
                  "agentName": { "type": "string" },
                  "fromAgentId": { "type": "string" }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "application/json": { "schema": {} } }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/search": {
      "get": {
        "operationId": "searchAgents",
        "summary": "Search agents with pagination and sorting",
        "description": "Searches agents from Supabase with support for search, pagination, and sorting",
        "tags": ["Agents"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "workspaceId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "newest",
                "oldest",
                "firstCreated",
                "lastCreated",
                "alphabetical"
              ],
              "default": "newest"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "number", "minimum": 1, "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "starredOnly",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "agents": { "type": "array" },
                    "starredAgents": { "type": "array" },
                    "total": { "type": "number" },
                    "totalStarred": { "type": "number" },
                    "page": { "type": "number" },
                    "limit": { "type": "number" },
                    "hasMore": { "type": "boolean" }
                  },
                  "required": [
                    "agents",
                    "starredAgents",
                    "total",
                    "totalStarred",
                    "page",
                    "limit",
                    "hasMore"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/calls": {
      "post": {
        "operationId": "calls",
        "description": "This endpoint is used to alert twilio to call the user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "pattern": "^\\+",
                    "description": "This is the number that agent needs to call, must start with a \"+\" and must not include any spaces or special characters, they will automatically be removed."
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^\\+",
                    "description": "This is the number that agent needs to call, must start with a \"+\""
                  },
                  "agentId": {
                    "type": "string",
                    "description": "This is the agent id to use for the call."
                  },
                  "campaignId": {
                    "type": "string",
                    "description": "This is the campaign id to use for the call that is part of campaign"
                  },
                  "options": {
                    "type": "object",
                    "properties": {
                      "serverData": {
                        "type": "object",
                        "properties": {
                          "agentTools": { "type": "array" },
                          "agentVariables": { "type": "array" },
                          "agentOrg": {},
                          "agentClients": { "type": "array" },
                          "orgTeams": { "type": "array" },
                          "agentData": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "**Title**: The title of the agent."
                              },
                              "description": {
                                "type": "string",
                                "description": "**Description**: A brief description of the agent."
                              },
                              "ownerID": {
                                "type": "string",
                                "description": "**Owner ID**: The unique identifier of the agent's owner."
                              },
                              "theme": {
                                "type": "string",
                                "description": "**Theme**: The visual theme of the agent, e.g., 'blue-light' or 'custom-blue-dark'."
                              },
                              "voiceConfig": {
                                "type": "object",
                                "properties": {
                                  "transcriber": {
                                    "type": "object",
                                    "properties": {
                                      "speechConfig": {
                                        "type": "object",
                                        "properties": {
                                          "format": { "type": "string" },
                                          "sampleRate": { "type": "number" }
                                        },
                                        "additionalProperties": false
                                      },
                                      "modelId": { "type": "string" },
                                      "patienceFactor": { "type": "number" },
                                      "language": { "type": "string" },
                                      "provider": {
                                        "type": "string",
                                        "enum": [
                                          "deepgram",
                                          "gladia",
                                          "assemblyai",
                                          "speechmatics",
                                          "google-cloud-speech",
                                          "google-live-transcription"
                                        ]
                                      },
                                      "randomOptions": {},
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "inputAudioStream": {},
                                          "debug": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                      },
                                      "apiKey": { "type": "string" },
                                      "platformSpecific": {
                                        "type": "object",
                                        "properties": {
                                          "deepgram": {
                                            "type": "object",
                                            "properties": {
                                              "keywords": {
                                                "type": "array",
                                                "items": { "type": "string" },
                                                "description": "Keywords to focus on in the transcription."
                                              },
                                              "language": { "type": "string" },
                                              "smart_format": {
                                                "type": "boolean"
                                              },
                                              "model": { "type": "string" },
                                              "interim_results": {
                                                "type": "boolean"
                                              },
                                              "endpointing": {
                                                "type": "number"
                                              },
                                              "no_delay": { "type": "boolean" },
                                              "autoLanguageDetection": {
                                                "type": "boolean"
                                              }
                                            },
                                            "additionalProperties": false
                                          },
                                          "assemblyai": {
                                            "type": "object",
                                            "properties": {
                                              "modelId": { "type": "string" }
                                            },
                                            "required": ["modelId"],
                                            "additionalProperties": false
                                          },
                                          "googleCloud": {
                                            "type": "object",
                                            "properties": {
                                              "keywords": {
                                                "type": "array",
                                                "items": { "type": "string" },
                                                "description": "Keywords or phrases to focus on in the transcription."
                                              },
                                              "model": {
                                                "type": "string",
                                                "description": "The Google Cloud Speech model to use."
                                              },
                                              "languageCode": {
                                                "type": "string",
                                                "description": "The language code for transcription."
                                              },
                                              "enableAutomaticPunctuation": {
                                                "type": "boolean",
                                                "description": "Enable automatic punctuation."
                                              },
                                              "enableWordTimeOffsets": {
                                                "type": "boolean",
                                                "description": "Enable word time offsets."
                                              },
                                              "maxAlternatives": {
                                                "type": "number",
                                                "description": "Maximum number of recognition alternatives."
                                              },
                                              "profanityFilter": {
                                                "type": "boolean",
                                                "description": "Enable profanity filter."
                                              },
                                              "speechContexts": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "phrases": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "boost": {
                                                      "type": "number"
                                                    }
                                                  },
                                                  "required": ["phrases"],
                                                  "additionalProperties": false
                                                },
                                                "description": "Speech contexts for better recognition."
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "utteranceThreshold": {
                                        "type": "number"
                                      },
                                      "inputVoiceEnhancer": {
                                        "type": "boolean"
                                      }
                                    },
                                    "required": ["provider"],
                                    "additionalProperties": false,
                                    "description": "**Transcriber**: The configuration options for the transcriber provider used by the agent."
                                  },
                                  "speechGen": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "highAudioQuality": {
                                            "type": "boolean",
                                            "description": "Generate highest quality audio possible, must have pro plan or higher on elevenlabs to enable your own key to work with this option."
                                          },
                                          "provider": {
                                            "type": "string",
                                            "enum": [
                                              "elevenlabs",
                                              "deepgram",
                                              "cartesia",
                                              "playht",
                                              "azure",
                                              "rime-ai",
                                              "openai",
                                              "playai-groq",
                                              "google-cloud",
                                              "google-live"
                                            ],
                                            "description": "Speech providers supported by the app."
                                          },
                                          "modelId": {
                                            "type": "string",
                                            "description": "The model id of the speech gen."
                                          },
                                          "voiceId": {
                                            "type": "string",
                                            "description": "The voice id for the speech service."
                                          },
                                          "apiKey": { "type": "string" },
                                          "region": { "type": "string" },
                                          "backgroundNoise": {
                                            "type": "string",
                                            "enum": [
                                              "restaurant",
                                              "office",
                                              "park",
                                              "street"
                                            ]
                                          },
                                          "punctuationBreaks": {
                                            "type": "array",
                                            "items": { "type": "string" }
                                          },
                                          "platformSpecific": {
                                            "type": "object",
                                            "properties": {
                                              "elevenLabs": {
                                                "type": "object",
                                                "properties": {
                                                  "stability": {
                                                    "type": "number"
                                                  },
                                                  "similarity_boost": {
                                                    "type": "number"
                                                  },
                                                  "use_speaker_boost": {
                                                    "type": "boolean"
                                                  },
                                                  "speed": { "type": "number" },
                                                  "style": { "type": "number" }
                                                },
                                                "additionalProperties": false
                                              },
                                              "playht": {
                                                "type": "object",
                                                "properties": {
                                                  "voiceId": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": ["voiceId"],
                                                "additionalProperties": false
                                              }
                                            },
                                            "additionalProperties": false
                                          },
                                          "backChannelling": {
                                            "type": "boolean",
                                            "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                          },
                                          "language": { "type": "string" },
                                          "enableLongMessageBackchannelling": {
                                            "type": "boolean",
                                            "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                          },
                                          "backchannelMessages": {
                                            "type": "array",
                                            "items": { "type": "string" }
                                          },
                                          "backchannelInterval": {
                                            "type": "number"
                                          },
                                          "wordsReplacements": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "word": { "type": "string" },
                                                "replacement": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "word",
                                                "replacement"
                                              ],
                                              "additionalProperties": false
                                            }
                                          }
                                        },
                                        "required": ["provider"]
                                      },
                                      {
                                        "type": "object",
                                        "properties": {
                                          "internal": {
                                            "type": "object",
                                            "properties": {
                                              "inputTextStream": {},
                                              "audioConfig": {
                                                "type": "object",
                                                "properties": {
                                                  "format": {
                                                    "type": "string"
                                                  },
                                                  "sampleRate": {
                                                    "type": "number"
                                                  },
                                                  "channels": {
                                                    "type": "number"
                                                  }
                                                },
                                                "required": [
                                                  "format",
                                                  "sampleRate",
                                                  "channels"
                                                ],
                                                "additionalProperties": false
                                              },
                                              "emitOnComplete": {
                                                "type": "boolean"
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        }
                                      }
                                    ],
                                    "description": "**Speech Generation**: The configuration options for the speech generation provider used by the agent."
                                  },
                                  "config": {
                                    "type": "object",
                                    "properties": {
                                      "recordAudio": { "type": "boolean" },
                                      "backgroundNoise": {
                                        "type": "string",
                                        "enum": [
                                          "restaurant",
                                          "office",
                                          "street",
                                          "none"
                                        ]
                                      },
                                      "enableWebCalling": { "type": "boolean" },
                                      "firstInputChunkUNIXMs": {
                                        "type": "number"
                                      },
                                      "firstOutputChunkUNIXMs": {
                                        "type": "number"
                                      }
                                    },
                                    "required": ["recordAudio"],
                                    "additionalProperties": false,
                                    "description": "**Call Configuration**: The call configuration settings for the agent."
                                  }
                                },
                                "additionalProperties": false
                              },
                              "light": {
                                "type": "boolean",
                                "description": "Whether to enable light mode for the agent. If set to true, the agent will not retain previous chat interactions for privacy reasons."
                              },
                              "enableVertex": {
                                "type": "boolean",
                                "description": "Whether to enable Vertex AI for the agent."
                              },
                              "autoOpenWidget": {
                                "type": "boolean",
                                "description": "Whether to auto-open the widget when the agent is loaded."
                              },
                              "createdAtUNIX": {
                                "type": "number",
                                "description": "The timestamp when the agent was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                              },
                              "disabled": {
                                "type": "boolean",
                                "description": "Indicates whether the agent is disabled. If set to true, the agent will not be active."
                              },
                              "vectorDb": {
                                "description": "Specifies the vector database configuration for the agent. This database is used for handling vectorized data or embeddings."
                              },
                              "withRefresh": {
                                "type": "boolean",
                                "description": "Determines whether the agent should refresh its settings or data dynamically."
                              },
                              "agentPlatform": {
                                "type": "string",
                                "description": "Specifies the platform on which the agent operates, such as web, mobile, or other environments."
                              },
                              "ID": {
                                "type": "string",
                                "description": "A unique identifier for the agent used internally."
                              },
                              "storageID": {
                                "type": "string",
                                "description": "The identifier for the agent's storage configuration."
                              },
                              "VF_DIALOGUE_API_KEY": {
                                "type": "string",
                                "description": "API key for VF dialogue integration, enabling the agent to communicate with external systems."
                              },
                              "VF_PROJECT_API_KEY": {
                                "type": "string",
                                "description": "API key associated with the VF project to authenticate and enable specific functionalities."
                              },
                              "VF_PROJECT_ID": {
                                "type": "string",
                                "description": "The unique identifier of the VF project linked to the agent."
                              },
                              "VF_KB_API_KEY": {
                                "type": "string",
                                "description": "API key for accessing the VF knowledge base, enabling advanced knowledge retrieval capabilities."
                              },
                              "roundedImageURL": {
                                "type": "string",
                                "description": "URL pointing to the rounded image asset used to visually represent the agent."
                              },
                              "rectangeImageURL": {
                                "type": "string",
                                "description": "URL pointing to the rectangular image asset for the agent's branding or display."
                              },
                              "messageDelayMS": {
                                "type": "number",
                                "description": "Specifies the delay in milliseconds for the agent to send messages, simulating natural conversation timing."
                              },
                              "scrollAnimation": {
                                "type": "boolean",
                                "description": "Indicates whether scroll animations are enabled for smooth transitions in the chat interface."
                              },
                              "proactiveMessage": {
                                "type": "string",
                                "description": "A predefined message the agent sends proactively to engage users."
                              },
                              "acceptFileUpload": {
                                "type": "boolean",
                                "description": "Determines if the agent accepts file uploads from users as part of the interaction."
                              },
                              "recordChatHistory": {
                                "type": "boolean",
                                "description": "Specifies whether the agent logs chat histories for future reference or analysis."
                              },
                              "chatBgURL": {
                                "type": "string",
                                "description": "URL of the background image used in the chat interface."
                              },
                              "disableSmoothScroll": {
                                "type": "boolean",
                                "description": "Disables smooth scrolling if set to true, potentially improving performance on low-end devices."
                              },
                              "isDeployed": {
                                "type": "boolean",
                                "description": "Indicates whether the agent is currently deployed and operational."
                              },
                              "tokensUsage": {
                                "description": "Tracks the token usage statistics for the agent, typically used in LLM integrations."
                              },
                              "maxTokensUsage": {
                                "description": "Defines the maximum allowable token usage for the agent to prevent overconsumption."
                              },
                              "lastModified": {
                                "type": "number",
                                "description": "The timestamp of the last modification made to the agent's configuration."
                              },
                              "fontFamily": {
                                "type": "string",
                                "description": "The font family used in the agent's user interface for consistent branding."
                              },
                              "branding": {
                                "type": "string",
                                "description": "Custom branding information or labels associated with the agent."
                              },
                              "customThemeJSONString": {
                                "type": "string",
                                "description": "A JSON string defining a custom theme for the agent's interface."
                              },
                              "autoStartWidget": {
                                "type": "boolean",
                                "description": "Determines if the widget should auto-start upon page load."
                              },
                              "allTimeTriggers": {
                                "type": "number",
                                "description": "The total number of triggers or interactions the agent has handled."
                              },
                              "syncBrowser": {
                                "type": "boolean",
                                "description": "Enables synchronization of settings or states with the browser session."
                              },
                              "delayBeforeSubmit": {
                                "type": "number",
                                "description": "The delay (in milliseconds) before submitting user input to the agent."
                              },
                              "region": {
                                "type": "string",
                                "enum": ["eu", "na"],
                                "description": "Defines the geographical region settings for the agent, such as localization."
                              },
                              "listenForUrlChanges": {
                                "type": "boolean",
                                "description": "Specifies if the agent should monitor and react to changes in the browser URL."
                              },
                              "chatForget": {
                                "type": "boolean",
                                "description": "If enabled, the agent will not retain previous chat interactions for privacy reasons."
                              },
                              "lang": {
                                "type": "string",
                                "description": "Specifies the default language for the agent's interactions and responses."
                              },
                              "enableAudioSupport": {
                                "type": "boolean",
                                "description": "Enables audio features, allowing the agent to process and respond to audio inputs."
                              },
                              "AITranslateTo": {
                                "type": "string",
                                "description": "Defines the target language for AI translation during interactions."
                              },
                              "enableAITranslate": {
                                "type": "boolean",
                                "description": "Activates AI-based translation for multilingual support."
                              },
                              "disableNoReplyListener": {
                                "type": "boolean",
                                "description": "Disables the listener for instances where no reply is detected from the agent."
                              },
                              "disableHumanHandoff": {
                                "type": "boolean",
                                "description": "Prevents the agent from escalating interactions to a human operator."
                              },
                              "alwaysShowHandoff": {
                                "type": "boolean",
                                "description": "Ensures the handoff option is always visible, regardless of agent status."
                              },
                              "manualControl": {
                                "type": "boolean",
                                "description": "Allows manual control over specific agent functionalities."
                              },
                              "enableVGHandoff": {
                                "type": "boolean",
                                "description": "Activates VG-specific handoff mechanisms for the agent."
                              },
                              "enableGeoAnalytics": {
                                "type": "boolean",
                                "description": "Enables geographic analytics to track user interactions based on location."
                              },
                              "hideVoiceflowAnalytics": {
                                "type": "boolean",
                                "description": "Hides Voiceflow-specific analytics including intents, conversation flow metrics, and rating analytics."
                              },
                              "hideCallAnalytics": {
                                "type": "boolean",
                                "description": "Hides voice call analytics including duration, latency, cost breakdown, call counts, and call end reasons."
                              },
                              "hideConversationMetrics": {
                                "type": "boolean",
                                "description": "Hides conversation metrics including user retention, conversation length, time retention, and engagement metrics."
                              },
                              "hideCustomAnalytics": {
                                "type": "boolean",
                                "description": "Hides user-created custom charts and metrics from the analytics dashboard."
                              },
                              "hideVapiAnalytics": {
                                "type": "boolean",
                                "description": "Hides VAPI-specific analytics including cost tracking and voice-related metrics."
                              },
                              "hideFunnelAnalytics": {
                                "type": "boolean",
                                "description": "Hides the user engagement funnel chart that tracks progression from widget views to high engagement."
                              },
                              "fixedHandoffPopup": {
                                "type": "boolean",
                                "description": "Ensures the handoff popup remains fixed in the interface."
                              },
                              "buttonsLayout": {
                                "type": "string",
                                "enum": ["horizontal", "vertical", "in-footer"],
                                "description": "Defines the layout and style of buttons in the agent's interface."
                              },
                              "ADVANCED_customCSS": {
                                "type": "string",
                                "description": "Specifies advanced custom CSS for overriding the default styling of the agent's interface."
                              },
                              "messagesLimit": {
                                "type": "number",
                                "description": "Sets a cap on the number of messages the agent can exchange in a single session."
                              },
                              "whatsappToken": {
                                "type": "string",
                                "description": "Token for authenticating and integrating with WhatsApp services."
                              },
                              "whatsappNumberId": {
                                "type": "string",
                                "description": "The ID associated with the WhatsApp number used by the agent."
                              },
                              "whatsappBusniessId": {
                                "type": "string",
                                "description": "The business ID for WhatsApp integration, enabling enterprise-level features."
                              },
                              "waTestNumber": {
                                "type": "string",
                                "description": "A test number used during WhatsApp integration setup or testing."
                              },
                              "waVerifyPassed": {
                                "type": "boolean",
                                "description": "Indicates if WhatsApp verification was successfully completed."
                              },
                              "waTestPassed": {
                                "type": "boolean",
                                "description": "Indicates if the WhatsApp integration test was successful."
                              },
                              "webhookUrl": {
                                "type": "string",
                                "description": "The URL where the agent sends webhook events to external systems."
                              },
                              "gcloudPrivateKey": {
                                "type": "string",
                                "description": "Private key for Google Cloud services integration."
                              },
                              "gcloudClientEmail": {
                                "type": "string",
                                "description": "Client email for Google Cloud authentication."
                              },
                              "smartInit": {
                                "type": "boolean",
                                "description": "Activates smart initialization features for the agent."
                              },
                              "UIhandoffTitle": {
                                "type": "string",
                                "description": "Title displayed during UI handoff interactions."
                              },
                              "UIhandoffSubtitle": {
                                "type": "string",
                                "description": "Subtitle displayed during UI handoff interactions."
                              },
                              "igVerified": {
                                "type": "boolean",
                                "description": "Indicates if the agent's Instagram integration is verified."
                              },
                              "igAccessToken": {
                                "type": "string",
                                "description": "Access token for authenticating Instagram API requests."
                              },
                              "showHandoffEvenIfOffline": {
                                "type": "boolean",
                                "description": "Displays the handoff option even if the agent is offline."
                              },
                              "persistHandoffOnRefresh": {
                                "type": "boolean",
                                "description": "Maintains handoff state when users refresh or close their browser tabs."
                              },
                              "blockInputDuringHandoffRequest": {
                                "type": "boolean",
                                "description": "Blocks chat input when a user requests human handoff but no human has been assigned yet. Only applies to VF agents."
                              },
                              "customButtonJSON_STRING": {
                                "type": "string",
                                "description": "JSON string defining custom buttons for the agent's interface."
                              },
                              "vg_initPrompt": {
                                "type": "string",
                                "description": "The initial prompt displayed or used by the VF system."
                              },
                              "vg_prompt": {
                                "type": "string",
                                "description": "The main prompt template used for generating responses."
                              },
                              "vg_initMessages": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "Initial messages loaded for the agent's conversation flow."
                              },
                              "vg_systemPrompt": {
                                "type": "string",
                                "description": "System-level prompt defining the agent's behavior and rules."
                              },
                              "vg_temperature": {
                                "type": "number",
                                "description": "Defines the temperature setting for response variability in the VF model."
                              },
                              "vg_defaultModel": {
                                "type": "string",
                                "enum": [
                                  "gpt-5-chat-latest",
                                  "gpt-5-2025-08-07",
                                  "gpt-5-mini-2025-08-07",
                                  "gpt-5-nano-2025-08-07",
                                  "gpt-3.5-turbo-0125",
                                  "gpt-4-1106-preview",
                                  "gpt-4.5-preview-2025-02-27",
                                  "gpt-4o",
                                  "gpt-4o-mini",
                                  "gpt-4.1-2025-04-14",
                                  "gpt-4.1-mini-2025-04-14",
                                  "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                  "llama3-8b-8192",
                                  "llama3-70b-8192",
                                  "llama-3.1-8b-instant",
                                  "llama-3.1-70b-versatile",
                                  "llama-3.2-90b-text-preview",
                                  "llama-3.2-11b-text-preview",
                                  "llama-3.3-70b-versatile",
                                  "meta-llama/llama-4-scout-17b-16e-instruct",
                                  "meta-llama/llama-4-maverick-17b-128e-instruct",
                                  "mixtral-8x7b-32768",
                                  "gemma-7b-it",
                                  "gemma2-9b-it",
                                  "claude-opus-4-20250514",
                                  "claude-sonnet-4-20250514",
                                  "claude-3-5-sonnet-20240620",
                                  "claude-3-5-sonnet-20241022",
                                  "claude-3-opus-20240229",
                                  "claude-3-sonnet-20240229",
                                  "claude-3-haiku-20240307",
                                  "claude-3-5-haiku-20241022",
                                  "claude-3-7-sonnet-20250219",
                                  "gemini-1.5-pro",
                                  "gemini-1.5-flash",
                                  "gemini-1.0-pro",
                                  "gemini-2.0-flash-exp",
                                  "gemini-2.0-flash-thinking-exp-1219",
                                  "gemini-2.5-pro",
                                  "gemini-2.5-pro-exp-03-25",
                                  "gemini-2.5-pro-preview-03-25",
                                  "gemini-2.5-flash-preview-05-20",
                                  "gemini-2.5-flash",
                                  "gpt-4-32k",
                                  "gpt-4",
                                  "gpt-3.5-turbo-16k",
                                  "gpt-3.5-turbo",
                                  "deepseek-chat",
                                  "deepseek-r1-distill-llama-70b",
                                  "grok-2-latest",
                                  "grok-3",
                                  "grok-3-mini",
                                  "grok-3-fast",
                                  "grok-4-0709",
                                  "qwen-max-latest",
                                  "qwen-plus-latest",
                                  "qwen-turbo-latest",
                                  "custom-llm",
                                  "models/gemini-2.5-pro-preview-03-25",
                                  "azure-eu-gpt-4o",
                                  "azure-na-gpt-4o"
                                ],
                                "description": "Specifies the default LLM model used by the agent for language processing."
                              },
                              "vg_maxTokens": {
                                "type": "number",
                                "description": "Sets the maximum token limit for generating responses."
                              },
                              "vg_kbDefaultDimension": {
                                "type": "number",
                                "description": "Default dimensionality for the agent's knowledge base embeddings."
                              },
                              "vg_kbTopChunks": {
                                "type": "number",
                                "description": "The number of top chunks retrieved from the knowledge base during a query."
                              },
                              "SECRET_API_KEY": {
                                "type": "string",
                                "description": "The secret API key for secure integration with VF services."
                              },
                              "vg_kbCharCount": {
                                "type": "number",
                                "description": "Tracks the total character count of the agent's knowledge base."
                              },
                              "vg_kbDocsNum": {
                                "type": "number",
                                "description": "The total number of documents stored in the agent's knowledge base."
                              },
                              "vg_enableUIEngine": {
                                "type": "boolean",
                                "description": "Activates the UI engine for enhanced interface capabilities."
                              },
                              "vg_enableAboutContext": {
                                "type": "boolean",
                                "description": "Enables contextual information about the agent for users."
                              },
                              "vg_kb_llm": {
                                "type": "object",
                                "properties": {
                                  "searchMethod": {
                                    "anyOf": [
                                      { "type": "string", "enum": ["smart"] },
                                      { "type": "string", "enum": ["simple"] }
                                    ]
                                  },
                                  "searchPrompt": { "type": "string" },
                                  "modelId": {
                                    "type": "string",
                                    "enum": [
                                      "gpt-5-chat-latest",
                                      "gpt-5-2025-08-07",
                                      "gpt-5-mini-2025-08-07",
                                      "gpt-5-nano-2025-08-07",
                                      "gpt-3.5-turbo-0125",
                                      "gpt-4-1106-preview",
                                      "gpt-4.5-preview-2025-02-27",
                                      "gpt-4o",
                                      "gpt-4o-mini",
                                      "gpt-4.1-2025-04-14",
                                      "gpt-4.1-mini-2025-04-14",
                                      "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                      "llama3-8b-8192",
                                      "llama3-70b-8192",
                                      "llama-3.1-8b-instant",
                                      "llama-3.1-70b-versatile",
                                      "llama-3.2-90b-text-preview",
                                      "llama-3.2-11b-text-preview",
                                      "llama-3.3-70b-versatile",
                                      "meta-llama/llama-4-scout-17b-16e-instruct",
                                      "meta-llama/llama-4-maverick-17b-128e-instruct",
                                      "mixtral-8x7b-32768",
                                      "gemma-7b-it",
                                      "gemma2-9b-it",
                                      "claude-opus-4-20250514",
                                      "claude-sonnet-4-20250514",
                                      "claude-3-5-sonnet-20240620",
                                      "claude-3-5-sonnet-20241022",
                                      "claude-3-opus-20240229",
                                      "claude-3-sonnet-20240229",
                                      "claude-3-haiku-20240307",
                                      "claude-3-5-haiku-20241022",
                                      "claude-3-7-sonnet-20250219",
                                      "gemini-1.5-pro",
                                      "gemini-1.5-flash",
                                      "gemini-1.0-pro",
                                      "gemini-2.0-flash-exp",
                                      "gemini-2.0-flash-thinking-exp-1219",
                                      "gemini-2.5-pro",
                                      "gemini-2.5-pro-exp-03-25",
                                      "gemini-2.5-pro-preview-03-25",
                                      "gemini-2.5-flash-preview-05-20",
                                      "gemini-2.5-flash",
                                      "gpt-4-32k",
                                      "gpt-4",
                                      "gpt-3.5-turbo-16k",
                                      "gpt-3.5-turbo",
                                      "deepseek-chat",
                                      "deepseek-r1-distill-llama-70b",
                                      "grok-2-latest",
                                      "grok-3",
                                      "grok-3-mini",
                                      "grok-3-fast",
                                      "grok-4-0709",
                                      "qwen-max-latest",
                                      "qwen-plus-latest",
                                      "qwen-turbo-latest",
                                      "custom-llm",
                                      "models/gemini-2.5-pro-preview-03-25",
                                      "azure-eu-gpt-4o",
                                      "azure-na-gpt-4o"
                                    ]
                                  },
                                  "temprature": { "type": "number" },
                                  "maxTokens": { "type": "number" }
                                },
                                "additionalProperties": false,
                                "description": "Configuration for LLM-based knowledge base queries, including search methods and model parameters."
                              },
                              "vg_enableUIEngineForms": {
                                "type": "boolean",
                                "description": "Enables form and input components in the UI engine for web channel."
                              },
                              "vg_max_messages_history": {
                                "type": "number",
                                "description": "Maximum number of messages retained in the chat history."
                              },
                              "ifKnowsThreshold": {
                                "type": "number",
                                "description": "Confidence threshold for determining if the agent 'knows' an answer."
                              },
                              "avatarImageUrl": {
                                "type": "string",
                                "description": "URL of the avatar image representing the agent."
                              },
                              "headerImageUrl": {
                                "type": "string",
                                "description": "URL of the header image displayed in the chat interface."
                              },
                              "bannerImageUrl": {
                                "type": "string",
                                "description": "URL of the banner image used in the agent's branding."
                              },
                              "soundEffectUrl": {
                                "type": "string",
                                "description": "URL of the sound effect file used for agent interactions."
                              },
                              "soundEffectEnabled": {
                                "type": "boolean",
                                "description": "Enables or disables sound effects for the agent."
                              },
                              "enableQuickFileUpload": {
                                "type": "boolean",
                                "description": "Allows quick file uploads during chat interactions."
                              },
                              "instagramOptions": {
                                "type": "object",
                                "properties": {
                                  "pageId": { "type": "string" },
                                  "accessToken": { "type": "string" }
                                },
                                "additionalProperties": false
                              },
                              "translateUserResponse": { "type": "boolean" },
                              "starred": { "type": "boolean" },
                              "flowise": {
                                "type": "object",
                                "properties": {
                                  "webhookUrl": { "type": "string" },
                                  "webhookSecret": { "type": "string" }
                                },
                                "additionalProperties": false
                              },
                              "vfSettings": {
                                "type": "object",
                                "properties": {
                                  "enableIgnoreUrlPaths": { "type": "boolean" }
                                },
                                "additionalProperties": false
                              },
                              "vapi": {},
                              "vapiConfig": {
                                "type": "object",
                                "properties": {
                                  "syncKbOnSave": { "type": "boolean" },
                                  "PUBLIC_API_KEY": { "type": "string" },
                                  "PRIVATE_API_KEY": { "type": "string" },
                                  "enableVapiOnWeb": { "type": "boolean" },
                                  "overrideWithVG": { "type": "boolean" },
                                  "promptOnWeb": { "type": "boolean" },
                                  "maxCostMonthly": { "type": "number" },
                                  "maxMinutesMonthly": { "type": "number" },
                                  "useVfProject": { "type": "boolean" },
                                  "syncTools": { "type": "boolean" }
                                },
                                "additionalProperties": false
                              },
                              "vgOptions": {
                                "type": "object",
                                "properties": {
                                  "isLlmStudio": { "type": "boolean" },
                                  "showSources": { "type": "boolean" },
                                  "lightUiEngine": { "type": "boolean" },
                                  "legacyKb": { "type": "boolean" },
                                  "maxChunkSize": { "type": "number" },
                                  "handoffTimeout": { "type": "number" }
                                },
                                "additionalProperties": false
                              },
                              "ui": {
                                "type": "object",
                                "properties": {
                                  "showWhatsappButtonOnWeb": {
                                    "type": "boolean",
                                    "description": "Show little whatsapp button on web if it's connected."
                                  },
                                  "bgImageVisible": { "type": "boolean" },
                                  "widgetType": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "enum": ["direct-chat"]
                                      },
                                      { "type": "string", "enum": ["tabs"] }
                                    ]
                                  },
                                  "enableFixedFeedbackBtns": {
                                    "type": "boolean"
                                  },
                                  "switchConversationSides": {
                                    "type": "boolean"
                                  },
                                  "switchDashboardOnly": { "type": "boolean" },
                                  "voice": {
                                    "type": "object",
                                    "properties": {
                                      "question": { "type": "string" },
                                      "continueBtnLabel": { "type": "string" },
                                      "dismissBtnLabel": { "type": "string" },
                                      "disableVoiceOrb": { "type": "boolean" }
                                    },
                                    "required": [
                                      "question",
                                      "continueBtnLabel",
                                      "dismissBtnLabel"
                                    ],
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              },
                              "assignedToolsIds": {
                                "type": "array",
                                "items": { "type": "string" }
                              },
                              "tools": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "isDefault": {
                                      "type": "boolean",
                                      "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                                    },
                                    "method": {
                                      "type": "string",
                                      "enum": ["GET", "POST", "PUT", "PATCH"],
                                      "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                                    },
                                    "id": {
                                      "type": "string",
                                      "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the tool, providing a human-readable identifier for display purposes."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                                    },
                                    "serverUrl": {
                                      "type": "string",
                                      "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                                    },
                                    "serverUrlSecret": {
                                      "type": "string",
                                      "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                                    },
                                    "createdAt": {
                                      "type": "string",
                                      "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                                    },
                                    "updatedAt": {
                                      "type": "string",
                                      "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                                    },
                                    "disabled": {
                                      "type": "boolean",
                                      "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                                    },
                                    "isVapiTool": {
                                      "type": "boolean",
                                      "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                                    },
                                    "vapiId": {
                                      "type": "string",
                                      "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                                    },
                                    "isGlobal": {
                                      "type": "boolean",
                                      "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                                    },
                                    "variablesIds": {
                                      "type": "array",
                                      "items": { "type": "string" },
                                      "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                                    },
                                    "agentId": {
                                      "type": "string",
                                      "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                                    },
                                    "userId": {
                                      "type": "string",
                                      "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                                    },
                                    "backchannellingPhrases": {
                                      "type": "array",
                                      "items": { "type": "string" },
                                      "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                                    },
                                    "toolsSettings": {},
                                    "fields": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                          },
                                          "in": {
                                            "type": "string",
                                            "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                          },
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "string",
                                              "number",
                                              "boolean",
                                              "system"
                                            ],
                                            "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                          },
                                          "value": {
                                            "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                          },
                                          "defaultValue": {
                                            "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                          },
                                          "key": {
                                            "type": "string",
                                            "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                          },
                                          "required": {
                                            "type": "boolean",
                                            "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                          },
                                          "reusable": {
                                            "type": "boolean",
                                            "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                          },
                                          "isEnv": {
                                            "type": "boolean",
                                            "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                          },
                                          "isSystem": {
                                            "type": "boolean",
                                            "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                          },
                                          "isGlobal": {
                                            "type": "boolean",
                                            "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                          },
                                          "agentId": {
                                            "type": "string",
                                            "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                          },
                                          "userId": {
                                            "type": "string",
                                            "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                          }
                                        },
                                        "required": ["id"],
                                        "additionalProperties": false
                                      }
                                    },
                                    "channels": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "web-chat",
                                          "whatsapp",
                                          "instagram",
                                          "telegram",
                                          "discord",
                                          "gb-chat",
                                          "vapi",
                                          "messenger",
                                          "voice",
                                          "telephony"
                                        ]
                                      },
                                      "description": "The channels that the tool can be used on."
                                    }
                                  },
                                  "required": ["id", "name", "description"],
                                  "additionalProperties": false
                                }
                              },
                              "internal": {
                                "type": "object",
                                "properties": {
                                  "accountCreationConfig": {
                                    "type": "string",
                                    "enum": ["v2"]
                                  },
                                  "websocketServer": {
                                    "anyOf": [
                                      { "type": "string", "enum": ["edge"] },
                                      { "type": "string", "enum": ["nodejs"] }
                                    ]
                                  },
                                  "setOnResponse": { "type": "boolean" },
                                  "enableSetOnLoad": { "type": "boolean" }
                                },
                                "additionalProperties": false
                              },
                              "disableAutoTranscribeAudio": {
                                "type": "boolean"
                              },
                              "disableTranscriptSharing": { "type": "boolean" },
                              "instaAgentUsername": { "type": "string" },
                              "convoTags": {
                                "type": "array",
                                "items": { "type": "string" }
                              },
                              "vfConfig": {
                                "type": "object",
                                "properties": {
                                  "alwaysEnableCardButtons": {
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "discord": {
                                "type": "object",
                                "properties": {
                                  "channelIds": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  },
                                  "webhookUrls": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  }
                                },
                                "additionalProperties": false
                              },
                              "limits": {
                                "type": "object",
                                "properties": {
                                  "maxInteractionsPerUserId": {
                                    "type": "number"
                                  },
                                  "maxAnnualCreditsUsage": { "type": "number" },
                                  "maxMonthlyCreditsUsage": {
                                    "type": "number"
                                  },
                                  "maxMessages": {
                                    "type": "number",
                                    "description": "Maximum number of messages allowed per conversation"
                                  },
                                  "maxMessagesRetentionDays": {
                                    "type": "number",
                                    "description": "Retention period in days for messages"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "tabs": { "type": "array" },
                              "kbTags": {
                                "type": "array",
                                "items": { "type": "string" }
                              },
                              "kbTagsDataMap": { "type": "array" },
                              "nodes": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": { "type": "string" },
                                    "name": { "type": "string" },
                                    "description": {
                                      "type": "string",
                                      "description": "A short description of what this node does and when it should be used, specially useful if the node is global or when the LLM detects automatic rerouting."
                                    },
                                    "instructions": {
                                      "type": "string",
                                      "description": "What should this LLM node do."
                                    },
                                    "mcpServers": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": { "type": "string" },
                                          "url": { "type": "string" },
                                          "transport": {
                                            "type": "string",
                                            "enum": [
                                              "sse",
                                              "websocket",
                                              "stdio"
                                            ]
                                          },
                                          "useNodeEventSource": {
                                            "type": "boolean"
                                          },
                                          "reconnect": {
                                            "type": "object",
                                            "properties": {
                                              "enabled": { "type": "boolean" },
                                              "maxAttempts": {
                                                "type": "number"
                                              },
                                              "delayMs": { "type": "number" }
                                            },
                                            "additionalProperties": false
                                          },
                                          "command": { "type": "string" },
                                          "args": {
                                            "type": "array",
                                            "items": { "type": "string" }
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "voiceInstructions": {
                                      "type": "string",
                                      "description": "The voice instructions for this node, will be used instead of instructions in voice channels if provided."
                                    },
                                    "isGlobal": {
                                      "type": "boolean",
                                      "description": "If true, this node will be always present for the LLM"
                                    },
                                    "toolsIds": {
                                      "type": "array",
                                      "items": { "type": "string" },
                                      "description": "The tools that will be available for this node"
                                    },
                                    "toolsSettings": {
                                      "type": "object",
                                      "properties": {
                                        "googleCalendar": {
                                          "type": "object",
                                          "properties": {
                                            "calendarId": { "type": "string" },
                                            "methods": {
                                              "type": "array",
                                              "items": {
                                                "type": "string",
                                                "enum": [
                                                  "create-event",
                                                  "check-availability",
                                                  "get-slots",
                                                  "delete-event"
                                                ]
                                              }
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "childrenNodes": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "nodeId": { "type": "string" },
                                          "condition": {
                                            "type": "string",
                                            "description": "The condition that will be checked to determine if the node should advanced to the selected node id or not or should simply loop in the current node."
                                          }
                                        },
                                        "required": ["nodeId", "condition"],
                                        "additionalProperties": false
                                      },
                                      "description": "The outputs of this node which the node after finishing will choose from to either advance or to keep looping in this node till it caputures or reaches one of the mentioned routers."
                                    },
                                    "llmConfig": {
                                      "type": "object",
                                      "properties": {
                                        "modelId": {
                                          "type": "string",
                                          "enum": [
                                            "gpt-5-chat-latest",
                                            "gpt-5-2025-08-07",
                                            "gpt-5-mini-2025-08-07",
                                            "gpt-5-nano-2025-08-07",
                                            "gpt-3.5-turbo-0125",
                                            "gpt-4-1106-preview",
                                            "gpt-4.5-preview-2025-02-27",
                                            "gpt-4o",
                                            "gpt-4o-mini",
                                            "gpt-4.1-2025-04-14",
                                            "gpt-4.1-mini-2025-04-14",
                                            "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                            "llama3-8b-8192",
                                            "llama3-70b-8192",
                                            "llama-3.1-8b-instant",
                                            "llama-3.1-70b-versatile",
                                            "llama-3.2-90b-text-preview",
                                            "llama-3.2-11b-text-preview",
                                            "llama-3.3-70b-versatile",
                                            "meta-llama/llama-4-scout-17b-16e-instruct",
                                            "meta-llama/llama-4-maverick-17b-128e-instruct",
                                            "mixtral-8x7b-32768",
                                            "gemma-7b-it",
                                            "gemma2-9b-it",
                                            "claude-opus-4-20250514",
                                            "claude-sonnet-4-20250514",
                                            "claude-3-5-sonnet-20240620",
                                            "claude-3-5-sonnet-20241022",
                                            "claude-3-opus-20240229",
                                            "claude-3-sonnet-20240229",
                                            "claude-3-haiku-20240307",
                                            "claude-3-5-haiku-20241022",
                                            "claude-3-7-sonnet-20250219",
                                            "gemini-1.5-pro",
                                            "gemini-1.5-flash",
                                            "gemini-1.0-pro",
                                            "gemini-2.0-flash-exp",
                                            "gemini-2.0-flash-thinking-exp-1219",
                                            "gemini-2.5-pro",
                                            "gemini-2.5-pro-exp-03-25",
                                            "gemini-2.5-pro-preview-03-25",
                                            "gemini-2.5-flash-preview-05-20",
                                            "gemini-2.5-flash",
                                            "gpt-4-32k",
                                            "gpt-4",
                                            "gpt-3.5-turbo-16k",
                                            "gpt-3.5-turbo",
                                            "deepseek-chat",
                                            "deepseek-r1-distill-llama-70b",
                                            "grok-2-latest",
                                            "grok-3",
                                            "grok-3-mini",
                                            "grok-3-fast",
                                            "grok-4-0709",
                                            "qwen-max-latest",
                                            "qwen-plus-latest",
                                            "qwen-turbo-latest",
                                            "custom-llm",
                                            "models/gemini-2.5-pro-preview-03-25",
                                            "azure-eu-gpt-4o",
                                            "azure-na-gpt-4o"
                                          ]
                                        },
                                        "temperature": {
                                          "type": "number",
                                          "description": "The temperature of the LLM"
                                        },
                                        "maxTokens": {
                                          "type": "number",
                                          "description": "The max tokens of the LLM"
                                        },
                                        "customModelId": {
                                          "type": "string",
                                          "description": "The custom model id of the LLM"
                                        },
                                        "serverUrl": {
                                          "type": "string",
                                          "description": "The server url of the LLM"
                                        },
                                        "apiKey": {
                                          "type": "string",
                                          "description": "The api key of the LLM"
                                        }
                                      },
                                      "required": [
                                        "modelId",
                                        "temperature",
                                        "maxTokens"
                                      ],
                                      "additionalProperties": false
                                    },
                                    "routerLlmConfig": {
                                      "type": "object",
                                      "properties": {
                                        "modelId": {
                                          "type": "string",
                                          "enum": [
                                            "gpt-5-chat-latest",
                                            "gpt-5-2025-08-07",
                                            "gpt-5-mini-2025-08-07",
                                            "gpt-5-nano-2025-08-07",
                                            "gpt-3.5-turbo-0125",
                                            "gpt-4-1106-preview",
                                            "gpt-4.5-preview-2025-02-27",
                                            "gpt-4o",
                                            "gpt-4o-mini",
                                            "gpt-4.1-2025-04-14",
                                            "gpt-4.1-mini-2025-04-14",
                                            "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                            "llama3-8b-8192",
                                            "llama3-70b-8192",
                                            "llama-3.1-8b-instant",
                                            "llama-3.1-70b-versatile",
                                            "llama-3.2-90b-text-preview",
                                            "llama-3.2-11b-text-preview",
                                            "llama-3.3-70b-versatile",
                                            "meta-llama/llama-4-scout-17b-16e-instruct",
                                            "meta-llama/llama-4-maverick-17b-128e-instruct",
                                            "mixtral-8x7b-32768",
                                            "gemma-7b-it",
                                            "gemma2-9b-it",
                                            "claude-opus-4-20250514",
                                            "claude-sonnet-4-20250514",
                                            "claude-3-5-sonnet-20240620",
                                            "claude-3-5-sonnet-20241022",
                                            "claude-3-opus-20240229",
                                            "claude-3-sonnet-20240229",
                                            "claude-3-haiku-20240307",
                                            "claude-3-5-haiku-20241022",
                                            "claude-3-7-sonnet-20250219",
                                            "gemini-1.5-pro",
                                            "gemini-1.5-flash",
                                            "gemini-1.0-pro",
                                            "gemini-2.0-flash-exp",
                                            "gemini-2.0-flash-thinking-exp-1219",
                                            "gemini-2.5-pro",
                                            "gemini-2.5-pro-exp-03-25",
                                            "gemini-2.5-pro-preview-03-25",
                                            "gemini-2.5-flash-preview-05-20",
                                            "gemini-2.5-flash",
                                            "gpt-4-32k",
                                            "gpt-4",
                                            "gpt-3.5-turbo-16k",
                                            "gpt-3.5-turbo",
                                            "deepseek-chat",
                                            "deepseek-r1-distill-llama-70b",
                                            "grok-2-latest",
                                            "grok-3",
                                            "grok-3-mini",
                                            "grok-3-fast",
                                            "grok-4-0709",
                                            "qwen-max-latest",
                                            "qwen-plus-latest",
                                            "qwen-turbo-latest",
                                            "custom-llm",
                                            "models/gemini-2.5-pro-preview-03-25",
                                            "azure-eu-gpt-4o",
                                            "azure-na-gpt-4o"
                                          ]
                                        },
                                        "temperature": {
                                          "type": "number",
                                          "description": "The temperature of the LLM"
                                        },
                                        "maxTokens": {
                                          "type": "number",
                                          "description": "The max tokens of the LLM"
                                        },
                                        "customModelId": {
                                          "type": "string",
                                          "description": "The custom model id of the LLM"
                                        },
                                        "serverUrl": {
                                          "type": "string",
                                          "description": "The server url of the LLM"
                                        },
                                        "apiKey": {
                                          "type": "string",
                                          "description": "The api key of the LLM"
                                        }
                                      },
                                      "required": [
                                        "modelId",
                                        "temperature",
                                        "maxTokens"
                                      ],
                                      "additionalProperties": false,
                                      "description": "The LLM config that will be used for the router node, NOTE: This must be a fast LLM model or the latency will be too high between responses."
                                    },
                                    "toolUseBias": {
                                      "type": "number",
                                      "description": "The bias of the LLM to use tools if 0 it will never use tools, if 1 it will only use tools."
                                    },
                                    "autoRerouter": {
                                      "type": "object",
                                      "properties": {
                                        "enabled": {
                                          "type": "boolean",
                                          "description": "If true, the LLM will try to detect if the user has changed his mind about something enabling the AI to rewind back to the previous node."
                                        },
                                        "level": {
                                          "type": "number",
                                          "description": "The level of rewinding, if 1 the LLM will have access to only 1 level or rewind capabilities meaning if it went from node A > B > C > D  then if it at node d & it detects it needs to be at node B again it will be able to rewind back to node B if the level is at least 2, it will not be able to detect node A unless the level is 3 or more, and so on."
                                        }
                                      },
                                      "required": ["enabled", "level"],
                                      "additionalProperties": false,
                                      "description": "The auto rerouter of this node."
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "start",
                                        "end",
                                        "default",
                                        "condition",
                                        "note"
                                      ],
                                      "description": "The type of the node, if not provided it will be a normal LLM node."
                                    },
                                    "rf": {
                                      "description": "The position of the node in the reactflow canvas."
                                    },
                                    "kb": {
                                      "type": "object",
                                      "properties": {
                                        "enabled": { "type": "boolean" },
                                        "maxChunks": {
                                          "type": "number",
                                          "description": "The max chunks to use from the KB."
                                        },
                                        "tags": {
                                          "type": "array",
                                          "items": { "type": "string" },
                                          "description": "The tags to use to filter the docs we search through"
                                        },
                                        "smartSearch": {
                                          "type": "boolean",
                                          "description": "If true, the LLM will use the smart search to search through the docs."
                                        }
                                      },
                                      "required": ["enabled", "maxChunks"],
                                      "additionalProperties": false
                                    },
                                    "conditionData": {
                                      "type": "object",
                                      "properties": {
                                        "condition": {
                                          "type": "string",
                                          "description": "The condition to check."
                                        }
                                      },
                                      "required": ["condition"],
                                      "additionalProperties": false
                                    },
                                    "preStart": {
                                      "type": "object",
                                      "properties": {
                                        "url": {
                                          "type": "string",
                                          "description": "The URL to send the GET request to."
                                        },
                                        "enabled": {
                                          "type": "boolean",
                                          "description": "If true, we will send a GET request to the URL before starting the node."
                                        },
                                        "testConvoIdValue": {
                                          "type": "string",
                                          "description": "The value to test the URL with."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "description": "The pre start tool of the node, we will send a GET request to this URL before starting the node and provide the results to the AI. GET {url}/{user_id}/{node_name}"
                                    },
                                    "startConfig": {
                                      "type": "object",
                                      "properties": {
                                        "initialMessage": {
                                          "type": "string",
                                          "description": "The initial message to start the conversation with"
                                        },
                                        "userStarts": {
                                          "type": "boolean",
                                          "description": "Whether the user or AI agent gives the first message"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "description": "Configuration for start nodes"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "description",
                                    "instructions",
                                    "llmConfig"
                                  ],
                                  "additionalProperties": false,
                                  "description": "A node in the LLM chain."
                                }
                              },
                              "enableNodes": { "type": "boolean" },
                              "advanced": {
                                "type": "object",
                                "properties": {
                                  "serverUrl": { "type": "string" },
                                  "serverUrlSecret": { "type": "string" }
                                },
                                "additionalProperties": false
                              },
                              "nodesSettings": {
                                "type": "object",
                                "properties": {
                                  "enableUIEngineForms": {
                                    "type": "boolean",
                                    "description": "If true, the LLM will be able to show forms on web channel only."
                                  },
                                  "geminiLiveOptions": {},
                                  "appendBeforePrompt": {
                                    "type": "string",
                                    "description": "The prompt to append to the nodes' prompt."
                                  },
                                  "routerLLmOptions": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": {
                                        "type": "string",
                                        "enum": [
                                          "gpt-5-chat-latest",
                                          "gpt-5-2025-08-07",
                                          "gpt-5-mini-2025-08-07",
                                          "gpt-5-nano-2025-08-07",
                                          "gpt-3.5-turbo-0125",
                                          "gpt-4-1106-preview",
                                          "gpt-4.5-preview-2025-02-27",
                                          "gpt-4o",
                                          "gpt-4o-mini",
                                          "gpt-4.1-2025-04-14",
                                          "gpt-4.1-mini-2025-04-14",
                                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                          "llama3-8b-8192",
                                          "llama3-70b-8192",
                                          "llama-3.1-8b-instant",
                                          "llama-3.1-70b-versatile",
                                          "llama-3.2-90b-text-preview",
                                          "llama-3.2-11b-text-preview",
                                          "llama-3.3-70b-versatile",
                                          "meta-llama/llama-4-scout-17b-16e-instruct",
                                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                                          "mixtral-8x7b-32768",
                                          "gemma-7b-it",
                                          "gemma2-9b-it",
                                          "claude-opus-4-20250514",
                                          "claude-sonnet-4-20250514",
                                          "claude-3-5-sonnet-20240620",
                                          "claude-3-5-sonnet-20241022",
                                          "claude-3-opus-20240229",
                                          "claude-3-sonnet-20240229",
                                          "claude-3-haiku-20240307",
                                          "claude-3-5-haiku-20241022",
                                          "claude-3-7-sonnet-20250219",
                                          "gemini-1.5-pro",
                                          "gemini-1.5-flash",
                                          "gemini-1.0-pro",
                                          "gemini-2.0-flash-exp",
                                          "gemini-2.0-flash-thinking-exp-1219",
                                          "gemini-2.5-pro",
                                          "gemini-2.5-pro-exp-03-25",
                                          "gemini-2.5-pro-preview-03-25",
                                          "gemini-2.5-flash-preview-05-20",
                                          "gemini-2.5-flash",
                                          "gpt-4-32k",
                                          "gpt-4",
                                          "gpt-3.5-turbo-16k",
                                          "gpt-3.5-turbo",
                                          "deepseek-chat",
                                          "deepseek-r1-distill-llama-70b",
                                          "grok-2-latest",
                                          "grok-3",
                                          "grok-3-mini",
                                          "grok-3-fast",
                                          "grok-4-0709",
                                          "qwen-max-latest",
                                          "qwen-plus-latest",
                                          "qwen-turbo-latest",
                                          "custom-llm",
                                          "models/gemini-2.5-pro-preview-03-25",
                                          "azure-eu-gpt-4o",
                                          "azure-na-gpt-4o"
                                        ]
                                      },
                                      "temperature": {
                                        "type": "number",
                                        "description": "The temperature of the LLM"
                                      },
                                      "maxTokens": {
                                        "type": "number",
                                        "description": "The max tokens of the LLM"
                                      },
                                      "customModelId": {
                                        "type": "string",
                                        "description": "The custom model id of the LLM"
                                      },
                                      "serverUrl": {
                                        "type": "string",
                                        "description": "The server url of the LLM"
                                      },
                                      "apiKey": {
                                        "type": "string",
                                        "description": "The api key of the LLM"
                                      }
                                    },
                                    "required": [
                                      "modelId",
                                      "temperature",
                                      "maxTokens"
                                    ],
                                    "additionalProperties": false
                                  },
                                  "defaultLLmOptions": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": {
                                        "type": "string",
                                        "enum": [
                                          "gpt-5-chat-latest",
                                          "gpt-5-2025-08-07",
                                          "gpt-5-mini-2025-08-07",
                                          "gpt-5-nano-2025-08-07",
                                          "gpt-3.5-turbo-0125",
                                          "gpt-4-1106-preview",
                                          "gpt-4.5-preview-2025-02-27",
                                          "gpt-4o",
                                          "gpt-4o-mini",
                                          "gpt-4.1-2025-04-14",
                                          "gpt-4.1-mini-2025-04-14",
                                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                          "llama3-8b-8192",
                                          "llama3-70b-8192",
                                          "llama-3.1-8b-instant",
                                          "llama-3.1-70b-versatile",
                                          "llama-3.2-90b-text-preview",
                                          "llama-3.2-11b-text-preview",
                                          "llama-3.3-70b-versatile",
                                          "meta-llama/llama-4-scout-17b-16e-instruct",
                                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                                          "mixtral-8x7b-32768",
                                          "gemma-7b-it",
                                          "gemma2-9b-it",
                                          "claude-opus-4-20250514",
                                          "claude-sonnet-4-20250514",
                                          "claude-3-5-sonnet-20240620",
                                          "claude-3-5-sonnet-20241022",
                                          "claude-3-opus-20240229",
                                          "claude-3-sonnet-20240229",
                                          "claude-3-haiku-20240307",
                                          "claude-3-5-haiku-20241022",
                                          "claude-3-7-sonnet-20250219",
                                          "gemini-1.5-pro",
                                          "gemini-1.5-flash",
                                          "gemini-1.0-pro",
                                          "gemini-2.0-flash-exp",
                                          "gemini-2.0-flash-thinking-exp-1219",
                                          "gemini-2.5-pro",
                                          "gemini-2.5-pro-exp-03-25",
                                          "gemini-2.5-pro-preview-03-25",
                                          "gemini-2.5-flash-preview-05-20",
                                          "gemini-2.5-flash",
                                          "gpt-4-32k",
                                          "gpt-4",
                                          "gpt-3.5-turbo-16k",
                                          "gpt-3.5-turbo",
                                          "deepseek-chat",
                                          "deepseek-r1-distill-llama-70b",
                                          "grok-2-latest",
                                          "grok-3",
                                          "grok-3-mini",
                                          "grok-3-fast",
                                          "grok-4-0709",
                                          "qwen-max-latest",
                                          "qwen-plus-latest",
                                          "qwen-turbo-latest",
                                          "custom-llm",
                                          "models/gemini-2.5-pro-preview-03-25",
                                          "azure-eu-gpt-4o",
                                          "azure-na-gpt-4o"
                                        ]
                                      },
                                      "temperature": {
                                        "type": "number",
                                        "description": "The temperature of the LLM"
                                      },
                                      "maxTokens": {
                                        "type": "number",
                                        "description": "The max tokens of the LLM"
                                      },
                                      "customModelId": {
                                        "type": "string",
                                        "description": "The custom model id of the LLM"
                                      },
                                      "serverUrl": {
                                        "type": "string",
                                        "description": "The server url of the LLM"
                                      },
                                      "apiKey": {
                                        "type": "string",
                                        "description": "The api key of the LLM"
                                      }
                                    },
                                    "required": [
                                      "modelId",
                                      "temperature",
                                      "maxTokens"
                                    ],
                                    "additionalProperties": false
                                  },
                                  "backchannelOnChoosingNodes": {
                                    "type": "boolean",
                                    "description": "If true, the LLM will say uha/i see before choosing a node."
                                  },
                                  "enableUiEngine": {
                                    "type": "boolean",
                                    "description": "If true, the LLM will be able to show buttons, cards, images on text channels only."
                                  },
                                  "fallbackModelIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    }
                                  },
                                  "silenceDetection": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether to enable the silence detection feature which will insert filler phrases during long periods of silence"
                                      },
                                      "timeoutSeconds": {
                                        "type": "number",
                                        "default": 60,
                                        "description": "Number of seconds of silence before triggering a filler phrase"
                                      },
                                      "endCallAfterNPhrases": {
                                        "type": "number",
                                        "default": 1,
                                        "description": "Number of filler phrases utterances to say before ending the call if 0 it will end the call instantly after reching the timeout."
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "startCallPhrases": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  },
                                  "fillerWordsOnToolUsage": {
                                    "type": "boolean",
                                    "description": "If true, the LLM will say filler words on tool usage, like '1 moment', 'be right back', 'you know', etc."
                                  },
                                  "smartEndpointing": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": { "type": "boolean" },
                                      "waitSeconds": { "type": "number" },
                                      "onPunctuationSeconds": {
                                        "type": "number"
                                      },
                                      "onNoPunctuationSeconds": {
                                        "type": "number"
                                      },
                                      "onNumberSeconds": { "type": "number" }
                                    },
                                    "additionalProperties": false
                                  },
                                  "stopSpeakPlan": {
                                    "type": "object",
                                    "properties": {
                                      "minWords": {
                                        "type": "number",
                                        "description": "The minimum words to speak from the user for the AI to be interrupted and stop talking ."
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "callTimeoutSeconds": {
                                    "type": "number",
                                    "description": "The timeout for the call in seconds."
                                  },
                                  "enableEndcallTool": {
                                    "type": "boolean",
                                    "description": "Whether to enable endcall tool."
                                  },
                                  "voiceSpecific": {
                                    "type": "object",
                                    "properties": {
                                      "minCharacters": {
                                        "type": "number",
                                        "description": "The minimum number of characters to init the speech gen to generate audio for, the more the higher the latency will be, default is 5"
                                      },
                                      "maxLengthWithoutPunctuation": {
                                        "type": "number",
                                        "description": "The maximum length of the string without punctuation to init the speech gen to generate audio for, the more the higher the latency will be, default is 100"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "enabledGlobalTools": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "enum": ["handoffHumanDashboardTool"]
                                    },
                                    "description": "The global tools that will be enabled for the LLM."
                                  },
                                  "defaultToolOverrides": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "object",
                                      "properties": {
                                        "description": {
                                          "type": "string",
                                          "nullable": true
                                        },
                                        "fields": {
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "string",
                                                  "number",
                                                  "boolean"
                                                ]
                                              },
                                              "description": {
                                                "type": "string"
                                              }
                                            },
                                            "additionalProperties": false
                                          },
                                          "nullable": true
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "description": "Overrides for default system tools configuration."
                                  }
                                },
                                "additionalProperties": false,
                                "description": "Global options for the nodes setup, text/voice."
                              },
                              "id": { "type": "string" },
                              "enableFallback": {
                                "type": "boolean",
                                "description": "Enable fallback for the agent llm model."
                              },
                              "fallbackSettings": {
                                "type": "object",
                                "properties": {
                                  "model": {
                                    "type": "string",
                                    "enum": [
                                      "gpt-5-chat-latest",
                                      "gpt-5-2025-08-07",
                                      "gpt-5-mini-2025-08-07",
                                      "gpt-5-nano-2025-08-07",
                                      "gpt-3.5-turbo-0125",
                                      "gpt-4-1106-preview",
                                      "gpt-4.5-preview-2025-02-27",
                                      "gpt-4o",
                                      "gpt-4o-mini",
                                      "gpt-4.1-2025-04-14",
                                      "gpt-4.1-mini-2025-04-14",
                                      "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                      "llama3-8b-8192",
                                      "llama3-70b-8192",
                                      "llama-3.1-8b-instant",
                                      "llama-3.1-70b-versatile",
                                      "llama-3.2-90b-text-preview",
                                      "llama-3.2-11b-text-preview",
                                      "llama-3.3-70b-versatile",
                                      "meta-llama/llama-4-scout-17b-16e-instruct",
                                      "meta-llama/llama-4-maverick-17b-128e-instruct",
                                      "mixtral-8x7b-32768",
                                      "gemma-7b-it",
                                      "gemma2-9b-it",
                                      "claude-opus-4-20250514",
                                      "claude-sonnet-4-20250514",
                                      "claude-3-5-sonnet-20240620",
                                      "claude-3-5-sonnet-20241022",
                                      "claude-3-opus-20240229",
                                      "claude-3-sonnet-20240229",
                                      "claude-3-haiku-20240307",
                                      "claude-3-5-haiku-20241022",
                                      "claude-3-7-sonnet-20250219",
                                      "gemini-1.5-pro",
                                      "gemini-1.5-flash",
                                      "gemini-1.0-pro",
                                      "gemini-2.0-flash-exp",
                                      "gemini-2.0-flash-thinking-exp-1219",
                                      "gemini-2.5-pro",
                                      "gemini-2.5-pro-exp-03-25",
                                      "gemini-2.5-pro-preview-03-25",
                                      "gemini-2.5-flash-preview-05-20",
                                      "gemini-2.5-flash",
                                      "gpt-4-32k",
                                      "gpt-4",
                                      "gpt-3.5-turbo-16k",
                                      "gpt-3.5-turbo",
                                      "deepseek-chat",
                                      "deepseek-r1-distill-llama-70b",
                                      "grok-2-latest",
                                      "grok-3",
                                      "grok-3-mini",
                                      "grok-3-fast",
                                      "grok-4-0709",
                                      "qwen-max-latest",
                                      "qwen-plus-latest",
                                      "qwen-turbo-latest",
                                      "custom-llm",
                                      "models/gemini-2.5-pro-preview-03-25",
                                      "azure-eu-gpt-4o",
                                      "azure-na-gpt-4o"
                                    ],
                                    "description": "The model to use for fallback."
                                  },
                                  "creditThreshold": {
                                    "type": "number",
                                    "description": "The credit threshold for fallback."
                                  }
                                },
                                "additionalProperties": false,
                                "description": "Fallback settings for the agent llm model."
                              },
                              "marketplace": {
                                "type": "object",
                                "properties": {
                                  "enabled": {
                                    "type": "boolean",
                                    "description": "Whether to show the agent in marketplace or not."
                                  },
                                  "priceUSD": {
                                    "type": "number",
                                    "description": "The price for the agent, default is 0/free"
                                  }
                                },
                                "additionalProperties": false,
                                "description": "Marketplace settings for the agent."
                              },
                              "disableRating": {
                                "type": "boolean",
                                "description": "Whether to disable the chat end rating feature."
                              },
                              "chatEndMessage": {
                                "type": "string",
                                "description": "The message to show when the chat ends."
                              },
                              "aiIntroductionMessage": {
                                "type": "string",
                                "description": "The message to show when the user starts the chat on metachannels."
                              },
                              "enableAIIntroductionMessage": {
                                "type": "boolean",
                                "description": "Whether to enable the AI introduction message or not."
                              },
                              "deployed": {
                                "type": "boolean",
                                "description": "Whether the agent is deployed or not."
                              },
                              "captureIGStories": {
                                "type": "boolean",
                                "description": "Whether to capture instagram stories or not."
                              },
                              "gdprCompliance": {
                                "type": "boolean",
                                "description": "Whether to comply with GDPR or not."
                              },
                              "disableFileUpload": { "type": "boolean" },
                              "buttonVariant": {
                                "type": "string",
                                "enum": [
                                  "custom",
                                  "solid",
                                  "bordered",
                                  "light",
                                  "flat",
                                  "faded",
                                  "shadow",
                                  "ghost"
                                ],
                                "description": "The variant of the button. Custom is the default original styling."
                              },
                              "inputVariant": {
                                "type": "string",
                                "enum": [
                                  "custom",
                                  "flat",
                                  "bordered",
                                  "faded",
                                  "underlined"
                                ],
                                "description": "The variant of the input. Custom is the default original styling."
                              },
                              "privacyDisclaimer": {
                                "type": "object",
                                "properties": {
                                  "enabled": {
                                    "type": "boolean",
                                    "description": "Whether to show privacy disclaimer before user interaction"
                                  },
                                  "text": {
                                    "type": "string",
                                    "description": "The privacy disclaimer text to display to users"
                                  },
                                  "privacyPolicyUrl": {
                                    "type": "string",
                                    "description": "URL to the privacy policy page"
                                  },
                                  "acceptButtonLabel": {
                                    "type": "string",
                                    "description": "Label for the accept/proceed button"
                                  },
                                  "privacyPolicyButtonLabel": {
                                    "type": "string",
                                    "description": "Label for the privacy policy link button"
                                  }
                                },
                                "additionalProperties": false,
                                "description": "Privacy disclaimer configuration for the agent"
                              },
                              "leadCollectionRules": {
                                "type": "object",
                                "properties": {
                                  "enabled": {
                                    "type": "boolean",
                                    "description": "Whether to use custom lead collection rules. If false or not set, uses default behavior (collect when email, phone_number, or phone is present)"
                                  },
                                  "rules": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "variables": {
                                          "type": "array",
                                          "items": { "type": "string" },
                                          "description": "Array of variable names that must ALL be present for this rule to match (AND condition)"
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "Optional description of what this rule captures"
                                        }
                                      },
                                      "required": ["variables"],
                                      "additionalProperties": false
                                    },
                                    "description": "Array of rule sets. A lead is collected if it matches ANY rule set (OR condition between rules). Each rule requires ALL its variables to be present (AND condition within a rule)."
                                  }
                                },
                                "additionalProperties": false,
                                "description": "Custom lead collection rules. Allows defining which variable combinations should trigger lead capture. If not set, defaults to collecting leads when email, phone_number, or phone is present."
                              }
                            },
                            "additionalProperties": false
                          },
                          "workspaceData": {},
                          "twilioAccountSid": { "type": "string" },
                          "twilioAuthToken": { "type": "string" },
                          "assignedGlobalPrompts": {
                            "type": "array",
                            "items": { "type": "string" }
                          }
                        },
                        "additionalProperties": false
                      },
                      "overrideInitialPrompt": { "type": "boolean" },
                      "messagesHistory": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "role": {
                              "type": "string",
                              "enum": ["user", "assistant", "system", "tool"]
                            },
                            "content": { "type": "string" },
                            "name": { "type": "string" },
                            "tool_call_id": { "type": "string" },
                            "tool_name": { "type": "string" },
                            "tool_calls": {}
                          },
                          "required": ["role", "content"],
                          "additionalProperties": false
                        }
                      },
                      "agentOverrides": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "**Title**: The title of the agent."
                          },
                          "description": {
                            "type": "string",
                            "description": "**Description**: A brief description of the agent."
                          },
                          "theme": {
                            "type": "string",
                            "description": "**Theme**: The visual theme of the agent, e.g., 'blue-light' or 'custom-blue-dark'."
                          },
                          "voiceConfig": {
                            "type": "object",
                            "properties": {
                              "transcriber": {
                                "type": "object",
                                "properties": {
                                  "speechConfig": {
                                    "type": "object",
                                    "properties": {
                                      "format": { "type": "string" },
                                      "sampleRate": { "type": "number" }
                                    },
                                    "additionalProperties": false
                                  },
                                  "modelId": { "type": "string" },
                                  "patienceFactor": { "type": "number" },
                                  "language": { "type": "string" },
                                  "provider": {
                                    "type": "string",
                                    "enum": [
                                      "deepgram",
                                      "gladia",
                                      "assemblyai",
                                      "speechmatics",
                                      "google-cloud-speech",
                                      "google-live-transcription"
                                    ]
                                  },
                                  "randomOptions": {},
                                  "internal": {
                                    "type": "object",
                                    "properties": {
                                      "inputAudioStream": {},
                                      "debug": { "type": "boolean" }
                                    },
                                    "additionalProperties": false
                                  },
                                  "apiKey": { "type": "string" },
                                  "platformSpecific": {
                                    "type": "object",
                                    "properties": {
                                      "deepgram": {
                                        "type": "object",
                                        "properties": {
                                          "keywords": {
                                            "type": "array",
                                            "items": { "type": "string" },
                                            "description": "Keywords to focus on in the transcription."
                                          },
                                          "language": { "type": "string" },
                                          "smart_format": { "type": "boolean" },
                                          "model": { "type": "string" },
                                          "interim_results": {
                                            "type": "boolean"
                                          },
                                          "endpointing": { "type": "number" },
                                          "no_delay": { "type": "boolean" },
                                          "autoLanguageDetection": {
                                            "type": "boolean"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "assemblyai": {
                                        "type": "object",
                                        "properties": {
                                          "modelId": { "type": "string" }
                                        },
                                        "required": ["modelId"],
                                        "additionalProperties": false
                                      },
                                      "googleCloud": {
                                        "type": "object",
                                        "properties": {
                                          "keywords": {
                                            "type": "array",
                                            "items": { "type": "string" },
                                            "description": "Keywords or phrases to focus on in the transcription."
                                          },
                                          "model": {
                                            "type": "string",
                                            "description": "The Google Cloud Speech model to use."
                                          },
                                          "languageCode": {
                                            "type": "string",
                                            "description": "The language code for transcription."
                                          },
                                          "enableAutomaticPunctuation": {
                                            "type": "boolean",
                                            "description": "Enable automatic punctuation."
                                          },
                                          "enableWordTimeOffsets": {
                                            "type": "boolean",
                                            "description": "Enable word time offsets."
                                          },
                                          "maxAlternatives": {
                                            "type": "number",
                                            "description": "Maximum number of recognition alternatives."
                                          },
                                          "profanityFilter": {
                                            "type": "boolean",
                                            "description": "Enable profanity filter."
                                          },
                                          "speechContexts": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "phrases": {
                                                  "type": "array",
                                                  "items": { "type": "string" }
                                                },
                                                "boost": { "type": "number" }
                                              },
                                              "required": ["phrases"],
                                              "additionalProperties": false
                                            },
                                            "description": "Speech contexts for better recognition."
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "utteranceThreshold": { "type": "number" },
                                  "inputVoiceEnhancer": { "type": "boolean" }
                                },
                                "required": ["provider"],
                                "additionalProperties": false,
                                "description": "**Transcriber**: The configuration options for the transcriber provider used by the agent."
                              },
                              "speechGen": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "highAudioQuality": {
                                        "type": "boolean",
                                        "description": "Generate highest quality audio possible, must have pro plan or higher on elevenlabs to enable your own key to work with this option."
                                      },
                                      "provider": {
                                        "type": "string",
                                        "enum": [
                                          "elevenlabs",
                                          "deepgram",
                                          "cartesia",
                                          "playht",
                                          "azure",
                                          "rime-ai",
                                          "openai",
                                          "playai-groq",
                                          "google-cloud",
                                          "google-live"
                                        ],
                                        "description": "Speech providers supported by the app."
                                      },
                                      "modelId": {
                                        "type": "string",
                                        "description": "The model id of the speech gen."
                                      },
                                      "voiceId": {
                                        "type": "string",
                                        "description": "The voice id for the speech service."
                                      },
                                      "apiKey": { "type": "string" },
                                      "region": { "type": "string" },
                                      "backgroundNoise": {
                                        "type": "string",
                                        "enum": [
                                          "restaurant",
                                          "office",
                                          "park",
                                          "street"
                                        ]
                                      },
                                      "punctuationBreaks": {
                                        "type": "array",
                                        "items": { "type": "string" }
                                      },
                                      "platformSpecific": {
                                        "type": "object",
                                        "properties": {
                                          "elevenLabs": {
                                            "type": "object",
                                            "properties": {
                                              "stability": { "type": "number" },
                                              "similarity_boost": {
                                                "type": "number"
                                              },
                                              "use_speaker_boost": {
                                                "type": "boolean"
                                              },
                                              "speed": { "type": "number" },
                                              "style": { "type": "number" }
                                            },
                                            "additionalProperties": false
                                          },
                                          "playht": {
                                            "type": "object",
                                            "properties": {
                                              "voiceId": { "type": "string" }
                                            },
                                            "required": ["voiceId"],
                                            "additionalProperties": false
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "backChannelling": {
                                        "type": "boolean",
                                        "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                      },
                                      "language": { "type": "string" },
                                      "enableLongMessageBackchannelling": {
                                        "type": "boolean",
                                        "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                      },
                                      "backchannelMessages": {
                                        "type": "array",
                                        "items": { "type": "string" }
                                      },
                                      "backchannelInterval": {
                                        "type": "number"
                                      },
                                      "wordsReplacements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "word": { "type": "string" },
                                            "replacement": { "type": "string" }
                                          },
                                          "required": ["word", "replacement"],
                                          "additionalProperties": false
                                        }
                                      }
                                    },
                                    "required": ["provider"]
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "inputTextStream": {},
                                          "audioConfig": {
                                            "type": "object",
                                            "properties": {
                                              "format": { "type": "string" },
                                              "sampleRate": {
                                                "type": "number"
                                              },
                                              "channels": { "type": "number" }
                                            },
                                            "required": [
                                              "format",
                                              "sampleRate",
                                              "channels"
                                            ],
                                            "additionalProperties": false
                                          },
                                          "emitOnComplete": {
                                            "type": "boolean"
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    }
                                  }
                                ],
                                "description": "**Speech Generation**: The configuration options for the speech generation provider used by the agent."
                              },
                              "config": {
                                "type": "object",
                                "properties": {
                                  "recordAudio": { "type": "boolean" },
                                  "backgroundNoise": {
                                    "type": "string",
                                    "enum": [
                                      "restaurant",
                                      "office",
                                      "street",
                                      "none"
                                    ]
                                  },
                                  "enableWebCalling": { "type": "boolean" },
                                  "firstInputChunkUNIXMs": { "type": "number" },
                                  "firstOutputChunkUNIXMs": { "type": "number" }
                                },
                                "required": ["recordAudio"],
                                "additionalProperties": false,
                                "description": "**Call Configuration**: The call configuration settings for the agent."
                              }
                            },
                            "additionalProperties": false
                          },
                          "light": {
                            "type": "boolean",
                            "description": "Whether to enable light mode for the agent. If set to true, the agent will not retain previous chat interactions for privacy reasons."
                          },
                          "enableVertex": {
                            "type": "boolean",
                            "description": "Whether to enable Vertex AI for the agent."
                          },
                          "autoOpenWidget": {
                            "type": "boolean",
                            "description": "Whether to auto-open the widget when the agent is loaded."
                          },
                          "createdAtUNIX": {
                            "type": "number",
                            "description": "The timestamp when the agent was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                          },
                          "disabled": {
                            "type": "boolean",
                            "description": "Indicates whether the agent is disabled. If set to true, the agent will not be active."
                          },
                          "vectorDb": {
                            "description": "Specifies the vector database configuration for the agent. This database is used for handling vectorized data or embeddings."
                          },
                          "agentPlatform": {
                            "type": "string",
                            "description": "Specifies the platform on which the agent operates, such as web, mobile, or other environments."
                          },
                          "storageID": {
                            "type": "string",
                            "description": "The identifier for the agent's storage configuration."
                          },
                          "VF_DIALOGUE_API_KEY": {
                            "type": "string",
                            "description": "API key for VF dialogue integration, enabling the agent to communicate with external systems."
                          },
                          "VF_PROJECT_API_KEY": {
                            "type": "string",
                            "description": "API key associated with the VF project to authenticate and enable specific functionalities."
                          },
                          "VF_PROJECT_ID": {
                            "type": "string",
                            "description": "The unique identifier of the VF project linked to the agent."
                          },
                          "VF_KB_API_KEY": {
                            "type": "string",
                            "description": "API key for accessing the VF knowledge base, enabling advanced knowledge retrieval capabilities."
                          },
                          "roundedImageURL": {
                            "type": "string",
                            "description": "URL pointing to the rounded image asset used to visually represent the agent."
                          },
                          "rectangeImageURL": {
                            "type": "string",
                            "description": "URL pointing to the rectangular image asset for the agent's branding or display."
                          },
                          "messageDelayMS": {
                            "type": "number",
                            "description": "Specifies the delay in milliseconds for the agent to send messages, simulating natural conversation timing."
                          },
                          "scrollAnimation": {
                            "type": "boolean",
                            "description": "Indicates whether scroll animations are enabled for smooth transitions in the chat interface."
                          },
                          "proactiveMessage": {
                            "type": "string",
                            "description": "A predefined message the agent sends proactively to engage users."
                          },
                          "acceptFileUpload": {
                            "type": "boolean",
                            "description": "Determines if the agent accepts file uploads from users as part of the interaction."
                          },
                          "recordChatHistory": {
                            "type": "boolean",
                            "description": "Specifies whether the agent logs chat histories for future reference or analysis."
                          },
                          "chatBgURL": {
                            "type": "string",
                            "description": "URL of the background image used in the chat interface."
                          },
                          "disableSmoothScroll": {
                            "type": "boolean",
                            "description": "Disables smooth scrolling if set to true, potentially improving performance on low-end devices."
                          },
                          "isDeployed": {
                            "type": "boolean",
                            "description": "Indicates whether the agent is currently deployed and operational."
                          },
                          "tokensUsage": {
                            "description": "Tracks the token usage statistics for the agent, typically used in LLM integrations."
                          },
                          "maxTokensUsage": {
                            "description": "Defines the maximum allowable token usage for the agent to prevent overconsumption."
                          },
                          "fontFamily": {
                            "type": "string",
                            "description": "The font family used in the agent's user interface for consistent branding."
                          },
                          "branding": {
                            "type": "string",
                            "description": "Custom branding information or labels associated with the agent."
                          },
                          "customThemeJSONString": {
                            "type": "string",
                            "description": "A JSON string defining a custom theme for the agent's interface."
                          },
                          "autoStartWidget": {
                            "type": "boolean",
                            "description": "Determines if the widget should auto-start upon page load."
                          },
                          "allTimeTriggers": {
                            "type": "number",
                            "description": "The total number of triggers or interactions the agent has handled."
                          },
                          "syncBrowser": {
                            "type": "boolean",
                            "description": "Enables synchronization of settings or states with the browser session."
                          },
                          "delayBeforeSubmit": {
                            "type": "number",
                            "description": "The delay (in milliseconds) before submitting user input to the agent."
                          },
                          "region": {
                            "type": "string",
                            "enum": ["eu", "na"],
                            "description": "Defines the geographical region settings for the agent, such as localization."
                          },
                          "listenForUrlChanges": {
                            "type": "boolean",
                            "description": "Specifies if the agent should monitor and react to changes in the browser URL."
                          },
                          "chatForget": {
                            "type": "boolean",
                            "description": "If enabled, the agent will not retain previous chat interactions for privacy reasons."
                          },
                          "lang": {
                            "type": "string",
                            "description": "Specifies the default language for the agent's interactions and responses."
                          },
                          "enableAudioSupport": {
                            "type": "boolean",
                            "description": "Enables audio features, allowing the agent to process and respond to audio inputs."
                          },
                          "AITranslateTo": {
                            "type": "string",
                            "description": "Defines the target language for AI translation during interactions."
                          },
                          "enableAITranslate": {
                            "type": "boolean",
                            "description": "Activates AI-based translation for multilingual support."
                          },
                          "disableNoReplyListener": {
                            "type": "boolean",
                            "description": "Disables the listener for instances where no reply is detected from the agent."
                          },
                          "disableHumanHandoff": {
                            "type": "boolean",
                            "description": "Prevents the agent from escalating interactions to a human operator."
                          },
                          "alwaysShowHandoff": {
                            "type": "boolean",
                            "description": "Ensures the handoff option is always visible, regardless of agent status."
                          },
                          "manualControl": {
                            "type": "boolean",
                            "description": "Allows manual control over specific agent functionalities."
                          },
                          "enableVGHandoff": {
                            "type": "boolean",
                            "description": "Activates VG-specific handoff mechanisms for the agent."
                          },
                          "enableGeoAnalytics": {
                            "type": "boolean",
                            "description": "Enables geographic analytics to track user interactions based on location."
                          },
                          "hideVoiceflowAnalytics": {
                            "type": "boolean",
                            "description": "Hides Voiceflow-specific analytics including intents, conversation flow metrics, and rating analytics."
                          },
                          "hideCallAnalytics": {
                            "type": "boolean",
                            "description": "Hides voice call analytics including duration, latency, cost breakdown, call counts, and call end reasons."
                          },
                          "hideConversationMetrics": {
                            "type": "boolean",
                            "description": "Hides conversation metrics including user retention, conversation length, time retention, and engagement metrics."
                          },
                          "hideCustomAnalytics": {
                            "type": "boolean",
                            "description": "Hides user-created custom charts and metrics from the analytics dashboard."
                          },
                          "hideVapiAnalytics": {
                            "type": "boolean",
                            "description": "Hides VAPI-specific analytics including cost tracking and voice-related metrics."
                          },
                          "hideFunnelAnalytics": {
                            "type": "boolean",
                            "description": "Hides the user engagement funnel chart that tracks progression from widget views to high engagement."
                          },
                          "fixedHandoffPopup": {
                            "type": "boolean",
                            "description": "Ensures the handoff popup remains fixed in the interface."
                          },
                          "buttonsLayout": {
                            "type": "string",
                            "enum": ["horizontal", "vertical", "in-footer"],
                            "description": "Defines the layout and style of buttons in the agent's interface."
                          },
                          "ADVANCED_customCSS": {
                            "type": "string",
                            "description": "Specifies advanced custom CSS for overriding the default styling of the agent's interface."
                          },
                          "messagesLimit": {
                            "type": "number",
                            "description": "Sets a cap on the number of messages the agent can exchange in a single session."
                          },
                          "whatsappToken": {
                            "type": "string",
                            "description": "Token for authenticating and integrating with WhatsApp services."
                          },
                          "whatsappNumberId": {
                            "type": "string",
                            "description": "The ID associated with the WhatsApp number used by the agent."
                          },
                          "whatsappBusniessId": {
                            "type": "string",
                            "description": "The business ID for WhatsApp integration, enabling enterprise-level features."
                          },
                          "waTestNumber": {
                            "type": "string",
                            "description": "A test number used during WhatsApp integration setup or testing."
                          },
                          "waVerifyPassed": {
                            "type": "boolean",
                            "description": "Indicates if WhatsApp verification was successfully completed."
                          },
                          "waTestPassed": {
                            "type": "boolean",
                            "description": "Indicates if the WhatsApp integration test was successful."
                          },
                          "webhookUrl": {
                            "type": "string",
                            "description": "The URL where the agent sends webhook events to external systems."
                          },
                          "gcloudPrivateKey": {
                            "type": "string",
                            "description": "Private key for Google Cloud services integration."
                          },
                          "gcloudClientEmail": {
                            "type": "string",
                            "description": "Client email for Google Cloud authentication."
                          },
                          "smartInit": {
                            "type": "boolean",
                            "description": "Activates smart initialization features for the agent."
                          },
                          "UIhandoffTitle": {
                            "type": "string",
                            "description": "Title displayed during UI handoff interactions."
                          },
                          "UIhandoffSubtitle": {
                            "type": "string",
                            "description": "Subtitle displayed during UI handoff interactions."
                          },
                          "igVerified": {
                            "type": "boolean",
                            "description": "Indicates if the agent's Instagram integration is verified."
                          },
                          "igAccessToken": {
                            "type": "string",
                            "description": "Access token for authenticating Instagram API requests."
                          },
                          "showHandoffEvenIfOffline": {
                            "type": "boolean",
                            "description": "Displays the handoff option even if the agent is offline."
                          },
                          "persistHandoffOnRefresh": {
                            "type": "boolean",
                            "description": "Maintains handoff state when users refresh or close their browser tabs."
                          },
                          "blockInputDuringHandoffRequest": {
                            "type": "boolean",
                            "description": "Blocks chat input when a user requests human handoff but no human has been assigned yet. Only applies to VF agents."
                          },
                          "customButtonJSON_STRING": {
                            "type": "string",
                            "description": "JSON string defining custom buttons for the agent's interface."
                          },
                          "vg_initPrompt": {
                            "type": "string",
                            "description": "The initial prompt displayed or used by the VF system."
                          },
                          "vg_prompt": {
                            "type": "string",
                            "description": "The main prompt template used for generating responses."
                          },
                          "vg_initMessages": {
                            "type": "array",
                            "items": { "type": "string" },
                            "description": "Initial messages loaded for the agent's conversation flow."
                          },
                          "vg_systemPrompt": {
                            "type": "string",
                            "description": "System-level prompt defining the agent's behavior and rules."
                          },
                          "vg_temperature": {
                            "type": "number",
                            "description": "Defines the temperature setting for response variability in the VF model."
                          },
                          "vg_defaultModel": {
                            "type": "string",
                            "enum": [
                              "gpt-5-chat-latest",
                              "gpt-5-2025-08-07",
                              "gpt-5-mini-2025-08-07",
                              "gpt-5-nano-2025-08-07",
                              "gpt-3.5-turbo-0125",
                              "gpt-4-1106-preview",
                              "gpt-4.5-preview-2025-02-27",
                              "gpt-4o",
                              "gpt-4o-mini",
                              "gpt-4.1-2025-04-14",
                              "gpt-4.1-mini-2025-04-14",
                              "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                              "llama3-8b-8192",
                              "llama3-70b-8192",
                              "llama-3.1-8b-instant",
                              "llama-3.1-70b-versatile",
                              "llama-3.2-90b-text-preview",
                              "llama-3.2-11b-text-preview",
                              "llama-3.3-70b-versatile",
                              "meta-llama/llama-4-scout-17b-16e-instruct",
                              "meta-llama/llama-4-maverick-17b-128e-instruct",
                              "mixtral-8x7b-32768",
                              "gemma-7b-it",
                              "gemma2-9b-it",
                              "claude-opus-4-20250514",
                              "claude-sonnet-4-20250514",
                              "claude-3-5-sonnet-20240620",
                              "claude-3-5-sonnet-20241022",
                              "claude-3-opus-20240229",
                              "claude-3-sonnet-20240229",
                              "claude-3-haiku-20240307",
                              "claude-3-5-haiku-20241022",
                              "claude-3-7-sonnet-20250219",
                              "gemini-1.5-pro",
                              "gemini-1.5-flash",
                              "gemini-1.0-pro",
                              "gemini-2.0-flash-exp",
                              "gemini-2.0-flash-thinking-exp-1219",
                              "gemini-2.5-pro",
                              "gemini-2.5-pro-exp-03-25",
                              "gemini-2.5-pro-preview-03-25",
                              "gemini-2.5-flash-preview-05-20",
                              "gemini-2.5-flash",
                              "gpt-4-32k",
                              "gpt-4",
                              "gpt-3.5-turbo-16k",
                              "gpt-3.5-turbo",
                              "deepseek-chat",
                              "deepseek-r1-distill-llama-70b",
                              "grok-2-latest",
                              "grok-3",
                              "grok-3-mini",
                              "grok-3-fast",
                              "grok-4-0709",
                              "qwen-max-latest",
                              "qwen-plus-latest",
                              "qwen-turbo-latest",
                              "custom-llm",
                              "models/gemini-2.5-pro-preview-03-25",
                              "azure-eu-gpt-4o",
                              "azure-na-gpt-4o"
                            ],
                            "description": "Specifies the default LLM model used by the agent for language processing."
                          },
                          "vg_maxTokens": {
                            "type": "number",
                            "description": "Sets the maximum token limit for generating responses."
                          },
                          "vg_kbDefaultDimension": {
                            "type": "number",
                            "description": "Default dimensionality for the agent's knowledge base embeddings."
                          },
                          "vg_kbTopChunks": {
                            "type": "number",
                            "description": "The number of top chunks retrieved from the knowledge base during a query."
                          },
                          "SECRET_API_KEY": {
                            "type": "string",
                            "description": "The secret API key for secure integration with VF services."
                          },
                          "vg_kbCharCount": {
                            "type": "number",
                            "description": "Tracks the total character count of the agent's knowledge base."
                          },
                          "vg_kbDocsNum": {
                            "type": "number",
                            "description": "The total number of documents stored in the agent's knowledge base."
                          },
                          "vg_enableUIEngine": {
                            "type": "boolean",
                            "description": "Activates the UI engine for enhanced interface capabilities."
                          },
                          "vg_enableAboutContext": {
                            "type": "boolean",
                            "description": "Enables contextual information about the agent for users."
                          },
                          "vg_kb_llm": {
                            "type": "object",
                            "properties": {
                              "searchMethod": {
                                "anyOf": [
                                  { "type": "string", "enum": ["smart"] },
                                  { "type": "string", "enum": ["simple"] }
                                ]
                              },
                              "searchPrompt": { "type": "string" },
                              "modelId": {
                                "type": "string",
                                "enum": [
                                  "gpt-5-chat-latest",
                                  "gpt-5-2025-08-07",
                                  "gpt-5-mini-2025-08-07",
                                  "gpt-5-nano-2025-08-07",
                                  "gpt-3.5-turbo-0125",
                                  "gpt-4-1106-preview",
                                  "gpt-4.5-preview-2025-02-27",
                                  "gpt-4o",
                                  "gpt-4o-mini",
                                  "gpt-4.1-2025-04-14",
                                  "gpt-4.1-mini-2025-04-14",
                                  "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                  "llama3-8b-8192",
                                  "llama3-70b-8192",
                                  "llama-3.1-8b-instant",
                                  "llama-3.1-70b-versatile",
                                  "llama-3.2-90b-text-preview",
                                  "llama-3.2-11b-text-preview",
                                  "llama-3.3-70b-versatile",
                                  "meta-llama/llama-4-scout-17b-16e-instruct",
                                  "meta-llama/llama-4-maverick-17b-128e-instruct",
                                  "mixtral-8x7b-32768",
                                  "gemma-7b-it",
                                  "gemma2-9b-it",
                                  "claude-opus-4-20250514",
                                  "claude-sonnet-4-20250514",
                                  "claude-3-5-sonnet-20240620",
                                  "claude-3-5-sonnet-20241022",
                                  "claude-3-opus-20240229",
                                  "claude-3-sonnet-20240229",
                                  "claude-3-haiku-20240307",
                                  "claude-3-5-haiku-20241022",
                                  "claude-3-7-sonnet-20250219",
                                  "gemini-1.5-pro",
                                  "gemini-1.5-flash",
                                  "gemini-1.0-pro",
                                  "gemini-2.0-flash-exp",
                                  "gemini-2.0-flash-thinking-exp-1219",
                                  "gemini-2.5-pro",
                                  "gemini-2.5-pro-exp-03-25",
                                  "gemini-2.5-pro-preview-03-25",
                                  "gemini-2.5-flash-preview-05-20",
                                  "gemini-2.5-flash",
                                  "gpt-4-32k",
                                  "gpt-4",
                                  "gpt-3.5-turbo-16k",
                                  "gpt-3.5-turbo",
                                  "deepseek-chat",
                                  "deepseek-r1-distill-llama-70b",
                                  "grok-2-latest",
                                  "grok-3",
                                  "grok-3-mini",
                                  "grok-3-fast",
                                  "grok-4-0709",
                                  "qwen-max-latest",
                                  "qwen-plus-latest",
                                  "qwen-turbo-latest",
                                  "custom-llm",
                                  "models/gemini-2.5-pro-preview-03-25",
                                  "azure-eu-gpt-4o",
                                  "azure-na-gpt-4o"
                                ]
                              },
                              "temprature": { "type": "number" },
                              "maxTokens": { "type": "number" }
                            },
                            "additionalProperties": false,
                            "description": "Configuration for LLM-based knowledge base queries, including search methods and model parameters."
                          },
                          "vg_enableUIEngineForms": {
                            "type": "boolean",
                            "description": "Enables form and input components in the UI engine for web channel."
                          },
                          "vg_max_messages_history": {
                            "type": "number",
                            "description": "Maximum number of messages retained in the chat history."
                          },
                          "ifKnowsThreshold": {
                            "type": "number",
                            "description": "Confidence threshold for determining if the agent 'knows' an answer."
                          },
                          "avatarImageUrl": {
                            "type": "string",
                            "description": "URL of the avatar image representing the agent."
                          },
                          "headerImageUrl": {
                            "type": "string",
                            "description": "URL of the header image displayed in the chat interface."
                          },
                          "bannerImageUrl": {
                            "type": "string",
                            "description": "URL of the banner image used in the agent's branding."
                          },
                          "soundEffectUrl": {
                            "type": "string",
                            "description": "URL of the sound effect file used for agent interactions."
                          },
                          "soundEffectEnabled": {
                            "type": "boolean",
                            "description": "Enables or disables sound effects for the agent."
                          },
                          "enableQuickFileUpload": {
                            "type": "boolean",
                            "description": "Allows quick file uploads during chat interactions."
                          },
                          "instagramOptions": {
                            "type": "object",
                            "properties": {
                              "pageId": { "type": "string" },
                              "accessToken": { "type": "string" }
                            },
                            "additionalProperties": false
                          },
                          "translateUserResponse": { "type": "boolean" },
                          "starred": { "type": "boolean" },
                          "flowise": {
                            "type": "object",
                            "properties": {
                              "webhookUrl": { "type": "string" },
                              "webhookSecret": { "type": "string" }
                            },
                            "additionalProperties": false
                          },
                          "vfSettings": {
                            "type": "object",
                            "properties": {
                              "enableIgnoreUrlPaths": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "vapiConfig": {
                            "type": "object",
                            "properties": {
                              "syncKbOnSave": { "type": "boolean" },
                              "PUBLIC_API_KEY": { "type": "string" },
                              "PRIVATE_API_KEY": { "type": "string" },
                              "enableVapiOnWeb": { "type": "boolean" },
                              "overrideWithVG": { "type": "boolean" },
                              "promptOnWeb": { "type": "boolean" },
                              "maxCostMonthly": { "type": "number" },
                              "maxMinutesMonthly": { "type": "number" },
                              "useVfProject": { "type": "boolean" },
                              "syncTools": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "vgOptions": {
                            "type": "object",
                            "properties": {
                              "isLlmStudio": { "type": "boolean" },
                              "showSources": { "type": "boolean" },
                              "lightUiEngine": { "type": "boolean" },
                              "legacyKb": { "type": "boolean" },
                              "maxChunkSize": { "type": "number" },
                              "handoffTimeout": { "type": "number" }
                            },
                            "additionalProperties": false
                          },
                          "ui": {
                            "type": "object",
                            "properties": {
                              "showWhatsappButtonOnWeb": {
                                "type": "boolean",
                                "description": "Show little whatsapp button on web if it's connected."
                              },
                              "bgImageVisible": { "type": "boolean" },
                              "widgetType": {
                                "anyOf": [
                                  { "type": "string", "enum": ["direct-chat"] },
                                  { "type": "string", "enum": ["tabs"] }
                                ]
                              },
                              "enableFixedFeedbackBtns": { "type": "boolean" },
                              "switchConversationSides": { "type": "boolean" },
                              "switchDashboardOnly": { "type": "boolean" },
                              "voice": {
                                "type": "object",
                                "properties": {
                                  "question": { "type": "string" },
                                  "continueBtnLabel": { "type": "string" },
                                  "dismissBtnLabel": { "type": "string" },
                                  "disableVoiceOrb": { "type": "boolean" }
                                },
                                "required": [
                                  "question",
                                  "continueBtnLabel",
                                  "dismissBtnLabel"
                                ],
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "assignedToolsIds": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "tools": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "isDefault": {
                                  "type": "boolean",
                                  "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                                },
                                "method": {
                                  "type": "string",
                                  "enum": ["GET", "POST", "PUT", "PATCH"],
                                  "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                                },
                                "id": {
                                  "type": "string",
                                  "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the tool, providing a human-readable identifier for display purposes."
                                },
                                "description": {
                                  "type": "string",
                                  "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                                },
                                "serverUrl": {
                                  "type": "string",
                                  "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                                },
                                "serverUrlSecret": {
                                  "type": "string",
                                  "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                                },
                                "createdAt": {
                                  "type": "string",
                                  "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                                },
                                "updatedAt": {
                                  "type": "string",
                                  "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                                },
                                "disabled": {
                                  "type": "boolean",
                                  "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                                },
                                "isVapiTool": {
                                  "type": "boolean",
                                  "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                                },
                                "vapiId": {
                                  "type": "string",
                                  "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                                },
                                "isGlobal": {
                                  "type": "boolean",
                                  "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                                },
                                "variablesIds": {
                                  "type": "array",
                                  "items": { "type": "string" },
                                  "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                                },
                                "agentId": {
                                  "type": "string",
                                  "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                                },
                                "userId": {
                                  "type": "string",
                                  "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                                },
                                "backchannellingPhrases": {
                                  "type": "array",
                                  "items": { "type": "string" },
                                  "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                                },
                                "toolsSettings": {},
                                "fields": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                      },
                                      "in": {
                                        "type": "string",
                                        "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                      },
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "string",
                                          "number",
                                          "boolean",
                                          "system"
                                        ],
                                        "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                      },
                                      "value": {
                                        "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                      },
                                      "defaultValue": {
                                        "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                      },
                                      "key": {
                                        "type": "string",
                                        "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                      },
                                      "required": {
                                        "type": "boolean",
                                        "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                      },
                                      "reusable": {
                                        "type": "boolean",
                                        "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                      },
                                      "isEnv": {
                                        "type": "boolean",
                                        "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                      },
                                      "isSystem": {
                                        "type": "boolean",
                                        "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                      },
                                      "isGlobal": {
                                        "type": "boolean",
                                        "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                      },
                                      "agentId": {
                                        "type": "string",
                                        "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                      },
                                      "userId": {
                                        "type": "string",
                                        "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                      }
                                    },
                                    "required": ["id"],
                                    "additionalProperties": false
                                  }
                                },
                                "channels": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "web-chat",
                                      "whatsapp",
                                      "instagram",
                                      "telegram",
                                      "discord",
                                      "gb-chat",
                                      "vapi",
                                      "messenger",
                                      "voice",
                                      "telephony"
                                    ]
                                  },
                                  "description": "The channels that the tool can be used on."
                                }
                              },
                              "required": ["id", "name", "description"],
                              "additionalProperties": false
                            }
                          },
                          "internal": {
                            "type": "object",
                            "properties": {
                              "accountCreationConfig": {
                                "type": "string",
                                "enum": ["v2"]
                              },
                              "websocketServer": {
                                "anyOf": [
                                  { "type": "string", "enum": ["edge"] },
                                  { "type": "string", "enum": ["nodejs"] }
                                ]
                              },
                              "setOnResponse": { "type": "boolean" },
                              "enableSetOnLoad": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "disableAutoTranscribeAudio": { "type": "boolean" },
                          "disableTranscriptSharing": { "type": "boolean" },
                          "instaAgentUsername": { "type": "string" },
                          "convoTags": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "vfConfig": {
                            "type": "object",
                            "properties": {
                              "alwaysEnableCardButtons": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "discord": {
                            "type": "object",
                            "properties": {
                              "channelIds": {
                                "type": "array",
                                "items": { "type": "string" }
                              },
                              "webhookUrls": {
                                "type": "array",
                                "items": { "type": "string" }
                              }
                            },
                            "additionalProperties": false
                          },
                          "limits": {
                            "type": "object",
                            "properties": {
                              "maxInteractionsPerUserId": { "type": "number" },
                              "maxAnnualCreditsUsage": { "type": "number" },
                              "maxMonthlyCreditsUsage": { "type": "number" },
                              "maxMessages": {
                                "type": "number",
                                "description": "Maximum number of messages allowed per conversation"
                              },
                              "maxMessagesRetentionDays": {
                                "type": "number",
                                "description": "Retention period in days for messages"
                              }
                            },
                            "additionalProperties": false
                          },
                          "tabs": { "type": "array" },
                          "kbTags": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "kbTagsDataMap": { "type": "array" },
                          "nodes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "string" },
                                "name": { "type": "string" },
                                "description": {
                                  "type": "string",
                                  "description": "A short description of what this node does and when it should be used, specially useful if the node is global or when the LLM detects automatic rerouting."
                                },
                                "instructions": {
                                  "type": "string",
                                  "description": "What should this LLM node do."
                                },
                                "mcpServers": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": { "type": "string" },
                                      "url": { "type": "string" },
                                      "transport": {
                                        "type": "string",
                                        "enum": ["sse", "websocket", "stdio"]
                                      },
                                      "useNodeEventSource": {
                                        "type": "boolean"
                                      },
                                      "reconnect": {
                                        "type": "object",
                                        "properties": {
                                          "enabled": { "type": "boolean" },
                                          "maxAttempts": { "type": "number" },
                                          "delayMs": { "type": "number" }
                                        },
                                        "additionalProperties": false
                                      },
                                      "command": { "type": "string" },
                                      "args": {
                                        "type": "array",
                                        "items": { "type": "string" }
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "voiceInstructions": {
                                  "type": "string",
                                  "description": "The voice instructions for this node, will be used instead of instructions in voice channels if provided."
                                },
                                "isGlobal": {
                                  "type": "boolean",
                                  "description": "If true, this node will be always present for the LLM"
                                },
                                "toolsIds": {
                                  "type": "array",
                                  "items": { "type": "string" },
                                  "description": "The tools that will be available for this node"
                                },
                                "toolsSettings": {
                                  "type": "object",
                                  "properties": {
                                    "googleCalendar": {
                                      "type": "object",
                                      "properties": {
                                        "calendarId": { "type": "string" },
                                        "methods": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "create-event",
                                              "check-availability",
                                              "get-slots",
                                              "delete-event"
                                            ]
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "childrenNodes": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "nodeId": { "type": "string" },
                                      "condition": {
                                        "type": "string",
                                        "description": "The condition that will be checked to determine if the node should advanced to the selected node id or not or should simply loop in the current node."
                                      }
                                    },
                                    "required": ["nodeId", "condition"],
                                    "additionalProperties": false
                                  },
                                  "description": "The outputs of this node which the node after finishing will choose from to either advance or to keep looping in this node till it caputures or reaches one of the mentioned routers."
                                },
                                "llmConfig": {
                                  "type": "object",
                                  "properties": {
                                    "modelId": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    },
                                    "temperature": {
                                      "type": "number",
                                      "description": "The temperature of the LLM"
                                    },
                                    "maxTokens": {
                                      "type": "number",
                                      "description": "The max tokens of the LLM"
                                    },
                                    "customModelId": {
                                      "type": "string",
                                      "description": "The custom model id of the LLM"
                                    },
                                    "serverUrl": {
                                      "type": "string",
                                      "description": "The server url of the LLM"
                                    },
                                    "apiKey": {
                                      "type": "string",
                                      "description": "The api key of the LLM"
                                    }
                                  },
                                  "required": [
                                    "modelId",
                                    "temperature",
                                    "maxTokens"
                                  ],
                                  "additionalProperties": false
                                },
                                "routerLlmConfig": {
                                  "type": "object",
                                  "properties": {
                                    "modelId": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    },
                                    "temperature": {
                                      "type": "number",
                                      "description": "The temperature of the LLM"
                                    },
                                    "maxTokens": {
                                      "type": "number",
                                      "description": "The max tokens of the LLM"
                                    },
                                    "customModelId": {
                                      "type": "string",
                                      "description": "The custom model id of the LLM"
                                    },
                                    "serverUrl": {
                                      "type": "string",
                                      "description": "The server url of the LLM"
                                    },
                                    "apiKey": {
                                      "type": "string",
                                      "description": "The api key of the LLM"
                                    }
                                  },
                                  "required": [
                                    "modelId",
                                    "temperature",
                                    "maxTokens"
                                  ],
                                  "additionalProperties": false,
                                  "description": "The LLM config that will be used for the router node, NOTE: This must be a fast LLM model or the latency will be too high between responses."
                                },
                                "toolUseBias": {
                                  "type": "number",
                                  "description": "The bias of the LLM to use tools if 0 it will never use tools, if 1 it will only use tools."
                                },
                                "autoRerouter": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean",
                                      "description": "If true, the LLM will try to detect if the user has changed his mind about something enabling the AI to rewind back to the previous node."
                                    },
                                    "level": {
                                      "type": "number",
                                      "description": "The level of rewinding, if 1 the LLM will have access to only 1 level or rewind capabilities meaning if it went from node A > B > C > D  then if it at node d & it detects it needs to be at node B again it will be able to rewind back to node B if the level is at least 2, it will not be able to detect node A unless the level is 3 or more, and so on."
                                    }
                                  },
                                  "required": ["enabled", "level"],
                                  "additionalProperties": false,
                                  "description": "The auto rerouter of this node."
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "start",
                                    "end",
                                    "default",
                                    "condition",
                                    "note"
                                  ],
                                  "description": "The type of the node, if not provided it will be a normal LLM node."
                                },
                                "rf": {
                                  "description": "The position of the node in the reactflow canvas."
                                },
                                "kb": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": { "type": "boolean" },
                                    "maxChunks": {
                                      "type": "number",
                                      "description": "The max chunks to use from the KB."
                                    },
                                    "tags": {
                                      "type": "array",
                                      "items": { "type": "string" },
                                      "description": "The tags to use to filter the docs we search through"
                                    },
                                    "smartSearch": {
                                      "type": "boolean",
                                      "description": "If true, the LLM will use the smart search to search through the docs."
                                    }
                                  },
                                  "required": ["enabled", "maxChunks"],
                                  "additionalProperties": false
                                },
                                "conditionData": {
                                  "type": "object",
                                  "properties": {
                                    "condition": {
                                      "type": "string",
                                      "description": "The condition to check."
                                    }
                                  },
                                  "required": ["condition"],
                                  "additionalProperties": false
                                },
                                "preStart": {
                                  "type": "object",
                                  "properties": {
                                    "url": {
                                      "type": "string",
                                      "description": "The URL to send the GET request to."
                                    },
                                    "enabled": {
                                      "type": "boolean",
                                      "description": "If true, we will send a GET request to the URL before starting the node."
                                    },
                                    "testConvoIdValue": {
                                      "type": "string",
                                      "description": "The value to test the URL with."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "description": "The pre start tool of the node, we will send a GET request to this URL before starting the node and provide the results to the AI. GET {url}/{user_id}/{node_name}"
                                },
                                "startConfig": {
                                  "type": "object",
                                  "properties": {
                                    "initialMessage": {
                                      "type": "string",
                                      "description": "The initial message to start the conversation with"
                                    },
                                    "userStarts": {
                                      "type": "boolean",
                                      "description": "Whether the user or AI agent gives the first message"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "description": "Configuration for start nodes"
                                }
                              },
                              "required": [
                                "id",
                                "name",
                                "description",
                                "instructions",
                                "llmConfig"
                              ],
                              "additionalProperties": false,
                              "description": "A node in the LLM chain."
                            }
                          },
                          "enableNodes": { "type": "boolean" },
                          "advanced": {
                            "type": "object",
                            "properties": {
                              "serverUrl": { "type": "string" },
                              "serverUrlSecret": { "type": "string" }
                            },
                            "additionalProperties": false
                          },
                          "nodesSettings": {
                            "type": "object",
                            "properties": {
                              "enableUIEngineForms": {
                                "type": "boolean",
                                "description": "If true, the LLM will be able to show forms on web channel only."
                              },
                              "geminiLiveOptions": {},
                              "appendBeforePrompt": {
                                "type": "string",
                                "description": "The prompt to append to the nodes' prompt."
                              },
                              "routerLLmOptions": {
                                "type": "object",
                                "properties": {
                                  "modelId": {
                                    "type": "string",
                                    "enum": [
                                      "gpt-5-chat-latest",
                                      "gpt-5-2025-08-07",
                                      "gpt-5-mini-2025-08-07",
                                      "gpt-5-nano-2025-08-07",
                                      "gpt-3.5-turbo-0125",
                                      "gpt-4-1106-preview",
                                      "gpt-4.5-preview-2025-02-27",
                                      "gpt-4o",
                                      "gpt-4o-mini",
                                      "gpt-4.1-2025-04-14",
                                      "gpt-4.1-mini-2025-04-14",
                                      "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                      "llama3-8b-8192",
                                      "llama3-70b-8192",
                                      "llama-3.1-8b-instant",
                                      "llama-3.1-70b-versatile",
                                      "llama-3.2-90b-text-preview",
                                      "llama-3.2-11b-text-preview",
                                      "llama-3.3-70b-versatile",
                                      "meta-llama/llama-4-scout-17b-16e-instruct",
                                      "meta-llama/llama-4-maverick-17b-128e-instruct",
                                      "mixtral-8x7b-32768",
                                      "gemma-7b-it",
                                      "gemma2-9b-it",
                                      "claude-opus-4-20250514",
                                      "claude-sonnet-4-20250514",
                                      "claude-3-5-sonnet-20240620",
                                      "claude-3-5-sonnet-20241022",
                                      "claude-3-opus-20240229",
                                      "claude-3-sonnet-20240229",
                                      "claude-3-haiku-20240307",
                                      "claude-3-5-haiku-20241022",
                                      "claude-3-7-sonnet-20250219",
                                      "gemini-1.5-pro",
                                      "gemini-1.5-flash",
                                      "gemini-1.0-pro",
                                      "gemini-2.0-flash-exp",
                                      "gemini-2.0-flash-thinking-exp-1219",
                                      "gemini-2.5-pro",
                                      "gemini-2.5-pro-exp-03-25",
                                      "gemini-2.5-pro-preview-03-25",
                                      "gemini-2.5-flash-preview-05-20",
                                      "gemini-2.5-flash",
                                      "gpt-4-32k",
                                      "gpt-4",
                                      "gpt-3.5-turbo-16k",
                                      "gpt-3.5-turbo",
                                      "deepseek-chat",
                                      "deepseek-r1-distill-llama-70b",
                                      "grok-2-latest",
                                      "grok-3",
                                      "grok-3-mini",
                                      "grok-3-fast",
                                      "grok-4-0709",
                                      "qwen-max-latest",
                                      "qwen-plus-latest",
                                      "qwen-turbo-latest",
                                      "custom-llm",
                                      "models/gemini-2.5-pro-preview-03-25",
                                      "azure-eu-gpt-4o",
                                      "azure-na-gpt-4o"
                                    ]
                                  },
                                  "temperature": {
                                    "type": "number",
                                    "description": "The temperature of the LLM"
                                  },
                                  "maxTokens": {
                                    "type": "number",
                                    "description": "The max tokens of the LLM"
                                  },
                                  "customModelId": {
                                    "type": "string",
                                    "description": "The custom model id of the LLM"
                                  },
                                  "serverUrl": {
                                    "type": "string",
                                    "description": "The server url of the LLM"
                                  },
                                  "apiKey": {
                                    "type": "string",
                                    "description": "The api key of the LLM"
                                  }
                                },
                                "required": [
                                  "modelId",
                                  "temperature",
                                  "maxTokens"
                                ],
                                "additionalProperties": false
                              },
                              "defaultLLmOptions": {
                                "type": "object",
                                "properties": {
                                  "modelId": {
                                    "type": "string",
                                    "enum": [
                                      "gpt-5-chat-latest",
                                      "gpt-5-2025-08-07",
                                      "gpt-5-mini-2025-08-07",
                                      "gpt-5-nano-2025-08-07",
                                      "gpt-3.5-turbo-0125",
                                      "gpt-4-1106-preview",
                                      "gpt-4.5-preview-2025-02-27",
                                      "gpt-4o",
                                      "gpt-4o-mini",
                                      "gpt-4.1-2025-04-14",
                                      "gpt-4.1-mini-2025-04-14",
                                      "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                      "llama3-8b-8192",
                                      "llama3-70b-8192",
                                      "llama-3.1-8b-instant",
                                      "llama-3.1-70b-versatile",
                                      "llama-3.2-90b-text-preview",
                                      "llama-3.2-11b-text-preview",
                                      "llama-3.3-70b-versatile",
                                      "meta-llama/llama-4-scout-17b-16e-instruct",
                                      "meta-llama/llama-4-maverick-17b-128e-instruct",
                                      "mixtral-8x7b-32768",
                                      "gemma-7b-it",
                                      "gemma2-9b-it",
                                      "claude-opus-4-20250514",
                                      "claude-sonnet-4-20250514",
                                      "claude-3-5-sonnet-20240620",
                                      "claude-3-5-sonnet-20241022",
                                      "claude-3-opus-20240229",
                                      "claude-3-sonnet-20240229",
                                      "claude-3-haiku-20240307",
                                      "claude-3-5-haiku-20241022",
                                      "claude-3-7-sonnet-20250219",
                                      "gemini-1.5-pro",
                                      "gemini-1.5-flash",
                                      "gemini-1.0-pro",
                                      "gemini-2.0-flash-exp",
                                      "gemini-2.0-flash-thinking-exp-1219",
                                      "gemini-2.5-pro",
                                      "gemini-2.5-pro-exp-03-25",
                                      "gemini-2.5-pro-preview-03-25",
                                      "gemini-2.5-flash-preview-05-20",
                                      "gemini-2.5-flash",
                                      "gpt-4-32k",
                                      "gpt-4",
                                      "gpt-3.5-turbo-16k",
                                      "gpt-3.5-turbo",
                                      "deepseek-chat",
                                      "deepseek-r1-distill-llama-70b",
                                      "grok-2-latest",
                                      "grok-3",
                                      "grok-3-mini",
                                      "grok-3-fast",
                                      "grok-4-0709",
                                      "qwen-max-latest",
                                      "qwen-plus-latest",
                                      "qwen-turbo-latest",
                                      "custom-llm",
                                      "models/gemini-2.5-pro-preview-03-25",
                                      "azure-eu-gpt-4o",
                                      "azure-na-gpt-4o"
                                    ]
                                  },
                                  "temperature": {
                                    "type": "number",
                                    "description": "The temperature of the LLM"
                                  },
                                  "maxTokens": {
                                    "type": "number",
                                    "description": "The max tokens of the LLM"
                                  },
                                  "customModelId": {
                                    "type": "string",
                                    "description": "The custom model id of the LLM"
                                  },
                                  "serverUrl": {
                                    "type": "string",
                                    "description": "The server url of the LLM"
                                  },
                                  "apiKey": {
                                    "type": "string",
                                    "description": "The api key of the LLM"
                                  }
                                },
                                "required": [
                                  "modelId",
                                  "temperature",
                                  "maxTokens"
                                ],
                                "additionalProperties": false
                              },
                              "backchannelOnChoosingNodes": {
                                "type": "boolean",
                                "description": "If true, the LLM will say uha/i see before choosing a node."
                              },
                              "enableUiEngine": {
                                "type": "boolean",
                                "description": "If true, the LLM will be able to show buttons, cards, images on text channels only."
                              },
                              "fallbackModelIds": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ]
                                }
                              },
                              "silenceDetection": {
                                "type": "object",
                                "properties": {
                                  "enabled": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether to enable the silence detection feature which will insert filler phrases during long periods of silence"
                                  },
                                  "timeoutSeconds": {
                                    "type": "number",
                                    "default": 60,
                                    "description": "Number of seconds of silence before triggering a filler phrase"
                                  },
                                  "endCallAfterNPhrases": {
                                    "type": "number",
                                    "default": 1,
                                    "description": "Number of filler phrases utterances to say before ending the call if 0 it will end the call instantly after reching the timeout."
                                  }
                                },
                                "additionalProperties": false
                              },
                              "startCallPhrases": {
                                "type": "array",
                                "items": { "type": "string" }
                              },
                              "fillerWordsOnToolUsage": {
                                "type": "boolean",
                                "description": "If true, the LLM will say filler words on tool usage, like '1 moment', 'be right back', 'you know', etc."
                              },
                              "smartEndpointing": {
                                "type": "object",
                                "properties": {
                                  "enabled": { "type": "boolean" },
                                  "waitSeconds": { "type": "number" },
                                  "onPunctuationSeconds": { "type": "number" },
                                  "onNoPunctuationSeconds": {
                                    "type": "number"
                                  },
                                  "onNumberSeconds": { "type": "number" }
                                },
                                "additionalProperties": false
                              },
                              "stopSpeakPlan": {
                                "type": "object",
                                "properties": {
                                  "minWords": {
                                    "type": "number",
                                    "description": "The minimum words to speak from the user for the AI to be interrupted and stop talking ."
                                  }
                                },
                                "additionalProperties": false
                              },
                              "callTimeoutSeconds": {
                                "type": "number",
                                "description": "The timeout for the call in seconds."
                              },
                              "enableEndcallTool": {
                                "type": "boolean",
                                "description": "Whether to enable endcall tool."
                              },
                              "voiceSpecific": {
                                "type": "object",
                                "properties": {
                                  "minCharacters": {
                                    "type": "number",
                                    "description": "The minimum number of characters to init the speech gen to generate audio for, the more the higher the latency will be, default is 5"
                                  },
                                  "maxLengthWithoutPunctuation": {
                                    "type": "number",
                                    "description": "The maximum length of the string without punctuation to init the speech gen to generate audio for, the more the higher the latency will be, default is 100"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "enabledGlobalTools": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": ["handoffHumanDashboardTool"]
                                },
                                "description": "The global tools that will be enabled for the LLM."
                              },
                              "defaultToolOverrides": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "object",
                                  "properties": {
                                    "description": {
                                      "type": "string",
                                      "nullable": true
                                    },
                                    "fields": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "string",
                                              "number",
                                              "boolean"
                                            ]
                                          },
                                          "description": { "type": "string" }
                                        },
                                        "additionalProperties": false
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "description": "Overrides for default system tools configuration."
                              }
                            },
                            "additionalProperties": false,
                            "description": "Global options for the nodes setup, text/voice."
                          },
                          "enableFallback": {
                            "type": "boolean",
                            "description": "Enable fallback for the agent llm model."
                          },
                          "fallbackSettings": {
                            "type": "object",
                            "properties": {
                              "model": {
                                "type": "string",
                                "enum": [
                                  "gpt-5-chat-latest",
                                  "gpt-5-2025-08-07",
                                  "gpt-5-mini-2025-08-07",
                                  "gpt-5-nano-2025-08-07",
                                  "gpt-3.5-turbo-0125",
                                  "gpt-4-1106-preview",
                                  "gpt-4.5-preview-2025-02-27",
                                  "gpt-4o",
                                  "gpt-4o-mini",
                                  "gpt-4.1-2025-04-14",
                                  "gpt-4.1-mini-2025-04-14",
                                  "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                  "llama3-8b-8192",
                                  "llama3-70b-8192",
                                  "llama-3.1-8b-instant",
                                  "llama-3.1-70b-versatile",
                                  "llama-3.2-90b-text-preview",
                                  "llama-3.2-11b-text-preview",
                                  "llama-3.3-70b-versatile",
                                  "meta-llama/llama-4-scout-17b-16e-instruct",
                                  "meta-llama/llama-4-maverick-17b-128e-instruct",
                                  "mixtral-8x7b-32768",
                                  "gemma-7b-it",
                                  "gemma2-9b-it",
                                  "claude-opus-4-20250514",
                                  "claude-sonnet-4-20250514",
                                  "claude-3-5-sonnet-20240620",
                                  "claude-3-5-sonnet-20241022",
                                  "claude-3-opus-20240229",
                                  "claude-3-sonnet-20240229",
                                  "claude-3-haiku-20240307",
                                  "claude-3-5-haiku-20241022",
                                  "claude-3-7-sonnet-20250219",
                                  "gemini-1.5-pro",
                                  "gemini-1.5-flash",
                                  "gemini-1.0-pro",
                                  "gemini-2.0-flash-exp",
                                  "gemini-2.0-flash-thinking-exp-1219",
                                  "gemini-2.5-pro",
                                  "gemini-2.5-pro-exp-03-25",
                                  "gemini-2.5-pro-preview-03-25",
                                  "gemini-2.5-flash-preview-05-20",
                                  "gemini-2.5-flash",
                                  "gpt-4-32k",
                                  "gpt-4",
                                  "gpt-3.5-turbo-16k",
                                  "gpt-3.5-turbo",
                                  "deepseek-chat",
                                  "deepseek-r1-distill-llama-70b",
                                  "grok-2-latest",
                                  "grok-3",
                                  "grok-3-mini",
                                  "grok-3-fast",
                                  "grok-4-0709",
                                  "qwen-max-latest",
                                  "qwen-plus-latest",
                                  "qwen-turbo-latest",
                                  "custom-llm",
                                  "models/gemini-2.5-pro-preview-03-25",
                                  "azure-eu-gpt-4o",
                                  "azure-na-gpt-4o"
                                ],
                                "description": "The model to use for fallback."
                              },
                              "creditThreshold": {
                                "type": "number",
                                "description": "The credit threshold for fallback."
                              }
                            },
                            "additionalProperties": false,
                            "description": "Fallback settings for the agent llm model."
                          },
                          "marketplace": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether to show the agent in marketplace or not."
                              },
                              "priceUSD": {
                                "type": "number",
                                "description": "The price for the agent, default is 0/free"
                              }
                            },
                            "additionalProperties": false,
                            "description": "Marketplace settings for the agent."
                          },
                          "disableRating": {
                            "type": "boolean",
                            "description": "Whether to disable the chat end rating feature."
                          },
                          "chatEndMessage": {
                            "type": "string",
                            "description": "The message to show when the chat ends."
                          },
                          "aiIntroductionMessage": {
                            "type": "string",
                            "description": "The message to show when the user starts the chat on metachannels."
                          },
                          "enableAIIntroductionMessage": {
                            "type": "boolean",
                            "description": "Whether to enable the AI introduction message or not."
                          },
                          "deployed": {
                            "type": "boolean",
                            "description": "Whether the agent is deployed or not."
                          },
                          "captureIGStories": {
                            "type": "boolean",
                            "description": "Whether to capture instagram stories or not."
                          },
                          "gdprCompliance": {
                            "type": "boolean",
                            "description": "Whether to comply with GDPR or not."
                          },
                          "disableFileUpload": { "type": "boolean" },
                          "buttonVariant": {
                            "type": "string",
                            "enum": [
                              "custom",
                              "solid",
                              "bordered",
                              "light",
                              "flat",
                              "faded",
                              "shadow",
                              "ghost"
                            ],
                            "description": "The variant of the button. Custom is the default original styling."
                          },
                          "inputVariant": {
                            "type": "string",
                            "enum": [
                              "custom",
                              "flat",
                              "bordered",
                              "faded",
                              "underlined"
                            ],
                            "description": "The variant of the input. Custom is the default original styling."
                          },
                          "privacyDisclaimer": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether to show privacy disclaimer before user interaction"
                              },
                              "text": {
                                "type": "string",
                                "description": "The privacy disclaimer text to display to users"
                              },
                              "privacyPolicyUrl": {
                                "type": "string",
                                "description": "URL to the privacy policy page"
                              },
                              "acceptButtonLabel": {
                                "type": "string",
                                "description": "Label for the accept/proceed button"
                              },
                              "privacyPolicyButtonLabel": {
                                "type": "string",
                                "description": "Label for the privacy policy link button"
                              }
                            },
                            "additionalProperties": false,
                            "description": "Privacy disclaimer configuration for the agent"
                          },
                          "leadCollectionRules": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether to use custom lead collection rules. If false or not set, uses default behavior (collect when email, phone_number, or phone is present)"
                              },
                              "rules": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "variables": {
                                      "type": "array",
                                      "items": { "type": "string" },
                                      "description": "Array of variable names that must ALL be present for this rule to match (AND condition)"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Optional description of what this rule captures"
                                    }
                                  },
                                  "required": ["variables"],
                                  "additionalProperties": false
                                },
                                "description": "Array of rule sets. A lead is collected if it matches ANY rule set (OR condition between rules). Each rule requires ALL its variables to be present (AND condition within a rule)."
                              }
                            },
                            "additionalProperties": false,
                            "description": "Custom lead collection rules. Allows defining which variable combinations should trigger lead capture. If not set, defaults to collecting leads when email, phone_number, or phone is present."
                          }
                        },
                        "additionalProperties": false,
                        "description": "This is the overrides to use for the agent."
                      },
                      "toolsOverrides": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "isDefault": {
                              "type": "boolean",
                              "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                            },
                            "method": {
                              "type": "string",
                              "enum": ["GET", "POST", "PUT", "PATCH"],
                              "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the tool, providing a human-readable identifier for display purposes."
                            },
                            "description": {
                              "type": "string",
                              "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                            },
                            "serverUrl": {
                              "type": "string",
                              "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                            },
                            "serverUrlSecret": {
                              "type": "string",
                              "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                            },
                            "disabled": {
                              "type": "boolean",
                              "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                            },
                            "isVapiTool": {
                              "type": "boolean",
                              "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                            },
                            "vapiId": {
                              "type": "string",
                              "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                            },
                            "backchannellingPhrases": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                            },
                            "toolsSettings": {},
                            "fields": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                  },
                                  "in": {
                                    "type": "string",
                                    "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "system"
                                    ],
                                    "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                  },
                                  "value": {
                                    "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                  },
                                  "defaultValue": {
                                    "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                  },
                                  "key": {
                                    "type": "string",
                                    "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                  },
                                  "reusable": {
                                    "type": "boolean",
                                    "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                  },
                                  "isEnv": {
                                    "type": "boolean",
                                    "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                  },
                                  "isSystem": {
                                    "type": "boolean",
                                    "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                  },
                                  "agentId": {
                                    "type": "string",
                                    "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                  },
                                  "userId": {
                                    "type": "string",
                                    "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                  }
                                },
                                "required": ["id"],
                                "additionalProperties": false
                              }
                            },
                            "channels": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "web-chat",
                                  "whatsapp",
                                  "instagram",
                                  "telegram",
                                  "discord",
                                  "gb-chat",
                                  "vapi",
                                  "messenger",
                                  "voice",
                                  "telephony"
                                ]
                              },
                              "description": "The channels that the tool can be used on."
                            }
                          },
                          "required": ["name", "description"],
                          "additionalProperties": false
                        },
                        "description": "This will create new tools for the agent or override existing ones to be used for the call/interaction."
                      },
                      "variablesOverrides": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "in": {
                              "type": "string",
                              "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                            },
                            "type": {
                              "type": "string",
                              "enum": ["string", "number", "boolean", "system"],
                              "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                            },
                            "value": {
                              "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                            },
                            "defaultValue": {
                              "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                            },
                            "key": {
                              "type": "string",
                              "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                            },
                            "description": {
                              "type": "string",
                              "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                            },
                            "required": {
                              "type": "boolean",
                              "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                            },
                            "reusable": {
                              "type": "boolean",
                              "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                            },
                            "isEnv": {
                              "type": "boolean",
                              "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                            },
                            "isSystem": {
                              "type": "boolean",
                              "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                            },
                            "isGlobal": {
                              "type": "boolean",
                              "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                            }
                          },
                          "additionalProperties": false
                        },
                        "description": "This will create new variables for the agent or override existing ones to be used for the call/interaction, if the variable is env or has a default value the agent will be able to know about it and use it globally on any node."
                      },
                      "callerInfo": {},
                      "callInfo": {},
                      "awaitListenUrl": {
                        "type": "boolean",
                        "description": "If true, the call will wait for the listen url to be generated before starting the call."
                      }
                    },
                    "additionalProperties": false,
                    "description": "This is the overrides to use for the agent."
                  },
                  "leadInfo": {
                    "type": "object",
                    "properties": {
                      "username": { "type": "string" },
                      "email": { "type": "string" },
                      "address": { "type": "string" }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "This is the message of the call."
                    },
                    "websocketUrl": {
                      "type": "string",
                      "description": "This is the websocket url."
                    },
                    "callData": {
                      "description": "This is the call data from twilio."
                    },
                    "options": {
                      "type": "object",
                      "properties": {
                        "serverData": {
                          "type": "object",
                          "properties": {
                            "agentTools": { "type": "array" },
                            "agentVariables": { "type": "array" },
                            "agentOrg": {},
                            "agentClients": { "type": "array" },
                            "orgTeams": { "type": "array" },
                            "agentData": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string",
                                  "description": "**Title**: The title of the agent."
                                },
                                "description": {
                                  "type": "string",
                                  "description": "**Description**: A brief description of the agent."
                                },
                                "ownerID": {
                                  "type": "string",
                                  "description": "**Owner ID**: The unique identifier of the agent's owner."
                                },
                                "theme": {
                                  "type": "string",
                                  "description": "**Theme**: The visual theme of the agent, e.g., 'blue-light' or 'custom-blue-dark'."
                                },
                                "voiceConfig": {
                                  "type": "object",
                                  "properties": {
                                    "transcriber": {
                                      "type": "object",
                                      "properties": {
                                        "speechConfig": {
                                          "type": "object",
                                          "properties": {
                                            "format": { "type": "string" },
                                            "sampleRate": { "type": "number" }
                                          },
                                          "additionalProperties": false
                                        },
                                        "modelId": { "type": "string" },
                                        "patienceFactor": { "type": "number" },
                                        "language": { "type": "string" },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "deepgram",
                                            "gladia",
                                            "assemblyai",
                                            "speechmatics",
                                            "google-cloud-speech",
                                            "google-live-transcription"
                                          ]
                                        },
                                        "randomOptions": {},
                                        "internal": {
                                          "type": "object",
                                          "properties": {
                                            "inputAudioStream": {},
                                            "debug": { "type": "boolean" }
                                          },
                                          "additionalProperties": false
                                        },
                                        "apiKey": { "type": "string" },
                                        "platformSpecific": {
                                          "type": "object",
                                          "properties": {
                                            "deepgram": {
                                              "type": "object",
                                              "properties": {
                                                "keywords": {
                                                  "type": "array",
                                                  "items": { "type": "string" },
                                                  "description": "Keywords to focus on in the transcription."
                                                },
                                                "language": {
                                                  "type": "string"
                                                },
                                                "smart_format": {
                                                  "type": "boolean"
                                                },
                                                "model": { "type": "string" },
                                                "interim_results": {
                                                  "type": "boolean"
                                                },
                                                "endpointing": {
                                                  "type": "number"
                                                },
                                                "no_delay": {
                                                  "type": "boolean"
                                                },
                                                "autoLanguageDetection": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "assemblyai": {
                                              "type": "object",
                                              "properties": {
                                                "modelId": { "type": "string" }
                                              },
                                              "required": ["modelId"],
                                              "additionalProperties": false
                                            },
                                            "googleCloud": {
                                              "type": "object",
                                              "properties": {
                                                "keywords": {
                                                  "type": "array",
                                                  "items": { "type": "string" },
                                                  "description": "Keywords or phrases to focus on in the transcription."
                                                },
                                                "model": {
                                                  "type": "string",
                                                  "description": "The Google Cloud Speech model to use."
                                                },
                                                "languageCode": {
                                                  "type": "string",
                                                  "description": "The language code for transcription."
                                                },
                                                "enableAutomaticPunctuation": {
                                                  "type": "boolean",
                                                  "description": "Enable automatic punctuation."
                                                },
                                                "enableWordTimeOffsets": {
                                                  "type": "boolean",
                                                  "description": "Enable word time offsets."
                                                },
                                                "maxAlternatives": {
                                                  "type": "number",
                                                  "description": "Maximum number of recognition alternatives."
                                                },
                                                "profanityFilter": {
                                                  "type": "boolean",
                                                  "description": "Enable profanity filter."
                                                },
                                                "speechContexts": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "phrases": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "boost": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "required": ["phrases"],
                                                    "additionalProperties": false
                                                  },
                                                  "description": "Speech contexts for better recognition."
                                                }
                                              },
                                              "additionalProperties": false
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "utteranceThreshold": {
                                          "type": "number"
                                        },
                                        "inputVoiceEnhancer": {
                                          "type": "boolean"
                                        }
                                      },
                                      "required": ["provider"],
                                      "additionalProperties": false,
                                      "description": "**Transcriber**: The configuration options for the transcriber provider used by the agent."
                                    },
                                    "speechGen": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "highAudioQuality": {
                                              "type": "boolean",
                                              "description": "Generate highest quality audio possible, must have pro plan or higher on elevenlabs to enable your own key to work with this option."
                                            },
                                            "provider": {
                                              "type": "string",
                                              "enum": [
                                                "elevenlabs",
                                                "deepgram",
                                                "cartesia",
                                                "playht",
                                                "azure",
                                                "rime-ai",
                                                "openai",
                                                "playai-groq",
                                                "google-cloud",
                                                "google-live"
                                              ],
                                              "description": "Speech providers supported by the app."
                                            },
                                            "modelId": {
                                              "type": "string",
                                              "description": "The model id of the speech gen."
                                            },
                                            "voiceId": {
                                              "type": "string",
                                              "description": "The voice id for the speech service."
                                            },
                                            "apiKey": { "type": "string" },
                                            "region": { "type": "string" },
                                            "backgroundNoise": {
                                              "type": "string",
                                              "enum": [
                                                "restaurant",
                                                "office",
                                                "park",
                                                "street"
                                              ]
                                            },
                                            "punctuationBreaks": {
                                              "type": "array",
                                              "items": { "type": "string" }
                                            },
                                            "platformSpecific": {
                                              "type": "object",
                                              "properties": {
                                                "elevenLabs": {
                                                  "type": "object",
                                                  "properties": {
                                                    "stability": {
                                                      "type": "number"
                                                    },
                                                    "similarity_boost": {
                                                      "type": "number"
                                                    },
                                                    "use_speaker_boost": {
                                                      "type": "boolean"
                                                    },
                                                    "speed": {
                                                      "type": "number"
                                                    },
                                                    "style": {
                                                      "type": "number"
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                },
                                                "playht": {
                                                  "type": "object",
                                                  "properties": {
                                                    "voiceId": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": ["voiceId"],
                                                  "additionalProperties": false
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "backChannelling": {
                                              "type": "boolean",
                                              "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                            },
                                            "language": { "type": "string" },
                                            "enableLongMessageBackchannelling": {
                                              "type": "boolean",
                                              "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                            },
                                            "backchannelMessages": {
                                              "type": "array",
                                              "items": { "type": "string" }
                                            },
                                            "backchannelInterval": {
                                              "type": "number"
                                            },
                                            "wordsReplacements": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "word": { "type": "string" },
                                                  "replacement": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "word",
                                                  "replacement"
                                                ],
                                                "additionalProperties": false
                                              }
                                            }
                                          },
                                          "required": ["provider"]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "internal": {
                                              "type": "object",
                                              "properties": {
                                                "inputTextStream": {},
                                                "audioConfig": {
                                                  "type": "object",
                                                  "properties": {
                                                    "format": {
                                                      "type": "string"
                                                    },
                                                    "sampleRate": {
                                                      "type": "number"
                                                    },
                                                    "channels": {
                                                      "type": "number"
                                                    }
                                                  },
                                                  "required": [
                                                    "format",
                                                    "sampleRate",
                                                    "channels"
                                                  ],
                                                  "additionalProperties": false
                                                },
                                                "emitOnComplete": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "additionalProperties": false
                                            }
                                          }
                                        }
                                      ],
                                      "description": "**Speech Generation**: The configuration options for the speech generation provider used by the agent."
                                    },
                                    "config": {
                                      "type": "object",
                                      "properties": {
                                        "recordAudio": { "type": "boolean" },
                                        "backgroundNoise": {
                                          "type": "string",
                                          "enum": [
                                            "restaurant",
                                            "office",
                                            "street",
                                            "none"
                                          ]
                                        },
                                        "enableWebCalling": {
                                          "type": "boolean"
                                        },
                                        "firstInputChunkUNIXMs": {
                                          "type": "number"
                                        },
                                        "firstOutputChunkUNIXMs": {
                                          "type": "number"
                                        }
                                      },
                                      "required": ["recordAudio"],
                                      "additionalProperties": false,
                                      "description": "**Call Configuration**: The call configuration settings for the agent."
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "light": {
                                  "type": "boolean",
                                  "description": "Whether to enable light mode for the agent. If set to true, the agent will not retain previous chat interactions for privacy reasons."
                                },
                                "enableVertex": {
                                  "type": "boolean",
                                  "description": "Whether to enable Vertex AI for the agent."
                                },
                                "autoOpenWidget": {
                                  "type": "boolean",
                                  "description": "Whether to auto-open the widget when the agent is loaded."
                                },
                                "createdAtUNIX": {
                                  "type": "number",
                                  "description": "The timestamp when the agent was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                                },
                                "disabled": {
                                  "type": "boolean",
                                  "description": "Indicates whether the agent is disabled. If set to true, the agent will not be active."
                                },
                                "vectorDb": {
                                  "description": "Specifies the vector database configuration for the agent. This database is used for handling vectorized data or embeddings."
                                },
                                "withRefresh": {
                                  "type": "boolean",
                                  "description": "Determines whether the agent should refresh its settings or data dynamically."
                                },
                                "agentPlatform": {
                                  "type": "string",
                                  "description": "Specifies the platform on which the agent operates, such as web, mobile, or other environments."
                                },
                                "ID": {
                                  "type": "string",
                                  "description": "A unique identifier for the agent used internally."
                                },
                                "storageID": {
                                  "type": "string",
                                  "description": "The identifier for the agent's storage configuration."
                                },
                                "VF_DIALOGUE_API_KEY": {
                                  "type": "string",
                                  "description": "API key for VF dialogue integration, enabling the agent to communicate with external systems."
                                },
                                "VF_PROJECT_API_KEY": {
                                  "type": "string",
                                  "description": "API key associated with the VF project to authenticate and enable specific functionalities."
                                },
                                "VF_PROJECT_ID": {
                                  "type": "string",
                                  "description": "The unique identifier of the VF project linked to the agent."
                                },
                                "VF_KB_API_KEY": {
                                  "type": "string",
                                  "description": "API key for accessing the VF knowledge base, enabling advanced knowledge retrieval capabilities."
                                },
                                "roundedImageURL": {
                                  "type": "string",
                                  "description": "URL pointing to the rounded image asset used to visually represent the agent."
                                },
                                "rectangeImageURL": {
                                  "type": "string",
                                  "description": "URL pointing to the rectangular image asset for the agent's branding or display."
                                },
                                "messageDelayMS": {
                                  "type": "number",
                                  "description": "Specifies the delay in milliseconds for the agent to send messages, simulating natural conversation timing."
                                },
                                "scrollAnimation": {
                                  "type": "boolean",
                                  "description": "Indicates whether scroll animations are enabled for smooth transitions in the chat interface."
                                },
                                "proactiveMessage": {
                                  "type": "string",
                                  "description": "A predefined message the agent sends proactively to engage users."
                                },
                                "acceptFileUpload": {
                                  "type": "boolean",
                                  "description": "Determines if the agent accepts file uploads from users as part of the interaction."
                                },
                                "recordChatHistory": {
                                  "type": "boolean",
                                  "description": "Specifies whether the agent logs chat histories for future reference or analysis."
                                },
                                "chatBgURL": {
                                  "type": "string",
                                  "description": "URL of the background image used in the chat interface."
                                },
                                "disableSmoothScroll": {
                                  "type": "boolean",
                                  "description": "Disables smooth scrolling if set to true, potentially improving performance on low-end devices."
                                },
                                "isDeployed": {
                                  "type": "boolean",
                                  "description": "Indicates whether the agent is currently deployed and operational."
                                },
                                "tokensUsage": {
                                  "description": "Tracks the token usage statistics for the agent, typically used in LLM integrations."
                                },
                                "maxTokensUsage": {
                                  "description": "Defines the maximum allowable token usage for the agent to prevent overconsumption."
                                },
                                "lastModified": {
                                  "type": "number",
                                  "description": "The timestamp of the last modification made to the agent's configuration."
                                },
                                "fontFamily": {
                                  "type": "string",
                                  "description": "The font family used in the agent's user interface for consistent branding."
                                },
                                "branding": {
                                  "type": "string",
                                  "description": "Custom branding information or labels associated with the agent."
                                },
                                "customThemeJSONString": {
                                  "type": "string",
                                  "description": "A JSON string defining a custom theme for the agent's interface."
                                },
                                "autoStartWidget": {
                                  "type": "boolean",
                                  "description": "Determines if the widget should auto-start upon page load."
                                },
                                "allTimeTriggers": {
                                  "type": "number",
                                  "description": "The total number of triggers or interactions the agent has handled."
                                },
                                "syncBrowser": {
                                  "type": "boolean",
                                  "description": "Enables synchronization of settings or states with the browser session."
                                },
                                "delayBeforeSubmit": {
                                  "type": "number",
                                  "description": "The delay (in milliseconds) before submitting user input to the agent."
                                },
                                "region": {
                                  "type": "string",
                                  "enum": ["eu", "na"],
                                  "description": "Defines the geographical region settings for the agent, such as localization."
                                },
                                "listenForUrlChanges": {
                                  "type": "boolean",
                                  "description": "Specifies if the agent should monitor and react to changes in the browser URL."
                                },
                                "chatForget": {
                                  "type": "boolean",
                                  "description": "If enabled, the agent will not retain previous chat interactions for privacy reasons."
                                },
                                "lang": {
                                  "type": "string",
                                  "description": "Specifies the default language for the agent's interactions and responses."
                                },
                                "enableAudioSupport": {
                                  "type": "boolean",
                                  "description": "Enables audio features, allowing the agent to process and respond to audio inputs."
                                },
                                "AITranslateTo": {
                                  "type": "string",
                                  "description": "Defines the target language for AI translation during interactions."
                                },
                                "enableAITranslate": {
                                  "type": "boolean",
                                  "description": "Activates AI-based translation for multilingual support."
                                },
                                "disableNoReplyListener": {
                                  "type": "boolean",
                                  "description": "Disables the listener for instances where no reply is detected from the agent."
                                },
                                "disableHumanHandoff": {
                                  "type": "boolean",
                                  "description": "Prevents the agent from escalating interactions to a human operator."
                                },
                                "alwaysShowHandoff": {
                                  "type": "boolean",
                                  "description": "Ensures the handoff option is always visible, regardless of agent status."
                                },
                                "manualControl": {
                                  "type": "boolean",
                                  "description": "Allows manual control over specific agent functionalities."
                                },
                                "enableVGHandoff": {
                                  "type": "boolean",
                                  "description": "Activates VG-specific handoff mechanisms for the agent."
                                },
                                "enableGeoAnalytics": {
                                  "type": "boolean",
                                  "description": "Enables geographic analytics to track user interactions based on location."
                                },
                                "hideVoiceflowAnalytics": {
                                  "type": "boolean",
                                  "description": "Hides Voiceflow-specific analytics including intents, conversation flow metrics, and rating analytics."
                                },
                                "hideCallAnalytics": {
                                  "type": "boolean",
                                  "description": "Hides voice call analytics including duration, latency, cost breakdown, call counts, and call end reasons."
                                },
                                "hideConversationMetrics": {
                                  "type": "boolean",
                                  "description": "Hides conversation metrics including user retention, conversation length, time retention, and engagement metrics."
                                },
                                "hideCustomAnalytics": {
                                  "type": "boolean",
                                  "description": "Hides user-created custom charts and metrics from the analytics dashboard."
                                },
                                "hideVapiAnalytics": {
                                  "type": "boolean",
                                  "description": "Hides VAPI-specific analytics including cost tracking and voice-related metrics."
                                },
                                "hideFunnelAnalytics": {
                                  "type": "boolean",
                                  "description": "Hides the user engagement funnel chart that tracks progression from widget views to high engagement."
                                },
                                "fixedHandoffPopup": {
                                  "type": "boolean",
                                  "description": "Ensures the handoff popup remains fixed in the interface."
                                },
                                "buttonsLayout": {
                                  "type": "string",
                                  "enum": [
                                    "horizontal",
                                    "vertical",
                                    "in-footer"
                                  ],
                                  "description": "Defines the layout and style of buttons in the agent's interface."
                                },
                                "ADVANCED_customCSS": {
                                  "type": "string",
                                  "description": "Specifies advanced custom CSS for overriding the default styling of the agent's interface."
                                },
                                "messagesLimit": {
                                  "type": "number",
                                  "description": "Sets a cap on the number of messages the agent can exchange in a single session."
                                },
                                "whatsappToken": {
                                  "type": "string",
                                  "description": "Token for authenticating and integrating with WhatsApp services."
                                },
                                "whatsappNumberId": {
                                  "type": "string",
                                  "description": "The ID associated with the WhatsApp number used by the agent."
                                },
                                "whatsappBusniessId": {
                                  "type": "string",
                                  "description": "The business ID for WhatsApp integration, enabling enterprise-level features."
                                },
                                "waTestNumber": {
                                  "type": "string",
                                  "description": "A test number used during WhatsApp integration setup or testing."
                                },
                                "waVerifyPassed": {
                                  "type": "boolean",
                                  "description": "Indicates if WhatsApp verification was successfully completed."
                                },
                                "waTestPassed": {
                                  "type": "boolean",
                                  "description": "Indicates if the WhatsApp integration test was successful."
                                },
                                "webhookUrl": {
                                  "type": "string",
                                  "description": "The URL where the agent sends webhook events to external systems."
                                },
                                "gcloudPrivateKey": {
                                  "type": "string",
                                  "description": "Private key for Google Cloud services integration."
                                },
                                "gcloudClientEmail": {
                                  "type": "string",
                                  "description": "Client email for Google Cloud authentication."
                                },
                                "smartInit": {
                                  "type": "boolean",
                                  "description": "Activates smart initialization features for the agent."
                                },
                                "UIhandoffTitle": {
                                  "type": "string",
                                  "description": "Title displayed during UI handoff interactions."
                                },
                                "UIhandoffSubtitle": {
                                  "type": "string",
                                  "description": "Subtitle displayed during UI handoff interactions."
                                },
                                "igVerified": {
                                  "type": "boolean",
                                  "description": "Indicates if the agent's Instagram integration is verified."
                                },
                                "igAccessToken": {
                                  "type": "string",
                                  "description": "Access token for authenticating Instagram API requests."
                                },
                                "showHandoffEvenIfOffline": {
                                  "type": "boolean",
                                  "description": "Displays the handoff option even if the agent is offline."
                                },
                                "persistHandoffOnRefresh": {
                                  "type": "boolean",
                                  "description": "Maintains handoff state when users refresh or close their browser tabs."
                                },
                                "blockInputDuringHandoffRequest": {
                                  "type": "boolean",
                                  "description": "Blocks chat input when a user requests human handoff but no human has been assigned yet. Only applies to VF agents."
                                },
                                "customButtonJSON_STRING": {
                                  "type": "string",
                                  "description": "JSON string defining custom buttons for the agent's interface."
                                },
                                "vg_initPrompt": {
                                  "type": "string",
                                  "description": "The initial prompt displayed or used by the VF system."
                                },
                                "vg_prompt": {
                                  "type": "string",
                                  "description": "The main prompt template used for generating responses."
                                },
                                "vg_initMessages": {
                                  "type": "array",
                                  "items": { "type": "string" },
                                  "description": "Initial messages loaded for the agent's conversation flow."
                                },
                                "vg_systemPrompt": {
                                  "type": "string",
                                  "description": "System-level prompt defining the agent's behavior and rules."
                                },
                                "vg_temperature": {
                                  "type": "number",
                                  "description": "Defines the temperature setting for response variability in the VF model."
                                },
                                "vg_defaultModel": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ],
                                  "description": "Specifies the default LLM model used by the agent for language processing."
                                },
                                "vg_maxTokens": {
                                  "type": "number",
                                  "description": "Sets the maximum token limit for generating responses."
                                },
                                "vg_kbDefaultDimension": {
                                  "type": "number",
                                  "description": "Default dimensionality for the agent's knowledge base embeddings."
                                },
                                "vg_kbTopChunks": {
                                  "type": "number",
                                  "description": "The number of top chunks retrieved from the knowledge base during a query."
                                },
                                "SECRET_API_KEY": {
                                  "type": "string",
                                  "description": "The secret API key for secure integration with VF services."
                                },
                                "vg_kbCharCount": {
                                  "type": "number",
                                  "description": "Tracks the total character count of the agent's knowledge base."
                                },
                                "vg_kbDocsNum": {
                                  "type": "number",
                                  "description": "The total number of documents stored in the agent's knowledge base."
                                },
                                "vg_enableUIEngine": {
                                  "type": "boolean",
                                  "description": "Activates the UI engine for enhanced interface capabilities."
                                },
                                "vg_enableAboutContext": {
                                  "type": "boolean",
                                  "description": "Enables contextual information about the agent for users."
                                },
                                "vg_kb_llm": {
                                  "type": "object",
                                  "properties": {
                                    "searchMethod": {
                                      "anyOf": [
                                        { "type": "string", "enum": ["smart"] },
                                        { "type": "string", "enum": ["simple"] }
                                      ]
                                    },
                                    "searchPrompt": { "type": "string" },
                                    "modelId": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    },
                                    "temprature": { "type": "number" },
                                    "maxTokens": { "type": "number" }
                                  },
                                  "additionalProperties": false,
                                  "description": "Configuration for LLM-based knowledge base queries, including search methods and model parameters."
                                },
                                "vg_enableUIEngineForms": {
                                  "type": "boolean",
                                  "description": "Enables form and input components in the UI engine for web channel."
                                },
                                "vg_max_messages_history": {
                                  "type": "number",
                                  "description": "Maximum number of messages retained in the chat history."
                                },
                                "ifKnowsThreshold": {
                                  "type": "number",
                                  "description": "Confidence threshold for determining if the agent 'knows' an answer."
                                },
                                "avatarImageUrl": {
                                  "type": "string",
                                  "description": "URL of the avatar image representing the agent."
                                },
                                "headerImageUrl": {
                                  "type": "string",
                                  "description": "URL of the header image displayed in the chat interface."
                                },
                                "bannerImageUrl": {
                                  "type": "string",
                                  "description": "URL of the banner image used in the agent's branding."
                                },
                                "soundEffectUrl": {
                                  "type": "string",
                                  "description": "URL of the sound effect file used for agent interactions."
                                },
                                "soundEffectEnabled": {
                                  "type": "boolean",
                                  "description": "Enables or disables sound effects for the agent."
                                },
                                "enableQuickFileUpload": {
                                  "type": "boolean",
                                  "description": "Allows quick file uploads during chat interactions."
                                },
                                "instagramOptions": {
                                  "type": "object",
                                  "properties": {
                                    "pageId": { "type": "string" },
                                    "accessToken": { "type": "string" }
                                  },
                                  "additionalProperties": false
                                },
                                "translateUserResponse": { "type": "boolean" },
                                "starred": { "type": "boolean" },
                                "flowise": {
                                  "type": "object",
                                  "properties": {
                                    "webhookUrl": { "type": "string" },
                                    "webhookSecret": { "type": "string" }
                                  },
                                  "additionalProperties": false
                                },
                                "vfSettings": {
                                  "type": "object",
                                  "properties": {
                                    "enableIgnoreUrlPaths": {
                                      "type": "boolean"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "vapi": {},
                                "vapiConfig": {
                                  "type": "object",
                                  "properties": {
                                    "syncKbOnSave": { "type": "boolean" },
                                    "PUBLIC_API_KEY": { "type": "string" },
                                    "PRIVATE_API_KEY": { "type": "string" },
                                    "enableVapiOnWeb": { "type": "boolean" },
                                    "overrideWithVG": { "type": "boolean" },
                                    "promptOnWeb": { "type": "boolean" },
                                    "maxCostMonthly": { "type": "number" },
                                    "maxMinutesMonthly": { "type": "number" },
                                    "useVfProject": { "type": "boolean" },
                                    "syncTools": { "type": "boolean" }
                                  },
                                  "additionalProperties": false
                                },
                                "vgOptions": {
                                  "type": "object",
                                  "properties": {
                                    "isLlmStudio": { "type": "boolean" },
                                    "showSources": { "type": "boolean" },
                                    "lightUiEngine": { "type": "boolean" },
                                    "legacyKb": { "type": "boolean" },
                                    "maxChunkSize": { "type": "number" },
                                    "handoffTimeout": { "type": "number" }
                                  },
                                  "additionalProperties": false
                                },
                                "ui": {
                                  "type": "object",
                                  "properties": {
                                    "showWhatsappButtonOnWeb": {
                                      "type": "boolean",
                                      "description": "Show little whatsapp button on web if it's connected."
                                    },
                                    "bgImageVisible": { "type": "boolean" },
                                    "widgetType": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "enum": ["direct-chat"]
                                        },
                                        { "type": "string", "enum": ["tabs"] }
                                      ]
                                    },
                                    "enableFixedFeedbackBtns": {
                                      "type": "boolean"
                                    },
                                    "switchConversationSides": {
                                      "type": "boolean"
                                    },
                                    "switchDashboardOnly": {
                                      "type": "boolean"
                                    },
                                    "voice": {
                                      "type": "object",
                                      "properties": {
                                        "question": { "type": "string" },
                                        "continueBtnLabel": {
                                          "type": "string"
                                        },
                                        "dismissBtnLabel": { "type": "string" },
                                        "disableVoiceOrb": { "type": "boolean" }
                                      },
                                      "required": [
                                        "question",
                                        "continueBtnLabel",
                                        "dismissBtnLabel"
                                      ],
                                      "additionalProperties": false
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "assignedToolsIds": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "tools": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "isDefault": {
                                        "type": "boolean",
                                        "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                                      },
                                      "method": {
                                        "type": "string",
                                        "enum": ["GET", "POST", "PUT", "PATCH"],
                                        "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                                      },
                                      "id": {
                                        "type": "string",
                                        "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the tool, providing a human-readable identifier for display purposes."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                                      },
                                      "serverUrl": {
                                        "type": "string",
                                        "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                                      },
                                      "serverUrlSecret": {
                                        "type": "string",
                                        "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                                      },
                                      "createdAt": {
                                        "type": "string",
                                        "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                                      },
                                      "updatedAt": {
                                        "type": "string",
                                        "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                                      },
                                      "disabled": {
                                        "type": "boolean",
                                        "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                                      },
                                      "isVapiTool": {
                                        "type": "boolean",
                                        "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                                      },
                                      "vapiId": {
                                        "type": "string",
                                        "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                                      },
                                      "isGlobal": {
                                        "type": "boolean",
                                        "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                                      },
                                      "variablesIds": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                                      },
                                      "agentId": {
                                        "type": "string",
                                        "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                                      },
                                      "userId": {
                                        "type": "string",
                                        "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                                      },
                                      "backchannellingPhrases": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                                      },
                                      "toolsSettings": {},
                                      "fields": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                            },
                                            "in": {
                                              "type": "string",
                                              "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                            },
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "string",
                                                "number",
                                                "boolean",
                                                "system"
                                              ],
                                              "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                            },
                                            "value": {
                                              "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                            },
                                            "defaultValue": {
                                              "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                            },
                                            "key": {
                                              "type": "string",
                                              "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                            },
                                            "reusable": {
                                              "type": "boolean",
                                              "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                            },
                                            "isEnv": {
                                              "type": "boolean",
                                              "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                            },
                                            "isSystem": {
                                              "type": "boolean",
                                              "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                            },
                                            "isGlobal": {
                                              "type": "boolean",
                                              "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                            },
                                            "agentId": {
                                              "type": "string",
                                              "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                            },
                                            "userId": {
                                              "type": "string",
                                              "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                            }
                                          },
                                          "required": ["id"],
                                          "additionalProperties": false
                                        }
                                      },
                                      "channels": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "web-chat",
                                            "whatsapp",
                                            "instagram",
                                            "telegram",
                                            "discord",
                                            "gb-chat",
                                            "vapi",
                                            "messenger",
                                            "voice",
                                            "telephony"
                                          ]
                                        },
                                        "description": "The channels that the tool can be used on."
                                      }
                                    },
                                    "required": ["id", "name", "description"],
                                    "additionalProperties": false
                                  }
                                },
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "accountCreationConfig": {
                                      "type": "string",
                                      "enum": ["v2"]
                                    },
                                    "websocketServer": {
                                      "anyOf": [
                                        { "type": "string", "enum": ["edge"] },
                                        { "type": "string", "enum": ["nodejs"] }
                                      ]
                                    },
                                    "setOnResponse": { "type": "boolean" },
                                    "enableSetOnLoad": { "type": "boolean" }
                                  },
                                  "additionalProperties": false
                                },
                                "disableAutoTranscribeAudio": {
                                  "type": "boolean"
                                },
                                "disableTranscriptSharing": {
                                  "type": "boolean"
                                },
                                "instaAgentUsername": { "type": "string" },
                                "convoTags": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "vfConfig": {
                                  "type": "object",
                                  "properties": {
                                    "alwaysEnableCardButtons": {
                                      "type": "boolean"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "discord": {
                                  "type": "object",
                                  "properties": {
                                    "channelIds": {
                                      "type": "array",
                                      "items": { "type": "string" }
                                    },
                                    "webhookUrls": {
                                      "type": "array",
                                      "items": { "type": "string" }
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "limits": {
                                  "type": "object",
                                  "properties": {
                                    "maxInteractionsPerUserId": {
                                      "type": "number"
                                    },
                                    "maxAnnualCreditsUsage": {
                                      "type": "number"
                                    },
                                    "maxMonthlyCreditsUsage": {
                                      "type": "number"
                                    },
                                    "maxMessages": {
                                      "type": "number",
                                      "description": "Maximum number of messages allowed per conversation"
                                    },
                                    "maxMessagesRetentionDays": {
                                      "type": "number",
                                      "description": "Retention period in days for messages"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "tabs": { "type": "array" },
                                "kbTags": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "kbTagsDataMap": { "type": "array" },
                                "nodes": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": { "type": "string" },
                                      "name": { "type": "string" },
                                      "description": {
                                        "type": "string",
                                        "description": "A short description of what this node does and when it should be used, specially useful if the node is global or when the LLM detects automatic rerouting."
                                      },
                                      "instructions": {
                                        "type": "string",
                                        "description": "What should this LLM node do."
                                      },
                                      "mcpServers": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": { "type": "string" },
                                            "url": { "type": "string" },
                                            "transport": {
                                              "type": "string",
                                              "enum": [
                                                "sse",
                                                "websocket",
                                                "stdio"
                                              ]
                                            },
                                            "useNodeEventSource": {
                                              "type": "boolean"
                                            },
                                            "reconnect": {
                                              "type": "object",
                                              "properties": {
                                                "enabled": {
                                                  "type": "boolean"
                                                },
                                                "maxAttempts": {
                                                  "type": "number"
                                                },
                                                "delayMs": { "type": "number" }
                                              },
                                              "additionalProperties": false
                                            },
                                            "command": { "type": "string" },
                                            "args": {
                                              "type": "array",
                                              "items": { "type": "string" }
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      },
                                      "voiceInstructions": {
                                        "type": "string",
                                        "description": "The voice instructions for this node, will be used instead of instructions in voice channels if provided."
                                      },
                                      "isGlobal": {
                                        "type": "boolean",
                                        "description": "If true, this node will be always present for the LLM"
                                      },
                                      "toolsIds": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "The tools that will be available for this node"
                                      },
                                      "toolsSettings": {
                                        "type": "object",
                                        "properties": {
                                          "googleCalendar": {
                                            "type": "object",
                                            "properties": {
                                              "calendarId": {
                                                "type": "string"
                                              },
                                              "methods": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string",
                                                  "enum": [
                                                    "create-event",
                                                    "check-availability",
                                                    "get-slots",
                                                    "delete-event"
                                                  ]
                                                }
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "childrenNodes": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "nodeId": { "type": "string" },
                                            "condition": {
                                              "type": "string",
                                              "description": "The condition that will be checked to determine if the node should advanced to the selected node id or not or should simply loop in the current node."
                                            }
                                          },
                                          "required": ["nodeId", "condition"],
                                          "additionalProperties": false
                                        },
                                        "description": "The outputs of this node which the node after finishing will choose from to either advance or to keep looping in this node till it caputures or reaches one of the mentioned routers."
                                      },
                                      "llmConfig": {
                                        "type": "object",
                                        "properties": {
                                          "modelId": {
                                            "type": "string",
                                            "enum": [
                                              "gpt-5-chat-latest",
                                              "gpt-5-2025-08-07",
                                              "gpt-5-mini-2025-08-07",
                                              "gpt-5-nano-2025-08-07",
                                              "gpt-3.5-turbo-0125",
                                              "gpt-4-1106-preview",
                                              "gpt-4.5-preview-2025-02-27",
                                              "gpt-4o",
                                              "gpt-4o-mini",
                                              "gpt-4.1-2025-04-14",
                                              "gpt-4.1-mini-2025-04-14",
                                              "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                              "llama3-8b-8192",
                                              "llama3-70b-8192",
                                              "llama-3.1-8b-instant",
                                              "llama-3.1-70b-versatile",
                                              "llama-3.2-90b-text-preview",
                                              "llama-3.2-11b-text-preview",
                                              "llama-3.3-70b-versatile",
                                              "meta-llama/llama-4-scout-17b-16e-instruct",
                                              "meta-llama/llama-4-maverick-17b-128e-instruct",
                                              "mixtral-8x7b-32768",
                                              "gemma-7b-it",
                                              "gemma2-9b-it",
                                              "claude-opus-4-20250514",
                                              "claude-sonnet-4-20250514",
                                              "claude-3-5-sonnet-20240620",
                                              "claude-3-5-sonnet-20241022",
                                              "claude-3-opus-20240229",
                                              "claude-3-sonnet-20240229",
                                              "claude-3-haiku-20240307",
                                              "claude-3-5-haiku-20241022",
                                              "claude-3-7-sonnet-20250219",
                                              "gemini-1.5-pro",
                                              "gemini-1.5-flash",
                                              "gemini-1.0-pro",
                                              "gemini-2.0-flash-exp",
                                              "gemini-2.0-flash-thinking-exp-1219",
                                              "gemini-2.5-pro",
                                              "gemini-2.5-pro-exp-03-25",
                                              "gemini-2.5-pro-preview-03-25",
                                              "gemini-2.5-flash-preview-05-20",
                                              "gemini-2.5-flash",
                                              "gpt-4-32k",
                                              "gpt-4",
                                              "gpt-3.5-turbo-16k",
                                              "gpt-3.5-turbo",
                                              "deepseek-chat",
                                              "deepseek-r1-distill-llama-70b",
                                              "grok-2-latest",
                                              "grok-3",
                                              "grok-3-mini",
                                              "grok-3-fast",
                                              "grok-4-0709",
                                              "qwen-max-latest",
                                              "qwen-plus-latest",
                                              "qwen-turbo-latest",
                                              "custom-llm",
                                              "models/gemini-2.5-pro-preview-03-25",
                                              "azure-eu-gpt-4o",
                                              "azure-na-gpt-4o"
                                            ]
                                          },
                                          "temperature": {
                                            "type": "number",
                                            "description": "The temperature of the LLM"
                                          },
                                          "maxTokens": {
                                            "type": "number",
                                            "description": "The max tokens of the LLM"
                                          },
                                          "customModelId": {
                                            "type": "string",
                                            "description": "The custom model id of the LLM"
                                          },
                                          "serverUrl": {
                                            "type": "string",
                                            "description": "The server url of the LLM"
                                          },
                                          "apiKey": {
                                            "type": "string",
                                            "description": "The api key of the LLM"
                                          }
                                        },
                                        "required": [
                                          "modelId",
                                          "temperature",
                                          "maxTokens"
                                        ],
                                        "additionalProperties": false
                                      },
                                      "routerLlmConfig": {
                                        "type": "object",
                                        "properties": {
                                          "modelId": {
                                            "type": "string",
                                            "enum": [
                                              "gpt-5-chat-latest",
                                              "gpt-5-2025-08-07",
                                              "gpt-5-mini-2025-08-07",
                                              "gpt-5-nano-2025-08-07",
                                              "gpt-3.5-turbo-0125",
                                              "gpt-4-1106-preview",
                                              "gpt-4.5-preview-2025-02-27",
                                              "gpt-4o",
                                              "gpt-4o-mini",
                                              "gpt-4.1-2025-04-14",
                                              "gpt-4.1-mini-2025-04-14",
                                              "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                              "llama3-8b-8192",
                                              "llama3-70b-8192",
                                              "llama-3.1-8b-instant",
                                              "llama-3.1-70b-versatile",
                                              "llama-3.2-90b-text-preview",
                                              "llama-3.2-11b-text-preview",
                                              "llama-3.3-70b-versatile",
                                              "meta-llama/llama-4-scout-17b-16e-instruct",
                                              "meta-llama/llama-4-maverick-17b-128e-instruct",
                                              "mixtral-8x7b-32768",
                                              "gemma-7b-it",
                                              "gemma2-9b-it",
                                              "claude-opus-4-20250514",
                                              "claude-sonnet-4-20250514",
                                              "claude-3-5-sonnet-20240620",
                                              "claude-3-5-sonnet-20241022",
                                              "claude-3-opus-20240229",
                                              "claude-3-sonnet-20240229",
                                              "claude-3-haiku-20240307",
                                              "claude-3-5-haiku-20241022",
                                              "claude-3-7-sonnet-20250219",
                                              "gemini-1.5-pro",
                                              "gemini-1.5-flash",
                                              "gemini-1.0-pro",
                                              "gemini-2.0-flash-exp",
                                              "gemini-2.0-flash-thinking-exp-1219",
                                              "gemini-2.5-pro",
                                              "gemini-2.5-pro-exp-03-25",
                                              "gemini-2.5-pro-preview-03-25",
                                              "gemini-2.5-flash-preview-05-20",
                                              "gemini-2.5-flash",
                                              "gpt-4-32k",
                                              "gpt-4",
                                              "gpt-3.5-turbo-16k",
                                              "gpt-3.5-turbo",
                                              "deepseek-chat",
                                              "deepseek-r1-distill-llama-70b",
                                              "grok-2-latest",
                                              "grok-3",
                                              "grok-3-mini",
                                              "grok-3-fast",
                                              "grok-4-0709",
                                              "qwen-max-latest",
                                              "qwen-plus-latest",
                                              "qwen-turbo-latest",
                                              "custom-llm",
                                              "models/gemini-2.5-pro-preview-03-25",
                                              "azure-eu-gpt-4o",
                                              "azure-na-gpt-4o"
                                            ]
                                          },
                                          "temperature": {
                                            "type": "number",
                                            "description": "The temperature of the LLM"
                                          },
                                          "maxTokens": {
                                            "type": "number",
                                            "description": "The max tokens of the LLM"
                                          },
                                          "customModelId": {
                                            "type": "string",
                                            "description": "The custom model id of the LLM"
                                          },
                                          "serverUrl": {
                                            "type": "string",
                                            "description": "The server url of the LLM"
                                          },
                                          "apiKey": {
                                            "type": "string",
                                            "description": "The api key of the LLM"
                                          }
                                        },
                                        "required": [
                                          "modelId",
                                          "temperature",
                                          "maxTokens"
                                        ],
                                        "additionalProperties": false,
                                        "description": "The LLM config that will be used for the router node, NOTE: This must be a fast LLM model or the latency will be too high between responses."
                                      },
                                      "toolUseBias": {
                                        "type": "number",
                                        "description": "The bias of the LLM to use tools if 0 it will never use tools, if 1 it will only use tools."
                                      },
                                      "autoRerouter": {
                                        "type": "object",
                                        "properties": {
                                          "enabled": {
                                            "type": "boolean",
                                            "description": "If true, the LLM will try to detect if the user has changed his mind about something enabling the AI to rewind back to the previous node."
                                          },
                                          "level": {
                                            "type": "number",
                                            "description": "The level of rewinding, if 1 the LLM will have access to only 1 level or rewind capabilities meaning if it went from node A > B > C > D  then if it at node d & it detects it needs to be at node B again it will be able to rewind back to node B if the level is at least 2, it will not be able to detect node A unless the level is 3 or more, and so on."
                                          }
                                        },
                                        "required": ["enabled", "level"],
                                        "additionalProperties": false,
                                        "description": "The auto rerouter of this node."
                                      },
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "start",
                                          "end",
                                          "default",
                                          "condition",
                                          "note"
                                        ],
                                        "description": "The type of the node, if not provided it will be a normal LLM node."
                                      },
                                      "rf": {
                                        "description": "The position of the node in the reactflow canvas."
                                      },
                                      "kb": {
                                        "type": "object",
                                        "properties": {
                                          "enabled": { "type": "boolean" },
                                          "maxChunks": {
                                            "type": "number",
                                            "description": "The max chunks to use from the KB."
                                          },
                                          "tags": {
                                            "type": "array",
                                            "items": { "type": "string" },
                                            "description": "The tags to use to filter the docs we search through"
                                          },
                                          "smartSearch": {
                                            "type": "boolean",
                                            "description": "If true, the LLM will use the smart search to search through the docs."
                                          }
                                        },
                                        "required": ["enabled", "maxChunks"],
                                        "additionalProperties": false
                                      },
                                      "conditionData": {
                                        "type": "object",
                                        "properties": {
                                          "condition": {
                                            "type": "string",
                                            "description": "The condition to check."
                                          }
                                        },
                                        "required": ["condition"],
                                        "additionalProperties": false
                                      },
                                      "preStart": {
                                        "type": "object",
                                        "properties": {
                                          "url": {
                                            "type": "string",
                                            "description": "The URL to send the GET request to."
                                          },
                                          "enabled": {
                                            "type": "boolean",
                                            "description": "If true, we will send a GET request to the URL before starting the node."
                                          },
                                          "testConvoIdValue": {
                                            "type": "string",
                                            "description": "The value to test the URL with."
                                          }
                                        },
                                        "additionalProperties": false,
                                        "description": "The pre start tool of the node, we will send a GET request to this URL before starting the node and provide the results to the AI. GET {url}/{user_id}/{node_name}"
                                      },
                                      "startConfig": {
                                        "type": "object",
                                        "properties": {
                                          "initialMessage": {
                                            "type": "string",
                                            "description": "The initial message to start the conversation with"
                                          },
                                          "userStarts": {
                                            "type": "boolean",
                                            "description": "Whether the user or AI agent gives the first message"
                                          }
                                        },
                                        "additionalProperties": false,
                                        "description": "Configuration for start nodes"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "name",
                                      "description",
                                      "instructions",
                                      "llmConfig"
                                    ],
                                    "additionalProperties": false,
                                    "description": "A node in the LLM chain."
                                  }
                                },
                                "enableNodes": { "type": "boolean" },
                                "advanced": {
                                  "type": "object",
                                  "properties": {
                                    "serverUrl": { "type": "string" },
                                    "serverUrlSecret": { "type": "string" }
                                  },
                                  "additionalProperties": false
                                },
                                "nodesSettings": {
                                  "type": "object",
                                  "properties": {
                                    "enableUIEngineForms": {
                                      "type": "boolean",
                                      "description": "If true, the LLM will be able to show forms on web channel only."
                                    },
                                    "geminiLiveOptions": {},
                                    "appendBeforePrompt": {
                                      "type": "string",
                                      "description": "The prompt to append to the nodes' prompt."
                                    },
                                    "routerLLmOptions": {
                                      "type": "object",
                                      "properties": {
                                        "modelId": {
                                          "type": "string",
                                          "enum": [
                                            "gpt-5-chat-latest",
                                            "gpt-5-2025-08-07",
                                            "gpt-5-mini-2025-08-07",
                                            "gpt-5-nano-2025-08-07",
                                            "gpt-3.5-turbo-0125",
                                            "gpt-4-1106-preview",
                                            "gpt-4.5-preview-2025-02-27",
                                            "gpt-4o",
                                            "gpt-4o-mini",
                                            "gpt-4.1-2025-04-14",
                                            "gpt-4.1-mini-2025-04-14",
                                            "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                            "llama3-8b-8192",
                                            "llama3-70b-8192",
                                            "llama-3.1-8b-instant",
                                            "llama-3.1-70b-versatile",
                                            "llama-3.2-90b-text-preview",
                                            "llama-3.2-11b-text-preview",
                                            "llama-3.3-70b-versatile",
                                            "meta-llama/llama-4-scout-17b-16e-instruct",
                                            "meta-llama/llama-4-maverick-17b-128e-instruct",
                                            "mixtral-8x7b-32768",
                                            "gemma-7b-it",
                                            "gemma2-9b-it",
                                            "claude-opus-4-20250514",
                                            "claude-sonnet-4-20250514",
                                            "claude-3-5-sonnet-20240620",
                                            "claude-3-5-sonnet-20241022",
                                            "claude-3-opus-20240229",
                                            "claude-3-sonnet-20240229",
                                            "claude-3-haiku-20240307",
                                            "claude-3-5-haiku-20241022",
                                            "claude-3-7-sonnet-20250219",
                                            "gemini-1.5-pro",
                                            "gemini-1.5-flash",
                                            "gemini-1.0-pro",
                                            "gemini-2.0-flash-exp",
                                            "gemini-2.0-flash-thinking-exp-1219",
                                            "gemini-2.5-pro",
                                            "gemini-2.5-pro-exp-03-25",
                                            "gemini-2.5-pro-preview-03-25",
                                            "gemini-2.5-flash-preview-05-20",
                                            "gemini-2.5-flash",
                                            "gpt-4-32k",
                                            "gpt-4",
                                            "gpt-3.5-turbo-16k",
                                            "gpt-3.5-turbo",
                                            "deepseek-chat",
                                            "deepseek-r1-distill-llama-70b",
                                            "grok-2-latest",
                                            "grok-3",
                                            "grok-3-mini",
                                            "grok-3-fast",
                                            "grok-4-0709",
                                            "qwen-max-latest",
                                            "qwen-plus-latest",
                                            "qwen-turbo-latest",
                                            "custom-llm",
                                            "models/gemini-2.5-pro-preview-03-25",
                                            "azure-eu-gpt-4o",
                                            "azure-na-gpt-4o"
                                          ]
                                        },
                                        "temperature": {
                                          "type": "number",
                                          "description": "The temperature of the LLM"
                                        },
                                        "maxTokens": {
                                          "type": "number",
                                          "description": "The max tokens of the LLM"
                                        },
                                        "customModelId": {
                                          "type": "string",
                                          "description": "The custom model id of the LLM"
                                        },
                                        "serverUrl": {
                                          "type": "string",
                                          "description": "The server url of the LLM"
                                        },
                                        "apiKey": {
                                          "type": "string",
                                          "description": "The api key of the LLM"
                                        }
                                      },
                                      "required": [
                                        "modelId",
                                        "temperature",
                                        "maxTokens"
                                      ],
                                      "additionalProperties": false
                                    },
                                    "defaultLLmOptions": {
                                      "type": "object",
                                      "properties": {
                                        "modelId": {
                                          "type": "string",
                                          "enum": [
                                            "gpt-5-chat-latest",
                                            "gpt-5-2025-08-07",
                                            "gpt-5-mini-2025-08-07",
                                            "gpt-5-nano-2025-08-07",
                                            "gpt-3.5-turbo-0125",
                                            "gpt-4-1106-preview",
                                            "gpt-4.5-preview-2025-02-27",
                                            "gpt-4o",
                                            "gpt-4o-mini",
                                            "gpt-4.1-2025-04-14",
                                            "gpt-4.1-mini-2025-04-14",
                                            "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                            "llama3-8b-8192",
                                            "llama3-70b-8192",
                                            "llama-3.1-8b-instant",
                                            "llama-3.1-70b-versatile",
                                            "llama-3.2-90b-text-preview",
                                            "llama-3.2-11b-text-preview",
                                            "llama-3.3-70b-versatile",
                                            "meta-llama/llama-4-scout-17b-16e-instruct",
                                            "meta-llama/llama-4-maverick-17b-128e-instruct",
                                            "mixtral-8x7b-32768",
                                            "gemma-7b-it",
                                            "gemma2-9b-it",
                                            "claude-opus-4-20250514",
                                            "claude-sonnet-4-20250514",
                                            "claude-3-5-sonnet-20240620",
                                            "claude-3-5-sonnet-20241022",
                                            "claude-3-opus-20240229",
                                            "claude-3-sonnet-20240229",
                                            "claude-3-haiku-20240307",
                                            "claude-3-5-haiku-20241022",
                                            "claude-3-7-sonnet-20250219",
                                            "gemini-1.5-pro",
                                            "gemini-1.5-flash",
                                            "gemini-1.0-pro",
                                            "gemini-2.0-flash-exp",
                                            "gemini-2.0-flash-thinking-exp-1219",
                                            "gemini-2.5-pro",
                                            "gemini-2.5-pro-exp-03-25",
                                            "gemini-2.5-pro-preview-03-25",
                                            "gemini-2.5-flash-preview-05-20",
                                            "gemini-2.5-flash",
                                            "gpt-4-32k",
                                            "gpt-4",
                                            "gpt-3.5-turbo-16k",
                                            "gpt-3.5-turbo",
                                            "deepseek-chat",
                                            "deepseek-r1-distill-llama-70b",
                                            "grok-2-latest",
                                            "grok-3",
                                            "grok-3-mini",
                                            "grok-3-fast",
                                            "grok-4-0709",
                                            "qwen-max-latest",
                                            "qwen-plus-latest",
                                            "qwen-turbo-latest",
                                            "custom-llm",
                                            "models/gemini-2.5-pro-preview-03-25",
                                            "azure-eu-gpt-4o",
                                            "azure-na-gpt-4o"
                                          ]
                                        },
                                        "temperature": {
                                          "type": "number",
                                          "description": "The temperature of the LLM"
                                        },
                                        "maxTokens": {
                                          "type": "number",
                                          "description": "The max tokens of the LLM"
                                        },
                                        "customModelId": {
                                          "type": "string",
                                          "description": "The custom model id of the LLM"
                                        },
                                        "serverUrl": {
                                          "type": "string",
                                          "description": "The server url of the LLM"
                                        },
                                        "apiKey": {
                                          "type": "string",
                                          "description": "The api key of the LLM"
                                        }
                                      },
                                      "required": [
                                        "modelId",
                                        "temperature",
                                        "maxTokens"
                                      ],
                                      "additionalProperties": false
                                    },
                                    "backchannelOnChoosingNodes": {
                                      "type": "boolean",
                                      "description": "If true, the LLM will say uha/i see before choosing a node."
                                    },
                                    "enableUiEngine": {
                                      "type": "boolean",
                                      "description": "If true, the LLM will be able to show buttons, cards, images on text channels only."
                                    },
                                    "fallbackModelIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "gpt-5-chat-latest",
                                          "gpt-5-2025-08-07",
                                          "gpt-5-mini-2025-08-07",
                                          "gpt-5-nano-2025-08-07",
                                          "gpt-3.5-turbo-0125",
                                          "gpt-4-1106-preview",
                                          "gpt-4.5-preview-2025-02-27",
                                          "gpt-4o",
                                          "gpt-4o-mini",
                                          "gpt-4.1-2025-04-14",
                                          "gpt-4.1-mini-2025-04-14",
                                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                          "llama3-8b-8192",
                                          "llama3-70b-8192",
                                          "llama-3.1-8b-instant",
                                          "llama-3.1-70b-versatile",
                                          "llama-3.2-90b-text-preview",
                                          "llama-3.2-11b-text-preview",
                                          "llama-3.3-70b-versatile",
                                          "meta-llama/llama-4-scout-17b-16e-instruct",
                                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                                          "mixtral-8x7b-32768",
                                          "gemma-7b-it",
                                          "gemma2-9b-it",
                                          "claude-opus-4-20250514",
                                          "claude-sonnet-4-20250514",
                                          "claude-3-5-sonnet-20240620",
                                          "claude-3-5-sonnet-20241022",
                                          "claude-3-opus-20240229",
                                          "claude-3-sonnet-20240229",
                                          "claude-3-haiku-20240307",
                                          "claude-3-5-haiku-20241022",
                                          "claude-3-7-sonnet-20250219",
                                          "gemini-1.5-pro",
                                          "gemini-1.5-flash",
                                          "gemini-1.0-pro",
                                          "gemini-2.0-flash-exp",
                                          "gemini-2.0-flash-thinking-exp-1219",
                                          "gemini-2.5-pro",
                                          "gemini-2.5-pro-exp-03-25",
                                          "gemini-2.5-pro-preview-03-25",
                                          "gemini-2.5-flash-preview-05-20",
                                          "gemini-2.5-flash",
                                          "gpt-4-32k",
                                          "gpt-4",
                                          "gpt-3.5-turbo-16k",
                                          "gpt-3.5-turbo",
                                          "deepseek-chat",
                                          "deepseek-r1-distill-llama-70b",
                                          "grok-2-latest",
                                          "grok-3",
                                          "grok-3-mini",
                                          "grok-3-fast",
                                          "grok-4-0709",
                                          "qwen-max-latest",
                                          "qwen-plus-latest",
                                          "qwen-turbo-latest",
                                          "custom-llm",
                                          "models/gemini-2.5-pro-preview-03-25",
                                          "azure-eu-gpt-4o",
                                          "azure-na-gpt-4o"
                                        ]
                                      }
                                    },
                                    "silenceDetection": {
                                      "type": "object",
                                      "properties": {
                                        "enabled": {
                                          "type": "boolean",
                                          "default": false,
                                          "description": "Whether to enable the silence detection feature which will insert filler phrases during long periods of silence"
                                        },
                                        "timeoutSeconds": {
                                          "type": "number",
                                          "default": 60,
                                          "description": "Number of seconds of silence before triggering a filler phrase"
                                        },
                                        "endCallAfterNPhrases": {
                                          "type": "number",
                                          "default": 1,
                                          "description": "Number of filler phrases utterances to say before ending the call if 0 it will end the call instantly after reching the timeout."
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "startCallPhrases": {
                                      "type": "array",
                                      "items": { "type": "string" }
                                    },
                                    "fillerWordsOnToolUsage": {
                                      "type": "boolean",
                                      "description": "If true, the LLM will say filler words on tool usage, like '1 moment', 'be right back', 'you know', etc."
                                    },
                                    "smartEndpointing": {
                                      "type": "object",
                                      "properties": {
                                        "enabled": { "type": "boolean" },
                                        "waitSeconds": { "type": "number" },
                                        "onPunctuationSeconds": {
                                          "type": "number"
                                        },
                                        "onNoPunctuationSeconds": {
                                          "type": "number"
                                        },
                                        "onNumberSeconds": { "type": "number" }
                                      },
                                      "additionalProperties": false
                                    },
                                    "stopSpeakPlan": {
                                      "type": "object",
                                      "properties": {
                                        "minWords": {
                                          "type": "number",
                                          "description": "The minimum words to speak from the user for the AI to be interrupted and stop talking ."
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "callTimeoutSeconds": {
                                      "type": "number",
                                      "description": "The timeout for the call in seconds."
                                    },
                                    "enableEndcallTool": {
                                      "type": "boolean",
                                      "description": "Whether to enable endcall tool."
                                    },
                                    "voiceSpecific": {
                                      "type": "object",
                                      "properties": {
                                        "minCharacters": {
                                          "type": "number",
                                          "description": "The minimum number of characters to init the speech gen to generate audio for, the more the higher the latency will be, default is 5"
                                        },
                                        "maxLengthWithoutPunctuation": {
                                          "type": "number",
                                          "description": "The maximum length of the string without punctuation to init the speech gen to generate audio for, the more the higher the latency will be, default is 100"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "enabledGlobalTools": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "enum": ["handoffHumanDashboardTool"]
                                      },
                                      "description": "The global tools that will be enabled for the LLM."
                                    },
                                    "defaultToolOverrides": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "object",
                                        "properties": {
                                          "description": {
                                            "type": "string",
                                            "nullable": true
                                          },
                                          "fields": {
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "string",
                                                    "number",
                                                    "boolean"
                                                  ]
                                                },
                                                "description": {
                                                  "type": "string"
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "nullable": true
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "description": "Overrides for default system tools configuration."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "description": "Global options for the nodes setup, text/voice."
                                },
                                "id": { "type": "string" },
                                "enableFallback": {
                                  "type": "boolean",
                                  "description": "Enable fallback for the agent llm model."
                                },
                                "fallbackSettings": {
                                  "type": "object",
                                  "properties": {
                                    "model": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ],
                                      "description": "The model to use for fallback."
                                    },
                                    "creditThreshold": {
                                      "type": "number",
                                      "description": "The credit threshold for fallback."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "description": "Fallback settings for the agent llm model."
                                },
                                "marketplace": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean",
                                      "description": "Whether to show the agent in marketplace or not."
                                    },
                                    "priceUSD": {
                                      "type": "number",
                                      "description": "The price for the agent, default is 0/free"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "description": "Marketplace settings for the agent."
                                },
                                "disableRating": {
                                  "type": "boolean",
                                  "description": "Whether to disable the chat end rating feature."
                                },
                                "chatEndMessage": {
                                  "type": "string",
                                  "description": "The message to show when the chat ends."
                                },
                                "aiIntroductionMessage": {
                                  "type": "string",
                                  "description": "The message to show when the user starts the chat on metachannels."
                                },
                                "enableAIIntroductionMessage": {
                                  "type": "boolean",
                                  "description": "Whether to enable the AI introduction message or not."
                                },
                                "deployed": {
                                  "type": "boolean",
                                  "description": "Whether the agent is deployed or not."
                                },
                                "captureIGStories": {
                                  "type": "boolean",
                                  "description": "Whether to capture instagram stories or not."
                                },
                                "gdprCompliance": {
                                  "type": "boolean",
                                  "description": "Whether to comply with GDPR or not."
                                },
                                "disableFileUpload": { "type": "boolean" },
                                "buttonVariant": {
                                  "type": "string",
                                  "enum": [
                                    "custom",
                                    "solid",
                                    "bordered",
                                    "light",
                                    "flat",
                                    "faded",
                                    "shadow",
                                    "ghost"
                                  ],
                                  "description": "The variant of the button. Custom is the default original styling."
                                },
                                "inputVariant": {
                                  "type": "string",
                                  "enum": [
                                    "custom",
                                    "flat",
                                    "bordered",
                                    "faded",
                                    "underlined"
                                  ],
                                  "description": "The variant of the input. Custom is the default original styling."
                                },
                                "privacyDisclaimer": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean",
                                      "description": "Whether to show privacy disclaimer before user interaction"
                                    },
                                    "text": {
                                      "type": "string",
                                      "description": "The privacy disclaimer text to display to users"
                                    },
                                    "privacyPolicyUrl": {
                                      "type": "string",
                                      "description": "URL to the privacy policy page"
                                    },
                                    "acceptButtonLabel": {
                                      "type": "string",
                                      "description": "Label for the accept/proceed button"
                                    },
                                    "privacyPolicyButtonLabel": {
                                      "type": "string",
                                      "description": "Label for the privacy policy link button"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "description": "Privacy disclaimer configuration for the agent"
                                },
                                "leadCollectionRules": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean",
                                      "description": "Whether to use custom lead collection rules. If false or not set, uses default behavior (collect when email, phone_number, or phone is present)"
                                    },
                                    "rules": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "variables": {
                                            "type": "array",
                                            "items": { "type": "string" },
                                            "description": "Array of variable names that must ALL be present for this rule to match (AND condition)"
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "Optional description of what this rule captures"
                                          }
                                        },
                                        "required": ["variables"],
                                        "additionalProperties": false
                                      },
                                      "description": "Array of rule sets. A lead is collected if it matches ANY rule set (OR condition between rules). Each rule requires ALL its variables to be present (AND condition within a rule)."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "description": "Custom lead collection rules. Allows defining which variable combinations should trigger lead capture. If not set, defaults to collecting leads when email, phone_number, or phone is present."
                                }
                              },
                              "additionalProperties": false
                            },
                            "workspaceData": {},
                            "twilioAccountSid": { "type": "string" },
                            "twilioAuthToken": { "type": "string" },
                            "assignedGlobalPrompts": {
                              "type": "array",
                              "items": { "type": "string" }
                            }
                          },
                          "additionalProperties": false
                        },
                        "overrideInitialPrompt": { "type": "boolean" },
                        "messagesHistory": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "role": {
                                "type": "string",
                                "enum": ["user", "assistant", "system", "tool"]
                              },
                              "content": { "type": "string" },
                              "name": { "type": "string" },
                              "tool_call_id": { "type": "string" },
                              "tool_name": { "type": "string" },
                              "tool_calls": {}
                            },
                            "required": ["role", "content"],
                            "additionalProperties": false
                          }
                        },
                        "agentOverrides": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "**Title**: The title of the agent."
                            },
                            "description": {
                              "type": "string",
                              "description": "**Description**: A brief description of the agent."
                            },
                            "theme": {
                              "type": "string",
                              "description": "**Theme**: The visual theme of the agent, e.g., 'blue-light' or 'custom-blue-dark'."
                            },
                            "voiceConfig": {
                              "type": "object",
                              "properties": {
                                "transcriber": {
                                  "type": "object",
                                  "properties": {
                                    "speechConfig": {
                                      "type": "object",
                                      "properties": {
                                        "format": { "type": "string" },
                                        "sampleRate": { "type": "number" }
                                      },
                                      "additionalProperties": false
                                    },
                                    "modelId": { "type": "string" },
                                    "patienceFactor": { "type": "number" },
                                    "language": { "type": "string" },
                                    "provider": {
                                      "type": "string",
                                      "enum": [
                                        "deepgram",
                                        "gladia",
                                        "assemblyai",
                                        "speechmatics",
                                        "google-cloud-speech",
                                        "google-live-transcription"
                                      ]
                                    },
                                    "randomOptions": {},
                                    "internal": {
                                      "type": "object",
                                      "properties": {
                                        "inputAudioStream": {},
                                        "debug": { "type": "boolean" }
                                      },
                                      "additionalProperties": false
                                    },
                                    "apiKey": { "type": "string" },
                                    "platformSpecific": {
                                      "type": "object",
                                      "properties": {
                                        "deepgram": {
                                          "type": "object",
                                          "properties": {
                                            "keywords": {
                                              "type": "array",
                                              "items": { "type": "string" },
                                              "description": "Keywords to focus on in the transcription."
                                            },
                                            "language": { "type": "string" },
                                            "smart_format": {
                                              "type": "boolean"
                                            },
                                            "model": { "type": "string" },
                                            "interim_results": {
                                              "type": "boolean"
                                            },
                                            "endpointing": { "type": "number" },
                                            "no_delay": { "type": "boolean" },
                                            "autoLanguageDetection": {
                                              "type": "boolean"
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "assemblyai": {
                                          "type": "object",
                                          "properties": {
                                            "modelId": { "type": "string" }
                                          },
                                          "required": ["modelId"],
                                          "additionalProperties": false
                                        },
                                        "googleCloud": {
                                          "type": "object",
                                          "properties": {
                                            "keywords": {
                                              "type": "array",
                                              "items": { "type": "string" },
                                              "description": "Keywords or phrases to focus on in the transcription."
                                            },
                                            "model": {
                                              "type": "string",
                                              "description": "The Google Cloud Speech model to use."
                                            },
                                            "languageCode": {
                                              "type": "string",
                                              "description": "The language code for transcription."
                                            },
                                            "enableAutomaticPunctuation": {
                                              "type": "boolean",
                                              "description": "Enable automatic punctuation."
                                            },
                                            "enableWordTimeOffsets": {
                                              "type": "boolean",
                                              "description": "Enable word time offsets."
                                            },
                                            "maxAlternatives": {
                                              "type": "number",
                                              "description": "Maximum number of recognition alternatives."
                                            },
                                            "profanityFilter": {
                                              "type": "boolean",
                                              "description": "Enable profanity filter."
                                            },
                                            "speechContexts": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "phrases": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "boost": { "type": "number" }
                                                },
                                                "required": ["phrases"],
                                                "additionalProperties": false
                                              },
                                              "description": "Speech contexts for better recognition."
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "utteranceThreshold": { "type": "number" },
                                    "inputVoiceEnhancer": { "type": "boolean" }
                                  },
                                  "required": ["provider"],
                                  "additionalProperties": false,
                                  "description": "**Transcriber**: The configuration options for the transcriber provider used by the agent."
                                },
                                "speechGen": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "highAudioQuality": {
                                          "type": "boolean",
                                          "description": "Generate highest quality audio possible, must have pro plan or higher on elevenlabs to enable your own key to work with this option."
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "elevenlabs",
                                            "deepgram",
                                            "cartesia",
                                            "playht",
                                            "azure",
                                            "rime-ai",
                                            "openai",
                                            "playai-groq",
                                            "google-cloud",
                                            "google-live"
                                          ],
                                          "description": "Speech providers supported by the app."
                                        },
                                        "modelId": {
                                          "type": "string",
                                          "description": "The model id of the speech gen."
                                        },
                                        "voiceId": {
                                          "type": "string",
                                          "description": "The voice id for the speech service."
                                        },
                                        "apiKey": { "type": "string" },
                                        "region": { "type": "string" },
                                        "backgroundNoise": {
                                          "type": "string",
                                          "enum": [
                                            "restaurant",
                                            "office",
                                            "park",
                                            "street"
                                          ]
                                        },
                                        "punctuationBreaks": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        },
                                        "platformSpecific": {
                                          "type": "object",
                                          "properties": {
                                            "elevenLabs": {
                                              "type": "object",
                                              "properties": {
                                                "stability": {
                                                  "type": "number"
                                                },
                                                "similarity_boost": {
                                                  "type": "number"
                                                },
                                                "use_speaker_boost": {
                                                  "type": "boolean"
                                                },
                                                "speed": { "type": "number" },
                                                "style": { "type": "number" }
                                              },
                                              "additionalProperties": false
                                            },
                                            "playht": {
                                              "type": "object",
                                              "properties": {
                                                "voiceId": { "type": "string" }
                                              },
                                              "required": ["voiceId"],
                                              "additionalProperties": false
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "backChannelling": {
                                          "type": "boolean",
                                          "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                        },
                                        "language": { "type": "string" },
                                        "enableLongMessageBackchannelling": {
                                          "type": "boolean",
                                          "description": "Whether to say umm, sure, etc.. when the user is talking for too long."
                                        },
                                        "backchannelMessages": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        },
                                        "backchannelInterval": {
                                          "type": "number"
                                        },
                                        "wordsReplacements": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "word": { "type": "string" },
                                              "replacement": {
                                                "type": "string"
                                              }
                                            },
                                            "required": ["word", "replacement"],
                                            "additionalProperties": false
                                          }
                                        }
                                      },
                                      "required": ["provider"]
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "internal": {
                                          "type": "object",
                                          "properties": {
                                            "inputTextStream": {},
                                            "audioConfig": {
                                              "type": "object",
                                              "properties": {
                                                "format": { "type": "string" },
                                                "sampleRate": {
                                                  "type": "number"
                                                },
                                                "channels": { "type": "number" }
                                              },
                                              "required": [
                                                "format",
                                                "sampleRate",
                                                "channels"
                                              ],
                                              "additionalProperties": false
                                            },
                                            "emitOnComplete": {
                                              "type": "boolean"
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      }
                                    }
                                  ],
                                  "description": "**Speech Generation**: The configuration options for the speech generation provider used by the agent."
                                },
                                "config": {
                                  "type": "object",
                                  "properties": {
                                    "recordAudio": { "type": "boolean" },
                                    "backgroundNoise": {
                                      "type": "string",
                                      "enum": [
                                        "restaurant",
                                        "office",
                                        "street",
                                        "none"
                                      ]
                                    },
                                    "enableWebCalling": { "type": "boolean" },
                                    "firstInputChunkUNIXMs": {
                                      "type": "number"
                                    },
                                    "firstOutputChunkUNIXMs": {
                                      "type": "number"
                                    }
                                  },
                                  "required": ["recordAudio"],
                                  "additionalProperties": false,
                                  "description": "**Call Configuration**: The call configuration settings for the agent."
                                }
                              },
                              "additionalProperties": false
                            },
                            "light": {
                              "type": "boolean",
                              "description": "Whether to enable light mode for the agent. If set to true, the agent will not retain previous chat interactions for privacy reasons."
                            },
                            "enableVertex": {
                              "type": "boolean",
                              "description": "Whether to enable Vertex AI for the agent."
                            },
                            "autoOpenWidget": {
                              "type": "boolean",
                              "description": "Whether to auto-open the widget when the agent is loaded."
                            },
                            "createdAtUNIX": {
                              "type": "number",
                              "description": "The timestamp when the agent was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                            },
                            "disabled": {
                              "type": "boolean",
                              "description": "Indicates whether the agent is disabled. If set to true, the agent will not be active."
                            },
                            "vectorDb": {
                              "description": "Specifies the vector database configuration for the agent. This database is used for handling vectorized data or embeddings."
                            },
                            "agentPlatform": {
                              "type": "string",
                              "description": "Specifies the platform on which the agent operates, such as web, mobile, or other environments."
                            },
                            "storageID": {
                              "type": "string",
                              "description": "The identifier for the agent's storage configuration."
                            },
                            "VF_DIALOGUE_API_KEY": {
                              "type": "string",
                              "description": "API key for VF dialogue integration, enabling the agent to communicate with external systems."
                            },
                            "VF_PROJECT_API_KEY": {
                              "type": "string",
                              "description": "API key associated with the VF project to authenticate and enable specific functionalities."
                            },
                            "VF_PROJECT_ID": {
                              "type": "string",
                              "description": "The unique identifier of the VF project linked to the agent."
                            },
                            "VF_KB_API_KEY": {
                              "type": "string",
                              "description": "API key for accessing the VF knowledge base, enabling advanced knowledge retrieval capabilities."
                            },
                            "roundedImageURL": {
                              "type": "string",
                              "description": "URL pointing to the rounded image asset used to visually represent the agent."
                            },
                            "rectangeImageURL": {
                              "type": "string",
                              "description": "URL pointing to the rectangular image asset for the agent's branding or display."
                            },
                            "messageDelayMS": {
                              "type": "number",
                              "description": "Specifies the delay in milliseconds for the agent to send messages, simulating natural conversation timing."
                            },
                            "scrollAnimation": {
                              "type": "boolean",
                              "description": "Indicates whether scroll animations are enabled for smooth transitions in the chat interface."
                            },
                            "proactiveMessage": {
                              "type": "string",
                              "description": "A predefined message the agent sends proactively to engage users."
                            },
                            "acceptFileUpload": {
                              "type": "boolean",
                              "description": "Determines if the agent accepts file uploads from users as part of the interaction."
                            },
                            "recordChatHistory": {
                              "type": "boolean",
                              "description": "Specifies whether the agent logs chat histories for future reference or analysis."
                            },
                            "chatBgURL": {
                              "type": "string",
                              "description": "URL of the background image used in the chat interface."
                            },
                            "disableSmoothScroll": {
                              "type": "boolean",
                              "description": "Disables smooth scrolling if set to true, potentially improving performance on low-end devices."
                            },
                            "isDeployed": {
                              "type": "boolean",
                              "description": "Indicates whether the agent is currently deployed and operational."
                            },
                            "tokensUsage": {
                              "description": "Tracks the token usage statistics for the agent, typically used in LLM integrations."
                            },
                            "maxTokensUsage": {
                              "description": "Defines the maximum allowable token usage for the agent to prevent overconsumption."
                            },
                            "fontFamily": {
                              "type": "string",
                              "description": "The font family used in the agent's user interface for consistent branding."
                            },
                            "branding": {
                              "type": "string",
                              "description": "Custom branding information or labels associated with the agent."
                            },
                            "customThemeJSONString": {
                              "type": "string",
                              "description": "A JSON string defining a custom theme for the agent's interface."
                            },
                            "autoStartWidget": {
                              "type": "boolean",
                              "description": "Determines if the widget should auto-start upon page load."
                            },
                            "allTimeTriggers": {
                              "type": "number",
                              "description": "The total number of triggers or interactions the agent has handled."
                            },
                            "syncBrowser": {
                              "type": "boolean",
                              "description": "Enables synchronization of settings or states with the browser session."
                            },
                            "delayBeforeSubmit": {
                              "type": "number",
                              "description": "The delay (in milliseconds) before submitting user input to the agent."
                            },
                            "region": {
                              "type": "string",
                              "enum": ["eu", "na"],
                              "description": "Defines the geographical region settings for the agent, such as localization."
                            },
                            "listenForUrlChanges": {
                              "type": "boolean",
                              "description": "Specifies if the agent should monitor and react to changes in the browser URL."
                            },
                            "chatForget": {
                              "type": "boolean",
                              "description": "If enabled, the agent will not retain previous chat interactions for privacy reasons."
                            },
                            "lang": {
                              "type": "string",
                              "description": "Specifies the default language for the agent's interactions and responses."
                            },
                            "enableAudioSupport": {
                              "type": "boolean",
                              "description": "Enables audio features, allowing the agent to process and respond to audio inputs."
                            },
                            "AITranslateTo": {
                              "type": "string",
                              "description": "Defines the target language for AI translation during interactions."
                            },
                            "enableAITranslate": {
                              "type": "boolean",
                              "description": "Activates AI-based translation for multilingual support."
                            },
                            "disableNoReplyListener": {
                              "type": "boolean",
                              "description": "Disables the listener for instances where no reply is detected from the agent."
                            },
                            "disableHumanHandoff": {
                              "type": "boolean",
                              "description": "Prevents the agent from escalating interactions to a human operator."
                            },
                            "alwaysShowHandoff": {
                              "type": "boolean",
                              "description": "Ensures the handoff option is always visible, regardless of agent status."
                            },
                            "manualControl": {
                              "type": "boolean",
                              "description": "Allows manual control over specific agent functionalities."
                            },
                            "enableVGHandoff": {
                              "type": "boolean",
                              "description": "Activates VG-specific handoff mechanisms for the agent."
                            },
                            "enableGeoAnalytics": {
                              "type": "boolean",
                              "description": "Enables geographic analytics to track user interactions based on location."
                            },
                            "hideVoiceflowAnalytics": {
                              "type": "boolean",
                              "description": "Hides Voiceflow-specific analytics including intents, conversation flow metrics, and rating analytics."
                            },
                            "hideCallAnalytics": {
                              "type": "boolean",
                              "description": "Hides voice call analytics including duration, latency, cost breakdown, call counts, and call end reasons."
                            },
                            "hideConversationMetrics": {
                              "type": "boolean",
                              "description": "Hides conversation metrics including user retention, conversation length, time retention, and engagement metrics."
                            },
                            "hideCustomAnalytics": {
                              "type": "boolean",
                              "description": "Hides user-created custom charts and metrics from the analytics dashboard."
                            },
                            "hideVapiAnalytics": {
                              "type": "boolean",
                              "description": "Hides VAPI-specific analytics including cost tracking and voice-related metrics."
                            },
                            "hideFunnelAnalytics": {
                              "type": "boolean",
                              "description": "Hides the user engagement funnel chart that tracks progression from widget views to high engagement."
                            },
                            "fixedHandoffPopup": {
                              "type": "boolean",
                              "description": "Ensures the handoff popup remains fixed in the interface."
                            },
                            "buttonsLayout": {
                              "type": "string",
                              "enum": ["horizontal", "vertical", "in-footer"],
                              "description": "Defines the layout and style of buttons in the agent's interface."
                            },
                            "ADVANCED_customCSS": {
                              "type": "string",
                              "description": "Specifies advanced custom CSS for overriding the default styling of the agent's interface."
                            },
                            "messagesLimit": {
                              "type": "number",
                              "description": "Sets a cap on the number of messages the agent can exchange in a single session."
                            },
                            "whatsappToken": {
                              "type": "string",
                              "description": "Token for authenticating and integrating with WhatsApp services."
                            },
                            "whatsappNumberId": {
                              "type": "string",
                              "description": "The ID associated with the WhatsApp number used by the agent."
                            },
                            "whatsappBusniessId": {
                              "type": "string",
                              "description": "The business ID for WhatsApp integration, enabling enterprise-level features."
                            },
                            "waTestNumber": {
                              "type": "string",
                              "description": "A test number used during WhatsApp integration setup or testing."
                            },
                            "waVerifyPassed": {
                              "type": "boolean",
                              "description": "Indicates if WhatsApp verification was successfully completed."
                            },
                            "waTestPassed": {
                              "type": "boolean",
                              "description": "Indicates if the WhatsApp integration test was successful."
                            },
                            "webhookUrl": {
                              "type": "string",
                              "description": "The URL where the agent sends webhook events to external systems."
                            },
                            "gcloudPrivateKey": {
                              "type": "string",
                              "description": "Private key for Google Cloud services integration."
                            },
                            "gcloudClientEmail": {
                              "type": "string",
                              "description": "Client email for Google Cloud authentication."
                            },
                            "smartInit": {
                              "type": "boolean",
                              "description": "Activates smart initialization features for the agent."
                            },
                            "UIhandoffTitle": {
                              "type": "string",
                              "description": "Title displayed during UI handoff interactions."
                            },
                            "UIhandoffSubtitle": {
                              "type": "string",
                              "description": "Subtitle displayed during UI handoff interactions."
                            },
                            "igVerified": {
                              "type": "boolean",
                              "description": "Indicates if the agent's Instagram integration is verified."
                            },
                            "igAccessToken": {
                              "type": "string",
                              "description": "Access token for authenticating Instagram API requests."
                            },
                            "showHandoffEvenIfOffline": {
                              "type": "boolean",
                              "description": "Displays the handoff option even if the agent is offline."
                            },
                            "persistHandoffOnRefresh": {
                              "type": "boolean",
                              "description": "Maintains handoff state when users refresh or close their browser tabs."
                            },
                            "blockInputDuringHandoffRequest": {
                              "type": "boolean",
                              "description": "Blocks chat input when a user requests human handoff but no human has been assigned yet. Only applies to VF agents."
                            },
                            "customButtonJSON_STRING": {
                              "type": "string",
                              "description": "JSON string defining custom buttons for the agent's interface."
                            },
                            "vg_initPrompt": {
                              "type": "string",
                              "description": "The initial prompt displayed or used by the VF system."
                            },
                            "vg_prompt": {
                              "type": "string",
                              "description": "The main prompt template used for generating responses."
                            },
                            "vg_initMessages": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "Initial messages loaded for the agent's conversation flow."
                            },
                            "vg_systemPrompt": {
                              "type": "string",
                              "description": "System-level prompt defining the agent's behavior and rules."
                            },
                            "vg_temperature": {
                              "type": "number",
                              "description": "Defines the temperature setting for response variability in the VF model."
                            },
                            "vg_defaultModel": {
                              "type": "string",
                              "enum": [
                                "gpt-5-chat-latest",
                                "gpt-5-2025-08-07",
                                "gpt-5-mini-2025-08-07",
                                "gpt-5-nano-2025-08-07",
                                "gpt-3.5-turbo-0125",
                                "gpt-4-1106-preview",
                                "gpt-4.5-preview-2025-02-27",
                                "gpt-4o",
                                "gpt-4o-mini",
                                "gpt-4.1-2025-04-14",
                                "gpt-4.1-mini-2025-04-14",
                                "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                "llama3-8b-8192",
                                "llama3-70b-8192",
                                "llama-3.1-8b-instant",
                                "llama-3.1-70b-versatile",
                                "llama-3.2-90b-text-preview",
                                "llama-3.2-11b-text-preview",
                                "llama-3.3-70b-versatile",
                                "meta-llama/llama-4-scout-17b-16e-instruct",
                                "meta-llama/llama-4-maverick-17b-128e-instruct",
                                "mixtral-8x7b-32768",
                                "gemma-7b-it",
                                "gemma2-9b-it",
                                "claude-opus-4-20250514",
                                "claude-sonnet-4-20250514",
                                "claude-3-5-sonnet-20240620",
                                "claude-3-5-sonnet-20241022",
                                "claude-3-opus-20240229",
                                "claude-3-sonnet-20240229",
                                "claude-3-haiku-20240307",
                                "claude-3-5-haiku-20241022",
                                "claude-3-7-sonnet-20250219",
                                "gemini-1.5-pro",
                                "gemini-1.5-flash",
                                "gemini-1.0-pro",
                                "gemini-2.0-flash-exp",
                                "gemini-2.0-flash-thinking-exp-1219",
                                "gemini-2.5-pro",
                                "gemini-2.5-pro-exp-03-25",
                                "gemini-2.5-pro-preview-03-25",
                                "gemini-2.5-flash-preview-05-20",
                                "gemini-2.5-flash",
                                "gpt-4-32k",
                                "gpt-4",
                                "gpt-3.5-turbo-16k",
                                "gpt-3.5-turbo",
                                "deepseek-chat",
                                "deepseek-r1-distill-llama-70b",
                                "grok-2-latest",
                                "grok-3",
                                "grok-3-mini",
                                "grok-3-fast",
                                "grok-4-0709",
                                "qwen-max-latest",
                                "qwen-plus-latest",
                                "qwen-turbo-latest",
                                "custom-llm",
                                "models/gemini-2.5-pro-preview-03-25",
                                "azure-eu-gpt-4o",
                                "azure-na-gpt-4o"
                              ],
                              "description": "Specifies the default LLM model used by the agent for language processing."
                            },
                            "vg_maxTokens": {
                              "type": "number",
                              "description": "Sets the maximum token limit for generating responses."
                            },
                            "vg_kbDefaultDimension": {
                              "type": "number",
                              "description": "Default dimensionality for the agent's knowledge base embeddings."
                            },
                            "vg_kbTopChunks": {
                              "type": "number",
                              "description": "The number of top chunks retrieved from the knowledge base during a query."
                            },
                            "SECRET_API_KEY": {
                              "type": "string",
                              "description": "The secret API key for secure integration with VF services."
                            },
                            "vg_kbCharCount": {
                              "type": "number",
                              "description": "Tracks the total character count of the agent's knowledge base."
                            },
                            "vg_kbDocsNum": {
                              "type": "number",
                              "description": "The total number of documents stored in the agent's knowledge base."
                            },
                            "vg_enableUIEngine": {
                              "type": "boolean",
                              "description": "Activates the UI engine for enhanced interface capabilities."
                            },
                            "vg_enableAboutContext": {
                              "type": "boolean",
                              "description": "Enables contextual information about the agent for users."
                            },
                            "vg_kb_llm": {
                              "type": "object",
                              "properties": {
                                "searchMethod": {
                                  "anyOf": [
                                    { "type": "string", "enum": ["smart"] },
                                    { "type": "string", "enum": ["simple"] }
                                  ]
                                },
                                "searchPrompt": { "type": "string" },
                                "modelId": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ]
                                },
                                "temprature": { "type": "number" },
                                "maxTokens": { "type": "number" }
                              },
                              "additionalProperties": false,
                              "description": "Configuration for LLM-based knowledge base queries, including search methods and model parameters."
                            },
                            "vg_enableUIEngineForms": {
                              "type": "boolean",
                              "description": "Enables form and input components in the UI engine for web channel."
                            },
                            "vg_max_messages_history": {
                              "type": "number",
                              "description": "Maximum number of messages retained in the chat history."
                            },
                            "ifKnowsThreshold": {
                              "type": "number",
                              "description": "Confidence threshold for determining if the agent 'knows' an answer."
                            },
                            "avatarImageUrl": {
                              "type": "string",
                              "description": "URL of the avatar image representing the agent."
                            },
                            "headerImageUrl": {
                              "type": "string",
                              "description": "URL of the header image displayed in the chat interface."
                            },
                            "bannerImageUrl": {
                              "type": "string",
                              "description": "URL of the banner image used in the agent's branding."
                            },
                            "soundEffectUrl": {
                              "type": "string",
                              "description": "URL of the sound effect file used for agent interactions."
                            },
                            "soundEffectEnabled": {
                              "type": "boolean",
                              "description": "Enables or disables sound effects for the agent."
                            },
                            "enableQuickFileUpload": {
                              "type": "boolean",
                              "description": "Allows quick file uploads during chat interactions."
                            },
                            "instagramOptions": {
                              "type": "object",
                              "properties": {
                                "pageId": { "type": "string" },
                                "accessToken": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "translateUserResponse": { "type": "boolean" },
                            "starred": { "type": "boolean" },
                            "flowise": {
                              "type": "object",
                              "properties": {
                                "webhookUrl": { "type": "string" },
                                "webhookSecret": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "vfSettings": {
                              "type": "object",
                              "properties": {
                                "enableIgnoreUrlPaths": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "vapiConfig": {
                              "type": "object",
                              "properties": {
                                "syncKbOnSave": { "type": "boolean" },
                                "PUBLIC_API_KEY": { "type": "string" },
                                "PRIVATE_API_KEY": { "type": "string" },
                                "enableVapiOnWeb": { "type": "boolean" },
                                "overrideWithVG": { "type": "boolean" },
                                "promptOnWeb": { "type": "boolean" },
                                "maxCostMonthly": { "type": "number" },
                                "maxMinutesMonthly": { "type": "number" },
                                "useVfProject": { "type": "boolean" },
                                "syncTools": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "vgOptions": {
                              "type": "object",
                              "properties": {
                                "isLlmStudio": { "type": "boolean" },
                                "showSources": { "type": "boolean" },
                                "lightUiEngine": { "type": "boolean" },
                                "legacyKb": { "type": "boolean" },
                                "maxChunkSize": { "type": "number" },
                                "handoffTimeout": { "type": "number" }
                              },
                              "additionalProperties": false
                            },
                            "ui": {
                              "type": "object",
                              "properties": {
                                "showWhatsappButtonOnWeb": {
                                  "type": "boolean",
                                  "description": "Show little whatsapp button on web if it's connected."
                                },
                                "bgImageVisible": { "type": "boolean" },
                                "widgetType": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "enum": ["direct-chat"]
                                    },
                                    { "type": "string", "enum": ["tabs"] }
                                  ]
                                },
                                "enableFixedFeedbackBtns": {
                                  "type": "boolean"
                                },
                                "switchConversationSides": {
                                  "type": "boolean"
                                },
                                "switchDashboardOnly": { "type": "boolean" },
                                "voice": {
                                  "type": "object",
                                  "properties": {
                                    "question": { "type": "string" },
                                    "continueBtnLabel": { "type": "string" },
                                    "dismissBtnLabel": { "type": "string" },
                                    "disableVoiceOrb": { "type": "boolean" }
                                  },
                                  "required": [
                                    "question",
                                    "continueBtnLabel",
                                    "dismissBtnLabel"
                                  ],
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "assignedToolsIds": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "tools": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "isDefault": {
                                    "type": "boolean",
                                    "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                                  },
                                  "method": {
                                    "type": "string",
                                    "enum": ["GET", "POST", "PUT", "PATCH"],
                                    "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                                  },
                                  "id": {
                                    "type": "string",
                                    "description": "A unique identifier for the tool. Ensures distinct identification within the system."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the tool, providing a human-readable identifier for display purposes."
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                                  },
                                  "serverUrl": {
                                    "type": "string",
                                    "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                                  },
                                  "serverUrlSecret": {
                                    "type": "string",
                                    "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                                  },
                                  "createdAt": {
                                    "type": "string",
                                    "description": "The timestamp when the tool was created, formatted as an ISO 8601 string. Useful for tracking tool lifecycle."
                                  },
                                  "updatedAt": {
                                    "type": "string",
                                    "description": "The timestamp when the tool was last updated, formatted as an ISO 8601 string. Useful for versioning and auditing."
                                  },
                                  "disabled": {
                                    "type": "boolean",
                                    "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                                  },
                                  "isVapiTool": {
                                    "type": "boolean",
                                    "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                                  },
                                  "vapiId": {
                                    "type": "string",
                                    "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                                  },
                                  "variablesIds": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "An array of variable IDs associated with the tool. Each ID maps to a specific variable used by the tool."
                                  },
                                  "agentId": {
                                    "type": "string",
                                    "description": "The unique identifier of the agent associated with this tool. Helps in linking the tool to a specific agent."
                                  },
                                  "userId": {
                                    "type": "string",
                                    "description": "The unique identifier of the user associated with this tool. Used for user-specific configurations and access control."
                                  },
                                  "backchannellingPhrases": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                                  },
                                  "toolsSettings": {},
                                  "fields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                        },
                                        "in": {
                                          "type": "string",
                                          "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                        },
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "string",
                                            "number",
                                            "boolean",
                                            "system"
                                          ],
                                          "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                        },
                                        "value": {
                                          "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                        },
                                        "defaultValue": {
                                          "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                        },
                                        "key": {
                                          "type": "string",
                                          "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                        },
                                        "required": {
                                          "type": "boolean",
                                          "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                        },
                                        "reusable": {
                                          "type": "boolean",
                                          "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                        },
                                        "isEnv": {
                                          "type": "boolean",
                                          "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                        },
                                        "isSystem": {
                                          "type": "boolean",
                                          "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                        },
                                        "isGlobal": {
                                          "type": "boolean",
                                          "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                        },
                                        "agentId": {
                                          "type": "string",
                                          "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                        },
                                        "userId": {
                                          "type": "string",
                                          "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                        }
                                      },
                                      "required": ["id"],
                                      "additionalProperties": false
                                    }
                                  },
                                  "channels": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "web-chat",
                                        "whatsapp",
                                        "instagram",
                                        "telegram",
                                        "discord",
                                        "gb-chat",
                                        "vapi",
                                        "messenger",
                                        "voice",
                                        "telephony"
                                      ]
                                    },
                                    "description": "The channels that the tool can be used on."
                                  }
                                },
                                "required": ["id", "name", "description"],
                                "additionalProperties": false
                              }
                            },
                            "internal": {
                              "type": "object",
                              "properties": {
                                "accountCreationConfig": {
                                  "type": "string",
                                  "enum": ["v2"]
                                },
                                "websocketServer": {
                                  "anyOf": [
                                    { "type": "string", "enum": ["edge"] },
                                    { "type": "string", "enum": ["nodejs"] }
                                  ]
                                },
                                "setOnResponse": { "type": "boolean" },
                                "enableSetOnLoad": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "disableAutoTranscribeAudio": { "type": "boolean" },
                            "disableTranscriptSharing": { "type": "boolean" },
                            "instaAgentUsername": { "type": "string" },
                            "convoTags": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "vfConfig": {
                              "type": "object",
                              "properties": {
                                "alwaysEnableCardButtons": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            },
                            "discord": {
                              "type": "object",
                              "properties": {
                                "channelIds": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "webhookUrls": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                }
                              },
                              "additionalProperties": false
                            },
                            "limits": {
                              "type": "object",
                              "properties": {
                                "maxInteractionsPerUserId": {
                                  "type": "number"
                                },
                                "maxAnnualCreditsUsage": { "type": "number" },
                                "maxMonthlyCreditsUsage": { "type": "number" },
                                "maxMessages": {
                                  "type": "number",
                                  "description": "Maximum number of messages allowed per conversation"
                                },
                                "maxMessagesRetentionDays": {
                                  "type": "number",
                                  "description": "Retention period in days for messages"
                                }
                              },
                              "additionalProperties": false
                            },
                            "tabs": { "type": "array" },
                            "kbTags": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "kbTagsDataMap": { "type": "array" },
                            "nodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "name": { "type": "string" },
                                  "description": {
                                    "type": "string",
                                    "description": "A short description of what this node does and when it should be used, specially useful if the node is global or when the LLM detects automatic rerouting."
                                  },
                                  "instructions": {
                                    "type": "string",
                                    "description": "What should this LLM node do."
                                  },
                                  "mcpServers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": { "type": "string" },
                                        "url": { "type": "string" },
                                        "transport": {
                                          "type": "string",
                                          "enum": ["sse", "websocket", "stdio"]
                                        },
                                        "useNodeEventSource": {
                                          "type": "boolean"
                                        },
                                        "reconnect": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": { "type": "boolean" },
                                            "maxAttempts": { "type": "number" },
                                            "delayMs": { "type": "number" }
                                          },
                                          "additionalProperties": false
                                        },
                                        "command": { "type": "string" },
                                        "args": {
                                          "type": "array",
                                          "items": { "type": "string" }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "voiceInstructions": {
                                    "type": "string",
                                    "description": "The voice instructions for this node, will be used instead of instructions in voice channels if provided."
                                  },
                                  "isGlobal": {
                                    "type": "boolean",
                                    "description": "If true, this node will be always present for the LLM"
                                  },
                                  "toolsIds": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "The tools that will be available for this node"
                                  },
                                  "toolsSettings": {
                                    "type": "object",
                                    "properties": {
                                      "googleCalendar": {
                                        "type": "object",
                                        "properties": {
                                          "calendarId": { "type": "string" },
                                          "methods": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "enum": [
                                                "create-event",
                                                "check-availability",
                                                "get-slots",
                                                "delete-event"
                                              ]
                                            }
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "childrenNodes": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "nodeId": { "type": "string" },
                                        "condition": {
                                          "type": "string",
                                          "description": "The condition that will be checked to determine if the node should advanced to the selected node id or not or should simply loop in the current node."
                                        }
                                      },
                                      "required": ["nodeId", "condition"],
                                      "additionalProperties": false
                                    },
                                    "description": "The outputs of this node which the node after finishing will choose from to either advance or to keep looping in this node till it caputures or reaches one of the mentioned routers."
                                  },
                                  "llmConfig": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": {
                                        "type": "string",
                                        "enum": [
                                          "gpt-5-chat-latest",
                                          "gpt-5-2025-08-07",
                                          "gpt-5-mini-2025-08-07",
                                          "gpt-5-nano-2025-08-07",
                                          "gpt-3.5-turbo-0125",
                                          "gpt-4-1106-preview",
                                          "gpt-4.5-preview-2025-02-27",
                                          "gpt-4o",
                                          "gpt-4o-mini",
                                          "gpt-4.1-2025-04-14",
                                          "gpt-4.1-mini-2025-04-14",
                                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                          "llama3-8b-8192",
                                          "llama3-70b-8192",
                                          "llama-3.1-8b-instant",
                                          "llama-3.1-70b-versatile",
                                          "llama-3.2-90b-text-preview",
                                          "llama-3.2-11b-text-preview",
                                          "llama-3.3-70b-versatile",
                                          "meta-llama/llama-4-scout-17b-16e-instruct",
                                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                                          "mixtral-8x7b-32768",
                                          "gemma-7b-it",
                                          "gemma2-9b-it",
                                          "claude-opus-4-20250514",
                                          "claude-sonnet-4-20250514",
                                          "claude-3-5-sonnet-20240620",
                                          "claude-3-5-sonnet-20241022",
                                          "claude-3-opus-20240229",
                                          "claude-3-sonnet-20240229",
                                          "claude-3-haiku-20240307",
                                          "claude-3-5-haiku-20241022",
                                          "claude-3-7-sonnet-20250219",
                                          "gemini-1.5-pro",
                                          "gemini-1.5-flash",
                                          "gemini-1.0-pro",
                                          "gemini-2.0-flash-exp",
                                          "gemini-2.0-flash-thinking-exp-1219",
                                          "gemini-2.5-pro",
                                          "gemini-2.5-pro-exp-03-25",
                                          "gemini-2.5-pro-preview-03-25",
                                          "gemini-2.5-flash-preview-05-20",
                                          "gemini-2.5-flash",
                                          "gpt-4-32k",
                                          "gpt-4",
                                          "gpt-3.5-turbo-16k",
                                          "gpt-3.5-turbo",
                                          "deepseek-chat",
                                          "deepseek-r1-distill-llama-70b",
                                          "grok-2-latest",
                                          "grok-3",
                                          "grok-3-mini",
                                          "grok-3-fast",
                                          "grok-4-0709",
                                          "qwen-max-latest",
                                          "qwen-plus-latest",
                                          "qwen-turbo-latest",
                                          "custom-llm",
                                          "models/gemini-2.5-pro-preview-03-25",
                                          "azure-eu-gpt-4o",
                                          "azure-na-gpt-4o"
                                        ]
                                      },
                                      "temperature": {
                                        "type": "number",
                                        "description": "The temperature of the LLM"
                                      },
                                      "maxTokens": {
                                        "type": "number",
                                        "description": "The max tokens of the LLM"
                                      },
                                      "customModelId": {
                                        "type": "string",
                                        "description": "The custom model id of the LLM"
                                      },
                                      "serverUrl": {
                                        "type": "string",
                                        "description": "The server url of the LLM"
                                      },
                                      "apiKey": {
                                        "type": "string",
                                        "description": "The api key of the LLM"
                                      }
                                    },
                                    "required": [
                                      "modelId",
                                      "temperature",
                                      "maxTokens"
                                    ],
                                    "additionalProperties": false
                                  },
                                  "routerLlmConfig": {
                                    "type": "object",
                                    "properties": {
                                      "modelId": {
                                        "type": "string",
                                        "enum": [
                                          "gpt-5-chat-latest",
                                          "gpt-5-2025-08-07",
                                          "gpt-5-mini-2025-08-07",
                                          "gpt-5-nano-2025-08-07",
                                          "gpt-3.5-turbo-0125",
                                          "gpt-4-1106-preview",
                                          "gpt-4.5-preview-2025-02-27",
                                          "gpt-4o",
                                          "gpt-4o-mini",
                                          "gpt-4.1-2025-04-14",
                                          "gpt-4.1-mini-2025-04-14",
                                          "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                          "llama3-8b-8192",
                                          "llama3-70b-8192",
                                          "llama-3.1-8b-instant",
                                          "llama-3.1-70b-versatile",
                                          "llama-3.2-90b-text-preview",
                                          "llama-3.2-11b-text-preview",
                                          "llama-3.3-70b-versatile",
                                          "meta-llama/llama-4-scout-17b-16e-instruct",
                                          "meta-llama/llama-4-maverick-17b-128e-instruct",
                                          "mixtral-8x7b-32768",
                                          "gemma-7b-it",
                                          "gemma2-9b-it",
                                          "claude-opus-4-20250514",
                                          "claude-sonnet-4-20250514",
                                          "claude-3-5-sonnet-20240620",
                                          "claude-3-5-sonnet-20241022",
                                          "claude-3-opus-20240229",
                                          "claude-3-sonnet-20240229",
                                          "claude-3-haiku-20240307",
                                          "claude-3-5-haiku-20241022",
                                          "claude-3-7-sonnet-20250219",
                                          "gemini-1.5-pro",
                                          "gemini-1.5-flash",
                                          "gemini-1.0-pro",
                                          "gemini-2.0-flash-exp",
                                          "gemini-2.0-flash-thinking-exp-1219",
                                          "gemini-2.5-pro",
                                          "gemini-2.5-pro-exp-03-25",
                                          "gemini-2.5-pro-preview-03-25",
                                          "gemini-2.5-flash-preview-05-20",
                                          "gemini-2.5-flash",
                                          "gpt-4-32k",
                                          "gpt-4",
                                          "gpt-3.5-turbo-16k",
                                          "gpt-3.5-turbo",
                                          "deepseek-chat",
                                          "deepseek-r1-distill-llama-70b",
                                          "grok-2-latest",
                                          "grok-3",
                                          "grok-3-mini",
                                          "grok-3-fast",
                                          "grok-4-0709",
                                          "qwen-max-latest",
                                          "qwen-plus-latest",
                                          "qwen-turbo-latest",
                                          "custom-llm",
                                          "models/gemini-2.5-pro-preview-03-25",
                                          "azure-eu-gpt-4o",
                                          "azure-na-gpt-4o"
                                        ]
                                      },
                                      "temperature": {
                                        "type": "number",
                                        "description": "The temperature of the LLM"
                                      },
                                      "maxTokens": {
                                        "type": "number",
                                        "description": "The max tokens of the LLM"
                                      },
                                      "customModelId": {
                                        "type": "string",
                                        "description": "The custom model id of the LLM"
                                      },
                                      "serverUrl": {
                                        "type": "string",
                                        "description": "The server url of the LLM"
                                      },
                                      "apiKey": {
                                        "type": "string",
                                        "description": "The api key of the LLM"
                                      }
                                    },
                                    "required": [
                                      "modelId",
                                      "temperature",
                                      "maxTokens"
                                    ],
                                    "additionalProperties": false,
                                    "description": "The LLM config that will be used for the router node, NOTE: This must be a fast LLM model or the latency will be too high between responses."
                                  },
                                  "toolUseBias": {
                                    "type": "number",
                                    "description": "The bias of the LLM to use tools if 0 it will never use tools, if 1 it will only use tools."
                                  },
                                  "autoRerouter": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "boolean",
                                        "description": "If true, the LLM will try to detect if the user has changed his mind about something enabling the AI to rewind back to the previous node."
                                      },
                                      "level": {
                                        "type": "number",
                                        "description": "The level of rewinding, if 1 the LLM will have access to only 1 level or rewind capabilities meaning if it went from node A > B > C > D  then if it at node d & it detects it needs to be at node B again it will be able to rewind back to node B if the level is at least 2, it will not be able to detect node A unless the level is 3 or more, and so on."
                                      }
                                    },
                                    "required": ["enabled", "level"],
                                    "additionalProperties": false,
                                    "description": "The auto rerouter of this node."
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "start",
                                      "end",
                                      "default",
                                      "condition",
                                      "note"
                                    ],
                                    "description": "The type of the node, if not provided it will be a normal LLM node."
                                  },
                                  "rf": {
                                    "description": "The position of the node in the reactflow canvas."
                                  },
                                  "kb": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": { "type": "boolean" },
                                      "maxChunks": {
                                        "type": "number",
                                        "description": "The max chunks to use from the KB."
                                      },
                                      "tags": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "The tags to use to filter the docs we search through"
                                      },
                                      "smartSearch": {
                                        "type": "boolean",
                                        "description": "If true, the LLM will use the smart search to search through the docs."
                                      }
                                    },
                                    "required": ["enabled", "maxChunks"],
                                    "additionalProperties": false
                                  },
                                  "conditionData": {
                                    "type": "object",
                                    "properties": {
                                      "condition": {
                                        "type": "string",
                                        "description": "The condition to check."
                                      }
                                    },
                                    "required": ["condition"],
                                    "additionalProperties": false
                                  },
                                  "preStart": {
                                    "type": "object",
                                    "properties": {
                                      "url": {
                                        "type": "string",
                                        "description": "The URL to send the GET request to."
                                      },
                                      "enabled": {
                                        "type": "boolean",
                                        "description": "If true, we will send a GET request to the URL before starting the node."
                                      },
                                      "testConvoIdValue": {
                                        "type": "string",
                                        "description": "The value to test the URL with."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "description": "The pre start tool of the node, we will send a GET request to this URL before starting the node and provide the results to the AI. GET {url}/{user_id}/{node_name}"
                                  },
                                  "startConfig": {
                                    "type": "object",
                                    "properties": {
                                      "initialMessage": {
                                        "type": "string",
                                        "description": "The initial message to start the conversation with"
                                      },
                                      "userStarts": {
                                        "type": "boolean",
                                        "description": "Whether the user or AI agent gives the first message"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "description": "Configuration for start nodes"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "description",
                                  "instructions",
                                  "llmConfig"
                                ],
                                "additionalProperties": false,
                                "description": "A node in the LLM chain."
                              }
                            },
                            "enableNodes": { "type": "boolean" },
                            "advanced": {
                              "type": "object",
                              "properties": {
                                "serverUrl": { "type": "string" },
                                "serverUrlSecret": { "type": "string" }
                              },
                              "additionalProperties": false
                            },
                            "nodesSettings": {
                              "type": "object",
                              "properties": {
                                "enableUIEngineForms": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will be able to show forms on web channel only."
                                },
                                "geminiLiveOptions": {},
                                "appendBeforePrompt": {
                                  "type": "string",
                                  "description": "The prompt to append to the nodes' prompt."
                                },
                                "routerLLmOptions": {
                                  "type": "object",
                                  "properties": {
                                    "modelId": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    },
                                    "temperature": {
                                      "type": "number",
                                      "description": "The temperature of the LLM"
                                    },
                                    "maxTokens": {
                                      "type": "number",
                                      "description": "The max tokens of the LLM"
                                    },
                                    "customModelId": {
                                      "type": "string",
                                      "description": "The custom model id of the LLM"
                                    },
                                    "serverUrl": {
                                      "type": "string",
                                      "description": "The server url of the LLM"
                                    },
                                    "apiKey": {
                                      "type": "string",
                                      "description": "The api key of the LLM"
                                    }
                                  },
                                  "required": [
                                    "modelId",
                                    "temperature",
                                    "maxTokens"
                                  ],
                                  "additionalProperties": false
                                },
                                "defaultLLmOptions": {
                                  "type": "object",
                                  "properties": {
                                    "modelId": {
                                      "type": "string",
                                      "enum": [
                                        "gpt-5-chat-latest",
                                        "gpt-5-2025-08-07",
                                        "gpt-5-mini-2025-08-07",
                                        "gpt-5-nano-2025-08-07",
                                        "gpt-3.5-turbo-0125",
                                        "gpt-4-1106-preview",
                                        "gpt-4.5-preview-2025-02-27",
                                        "gpt-4o",
                                        "gpt-4o-mini",
                                        "gpt-4.1-2025-04-14",
                                        "gpt-4.1-mini-2025-04-14",
                                        "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                        "llama3-8b-8192",
                                        "llama3-70b-8192",
                                        "llama-3.1-8b-instant",
                                        "llama-3.1-70b-versatile",
                                        "llama-3.2-90b-text-preview",
                                        "llama-3.2-11b-text-preview",
                                        "llama-3.3-70b-versatile",
                                        "meta-llama/llama-4-scout-17b-16e-instruct",
                                        "meta-llama/llama-4-maverick-17b-128e-instruct",
                                        "mixtral-8x7b-32768",
                                        "gemma-7b-it",
                                        "gemma2-9b-it",
                                        "claude-opus-4-20250514",
                                        "claude-sonnet-4-20250514",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-opus-20240229",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-7-sonnet-20250219",
                                        "gemini-1.5-pro",
                                        "gemini-1.5-flash",
                                        "gemini-1.0-pro",
                                        "gemini-2.0-flash-exp",
                                        "gemini-2.0-flash-thinking-exp-1219",
                                        "gemini-2.5-pro",
                                        "gemini-2.5-pro-exp-03-25",
                                        "gemini-2.5-pro-preview-03-25",
                                        "gemini-2.5-flash-preview-05-20",
                                        "gemini-2.5-flash",
                                        "gpt-4-32k",
                                        "gpt-4",
                                        "gpt-3.5-turbo-16k",
                                        "gpt-3.5-turbo",
                                        "deepseek-chat",
                                        "deepseek-r1-distill-llama-70b",
                                        "grok-2-latest",
                                        "grok-3",
                                        "grok-3-mini",
                                        "grok-3-fast",
                                        "grok-4-0709",
                                        "qwen-max-latest",
                                        "qwen-plus-latest",
                                        "qwen-turbo-latest",
                                        "custom-llm",
                                        "models/gemini-2.5-pro-preview-03-25",
                                        "azure-eu-gpt-4o",
                                        "azure-na-gpt-4o"
                                      ]
                                    },
                                    "temperature": {
                                      "type": "number",
                                      "description": "The temperature of the LLM"
                                    },
                                    "maxTokens": {
                                      "type": "number",
                                      "description": "The max tokens of the LLM"
                                    },
                                    "customModelId": {
                                      "type": "string",
                                      "description": "The custom model id of the LLM"
                                    },
                                    "serverUrl": {
                                      "type": "string",
                                      "description": "The server url of the LLM"
                                    },
                                    "apiKey": {
                                      "type": "string",
                                      "description": "The api key of the LLM"
                                    }
                                  },
                                  "required": [
                                    "modelId",
                                    "temperature",
                                    "maxTokens"
                                  ],
                                  "additionalProperties": false
                                },
                                "backchannelOnChoosingNodes": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will say uha/i see before choosing a node."
                                },
                                "enableUiEngine": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will be able to show buttons, cards, images on text channels only."
                                },
                                "fallbackModelIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "gpt-5-chat-latest",
                                      "gpt-5-2025-08-07",
                                      "gpt-5-mini-2025-08-07",
                                      "gpt-5-nano-2025-08-07",
                                      "gpt-3.5-turbo-0125",
                                      "gpt-4-1106-preview",
                                      "gpt-4.5-preview-2025-02-27",
                                      "gpt-4o",
                                      "gpt-4o-mini",
                                      "gpt-4.1-2025-04-14",
                                      "gpt-4.1-mini-2025-04-14",
                                      "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                      "llama3-8b-8192",
                                      "llama3-70b-8192",
                                      "llama-3.1-8b-instant",
                                      "llama-3.1-70b-versatile",
                                      "llama-3.2-90b-text-preview",
                                      "llama-3.2-11b-text-preview",
                                      "llama-3.3-70b-versatile",
                                      "meta-llama/llama-4-scout-17b-16e-instruct",
                                      "meta-llama/llama-4-maverick-17b-128e-instruct",
                                      "mixtral-8x7b-32768",
                                      "gemma-7b-it",
                                      "gemma2-9b-it",
                                      "claude-opus-4-20250514",
                                      "claude-sonnet-4-20250514",
                                      "claude-3-5-sonnet-20240620",
                                      "claude-3-5-sonnet-20241022",
                                      "claude-3-opus-20240229",
                                      "claude-3-sonnet-20240229",
                                      "claude-3-haiku-20240307",
                                      "claude-3-5-haiku-20241022",
                                      "claude-3-7-sonnet-20250219",
                                      "gemini-1.5-pro",
                                      "gemini-1.5-flash",
                                      "gemini-1.0-pro",
                                      "gemini-2.0-flash-exp",
                                      "gemini-2.0-flash-thinking-exp-1219",
                                      "gemini-2.5-pro",
                                      "gemini-2.5-pro-exp-03-25",
                                      "gemini-2.5-pro-preview-03-25",
                                      "gemini-2.5-flash-preview-05-20",
                                      "gemini-2.5-flash",
                                      "gpt-4-32k",
                                      "gpt-4",
                                      "gpt-3.5-turbo-16k",
                                      "gpt-3.5-turbo",
                                      "deepseek-chat",
                                      "deepseek-r1-distill-llama-70b",
                                      "grok-2-latest",
                                      "grok-3",
                                      "grok-3-mini",
                                      "grok-3-fast",
                                      "grok-4-0709",
                                      "qwen-max-latest",
                                      "qwen-plus-latest",
                                      "qwen-turbo-latest",
                                      "custom-llm",
                                      "models/gemini-2.5-pro-preview-03-25",
                                      "azure-eu-gpt-4o",
                                      "azure-na-gpt-4o"
                                    ]
                                  }
                                },
                                "silenceDetection": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Whether to enable the silence detection feature which will insert filler phrases during long periods of silence"
                                    },
                                    "timeoutSeconds": {
                                      "type": "number",
                                      "default": 60,
                                      "description": "Number of seconds of silence before triggering a filler phrase"
                                    },
                                    "endCallAfterNPhrases": {
                                      "type": "number",
                                      "default": 1,
                                      "description": "Number of filler phrases utterances to say before ending the call if 0 it will end the call instantly after reching the timeout."
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "startCallPhrases": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "fillerWordsOnToolUsage": {
                                  "type": "boolean",
                                  "description": "If true, the LLM will say filler words on tool usage, like '1 moment', 'be right back', 'you know', etc."
                                },
                                "smartEndpointing": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": { "type": "boolean" },
                                    "waitSeconds": { "type": "number" },
                                    "onPunctuationSeconds": {
                                      "type": "number"
                                    },
                                    "onNoPunctuationSeconds": {
                                      "type": "number"
                                    },
                                    "onNumberSeconds": { "type": "number" }
                                  },
                                  "additionalProperties": false
                                },
                                "stopSpeakPlan": {
                                  "type": "object",
                                  "properties": {
                                    "minWords": {
                                      "type": "number",
                                      "description": "The minimum words to speak from the user for the AI to be interrupted and stop talking ."
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "callTimeoutSeconds": {
                                  "type": "number",
                                  "description": "The timeout for the call in seconds."
                                },
                                "enableEndcallTool": {
                                  "type": "boolean",
                                  "description": "Whether to enable endcall tool."
                                },
                                "voiceSpecific": {
                                  "type": "object",
                                  "properties": {
                                    "minCharacters": {
                                      "type": "number",
                                      "description": "The minimum number of characters to init the speech gen to generate audio for, the more the higher the latency will be, default is 5"
                                    },
                                    "maxLengthWithoutPunctuation": {
                                      "type": "number",
                                      "description": "The maximum length of the string without punctuation to init the speech gen to generate audio for, the more the higher the latency will be, default is 100"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "enabledGlobalTools": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "enum": ["handoffHumanDashboardTool"]
                                  },
                                  "description": "The global tools that will be enabled for the LLM."
                                },
                                "defaultToolOverrides": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "description": {
                                        "type": "string",
                                        "nullable": true
                                      },
                                      "fields": {
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "string",
                                                "number",
                                                "boolean"
                                              ]
                                            },
                                            "description": { "type": "string" }
                                          },
                                          "additionalProperties": false
                                        },
                                        "nullable": true
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "description": "Overrides for default system tools configuration."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Global options for the nodes setup, text/voice."
                            },
                            "enableFallback": {
                              "type": "boolean",
                              "description": "Enable fallback for the agent llm model."
                            },
                            "fallbackSettings": {
                              "type": "object",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "enum": [
                                    "gpt-5-chat-latest",
                                    "gpt-5-2025-08-07",
                                    "gpt-5-mini-2025-08-07",
                                    "gpt-5-nano-2025-08-07",
                                    "gpt-3.5-turbo-0125",
                                    "gpt-4-1106-preview",
                                    "gpt-4.5-preview-2025-02-27",
                                    "gpt-4o",
                                    "gpt-4o-mini",
                                    "gpt-4.1-2025-04-14",
                                    "gpt-4.1-mini-2025-04-14",
                                    "ft:gpt-4o-mini-2024-07-18:personal:4o-with-tools-t11:A6mByttv",
                                    "llama3-8b-8192",
                                    "llama3-70b-8192",
                                    "llama-3.1-8b-instant",
                                    "llama-3.1-70b-versatile",
                                    "llama-3.2-90b-text-preview",
                                    "llama-3.2-11b-text-preview",
                                    "llama-3.3-70b-versatile",
                                    "meta-llama/llama-4-scout-17b-16e-instruct",
                                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                                    "mixtral-8x7b-32768",
                                    "gemma-7b-it",
                                    "gemma2-9b-it",
                                    "claude-opus-4-20250514",
                                    "claude-sonnet-4-20250514",
                                    "claude-3-5-sonnet-20240620",
                                    "claude-3-5-sonnet-20241022",
                                    "claude-3-opus-20240229",
                                    "claude-3-sonnet-20240229",
                                    "claude-3-haiku-20240307",
                                    "claude-3-5-haiku-20241022",
                                    "claude-3-7-sonnet-20250219",
                                    "gemini-1.5-pro",
                                    "gemini-1.5-flash",
                                    "gemini-1.0-pro",
                                    "gemini-2.0-flash-exp",
                                    "gemini-2.0-flash-thinking-exp-1219",
                                    "gemini-2.5-pro",
                                    "gemini-2.5-pro-exp-03-25",
                                    "gemini-2.5-pro-preview-03-25",
                                    "gemini-2.5-flash-preview-05-20",
                                    "gemini-2.5-flash",
                                    "gpt-4-32k",
                                    "gpt-4",
                                    "gpt-3.5-turbo-16k",
                                    "gpt-3.5-turbo",
                                    "deepseek-chat",
                                    "deepseek-r1-distill-llama-70b",
                                    "grok-2-latest",
                                    "grok-3",
                                    "grok-3-mini",
                                    "grok-3-fast",
                                    "grok-4-0709",
                                    "qwen-max-latest",
                                    "qwen-plus-latest",
                                    "qwen-turbo-latest",
                                    "custom-llm",
                                    "models/gemini-2.5-pro-preview-03-25",
                                    "azure-eu-gpt-4o",
                                    "azure-na-gpt-4o"
                                  ],
                                  "description": "The model to use for fallback."
                                },
                                "creditThreshold": {
                                  "type": "number",
                                  "description": "The credit threshold for fallback."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Fallback settings for the agent llm model."
                            },
                            "marketplace": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to show the agent in marketplace or not."
                                },
                                "priceUSD": {
                                  "type": "number",
                                  "description": "The price for the agent, default is 0/free"
                                }
                              },
                              "additionalProperties": false,
                              "description": "Marketplace settings for the agent."
                            },
                            "disableRating": {
                              "type": "boolean",
                              "description": "Whether to disable the chat end rating feature."
                            },
                            "chatEndMessage": {
                              "type": "string",
                              "description": "The message to show when the chat ends."
                            },
                            "aiIntroductionMessage": {
                              "type": "string",
                              "description": "The message to show when the user starts the chat on metachannels."
                            },
                            "enableAIIntroductionMessage": {
                              "type": "boolean",
                              "description": "Whether to enable the AI introduction message or not."
                            },
                            "deployed": {
                              "type": "boolean",
                              "description": "Whether the agent is deployed or not."
                            },
                            "captureIGStories": {
                              "type": "boolean",
                              "description": "Whether to capture instagram stories or not."
                            },
                            "gdprCompliance": {
                              "type": "boolean",
                              "description": "Whether to comply with GDPR or not."
                            },
                            "disableFileUpload": { "type": "boolean" },
                            "buttonVariant": {
                              "type": "string",
                              "enum": [
                                "custom",
                                "solid",
                                "bordered",
                                "light",
                                "flat",
                                "faded",
                                "shadow",
                                "ghost"
                              ],
                              "description": "The variant of the button. Custom is the default original styling."
                            },
                            "inputVariant": {
                              "type": "string",
                              "enum": [
                                "custom",
                                "flat",
                                "bordered",
                                "faded",
                                "underlined"
                              ],
                              "description": "The variant of the input. Custom is the default original styling."
                            },
                            "privacyDisclaimer": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to show privacy disclaimer before user interaction"
                                },
                                "text": {
                                  "type": "string",
                                  "description": "The privacy disclaimer text to display to users"
                                },
                                "privacyPolicyUrl": {
                                  "type": "string",
                                  "description": "URL to the privacy policy page"
                                },
                                "acceptButtonLabel": {
                                  "type": "string",
                                  "description": "Label for the accept/proceed button"
                                },
                                "privacyPolicyButtonLabel": {
                                  "type": "string",
                                  "description": "Label for the privacy policy link button"
                                }
                              },
                              "additionalProperties": false,
                              "description": "Privacy disclaimer configuration for the agent"
                            },
                            "leadCollectionRules": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Whether to use custom lead collection rules. If false or not set, uses default behavior (collect when email, phone_number, or phone is present)"
                                },
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "variables": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "description": "Array of variable names that must ALL be present for this rule to match (AND condition)"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Optional description of what this rule captures"
                                      }
                                    },
                                    "required": ["variables"],
                                    "additionalProperties": false
                                  },
                                  "description": "Array of rule sets. A lead is collected if it matches ANY rule set (OR condition between rules). Each rule requires ALL its variables to be present (AND condition within a rule)."
                                }
                              },
                              "additionalProperties": false,
                              "description": "Custom lead collection rules. Allows defining which variable combinations should trigger lead capture. If not set, defaults to collecting leads when email, phone_number, or phone is present."
                            }
                          },
                          "additionalProperties": false,
                          "description": "This is the overrides to use for the agent."
                        },
                        "toolsOverrides": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "isDefault": {
                                "type": "boolean",
                                "description": "Indicates whether this tool is the default tool for the agent. Defaults to false if unspecified."
                              },
                              "method": {
                                "type": "string",
                                "enum": ["GET", "POST", "PUT", "PATCH"],
                                "description": "The HTTP method used by this tool. Acceptable values are 'GET', 'POST', 'PUT', or 'PATCH'. Defaults to 'POST' if unspecified."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the tool, providing a human-readable identifier for display purposes."
                              },
                              "description": {
                                "type": "string",
                                "description": "A detailed description of the tool's purpose and functionality. Helps users understand its role within the agent."
                              },
                              "serverUrl": {
                                "type": "string",
                                "description": "The server URL where the tool's operations are performed. Used for network-based integrations."
                              },
                              "serverUrlSecret": {
                                "type": "string",
                                "description": "A secret token or key associated with the server URL. Provides secure access to the tool's backend services."
                              },
                              "disabled": {
                                "type": "boolean",
                                "description": "Indicates whether the tool is currently disabled. A disabled tool cannot be used by the agent."
                              },
                              "isVapiTool": {
                                "type": "boolean",
                                "description": "Indicates whether the tool is a Virtual API (VAPI) tool. VAPI tools enable interaction with external APIs."
                              },
                              "vapiId": {
                                "type": "string",
                                "description": "A unique identifier for the VAPI associated with this tool. Used for integration with specific API endpoints."
                              },
                              "isGlobal": {
                                "type": "boolean",
                                "description": "If true, this tool is globally accessible to all nodes and agents. Overrides context-specific restrictions."
                              },
                              "backchannellingPhrases": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "An array of phrases used for backchannel communication. These phrases help in maintaining conversational flow."
                              },
                              "toolsSettings": {},
                              "fields": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "A unique identifier for the field, ensuring it is distinct across the system."
                                    },
                                    "in": {
                                      "type": "string",
                                      "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "string",
                                        "number",
                                        "boolean",
                                        "system"
                                      ],
                                      "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                                    },
                                    "value": {
                                      "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                                    },
                                    "defaultValue": {
                                      "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                                    },
                                    "key": {
                                      "type": "string",
                                      "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                                    },
                                    "reusable": {
                                      "type": "boolean",
                                      "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                                    },
                                    "isEnv": {
                                      "type": "boolean",
                                      "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                                    },
                                    "isSystem": {
                                      "type": "boolean",
                                      "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                                    },
                                    "isGlobal": {
                                      "type": "boolean",
                                      "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                                    },
                                    "agentId": {
                                      "type": "string",
                                      "description": "References the unique identifier of the agent associated with this field. Helps in mapping fields to specific agents."
                                    },
                                    "userId": {
                                      "type": "string",
                                      "description": "References the unique identifier of the user associated with this field. Useful for user-specific customizations."
                                    }
                                  },
                                  "required": ["id"],
                                  "additionalProperties": false
                                }
                              },
                              "channels": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "web-chat",
                                    "whatsapp",
                                    "instagram",
                                    "telegram",
                                    "discord",
                                    "gb-chat",
                                    "vapi",
                                    "messenger",
                                    "voice",
                                    "telephony"
                                  ]
                                },
                                "description": "The channels that the tool can be used on."
                              }
                            },
                            "required": ["name", "description"],
                            "additionalProperties": false
                          },
                          "description": "This will create new tools for the agent or override existing ones to be used for the call/interaction."
                        },
                        "variablesOverrides": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "in": {
                                "type": "string",
                                "description": "Defines the location or context in which the field is utilized. Common values include 'query', 'body', or 'header'."
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "string",
                                  "number",
                                  "boolean",
                                  "system"
                                ],
                                "description": "Specifies the variable type of the field. Acceptable values include 'string', 'number', 'boolean', and 'system'."
                              },
                              "value": {
                                "description": "The current assigned value of the field. This value is optional and supports any type depending on the field's context."
                              },
                              "defaultValue": {
                                "description": "A predefined value assigned to the field when no specific value is provided. Useful for ensuring consistent behavior."
                              },
                              "key": {
                                "type": "string",
                                "description": "The unique key that identifies this tool field or variable. Often used for referencing the field programmatically."
                              },
                              "description": {
                                "type": "string",
                                "description": "A detailed explanation of the field's purpose and usage. Helps users understand the field's role in the system."
                              },
                              "required": {
                                "type": "boolean",
                                "description": "Indicates whether the presence of this field is mandatory for successful operation. Defaults to false if unspecified."
                              },
                              "reusable": {
                                "type": "boolean",
                                "description": "Denotes whether this field can be reused across multiple contexts or tools. Useful for reducing redundancy."
                              },
                              "isEnv": {
                                "type": "boolean",
                                "description": "Specifies if this field represents an environment variable, typically used for configuration or deployment."
                              },
                              "isSystem": {
                                "type": "boolean",
                                "description": "Indicates whether this field is a system-level variable, reserved for core operations or internal use."
                              },
                              "isGlobal": {
                                "type": "boolean",
                                "description": "If enabled, this field remains globally accessible to the agent across all operational contexts. Useful for global constants."
                              }
                            },
                            "additionalProperties": false
                          },
                          "description": "This will create new variables for the agent or override existing ones to be used for the call/interaction, if the variable is env or has a default value the agent will be able to know about it and use it globally on any node."
                        },
                        "callerInfo": {},
                        "callInfo": {},
                        "awaitListenUrl": {
                          "type": "boolean",
                          "description": "If true, the call will wait for the listen url to be generated before starting the call."
                        }
                      },
                      "additionalProperties": false,
                      "description": "This is the overrides to use for the agent."
                    },
                    "listenUrl": {
                      "type": "string",
                      "description": "This is the listen url."
                    }
                  },
                  "required": ["message", "websocketUrl"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/addCronJob": {
      "post": {
        "operationId": "addCronJob",
        "summary": "Edit campaign settings",
        "tags": ["campaign", "campaign settings", "lead campaign"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "agentId": { "type": "string" },
                  "leads": { "type": "array" },
                  "leadsPerCampaign": { "type": "number" },
                  "contactMethodsPriorty": {
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "required": [
                  "agentId",
                  "leads",
                  "leadsPerCampaign",
                  "contactMethodsPriorty"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "application/json": { "schema": {} } }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/callLeads": {
      "post": {
        "operationId": "callLeads",
        "summary": "Endpoint to send message or make call for the list of leads",
        "tags": ["call leads", "leads cron job", "lead campaign"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "agentId": { "type": "string" },
                  "leads": { "type": "array" },
                  "leadsPerCampaign": { "type": "number" },
                  "contactMethodsPriorty": {
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "required": [
                  "agentId",
                  "leads",
                  "leadsPerCampaign",
                  "contactMethodsPriorty"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "application/json": { "schema": {} } }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agentId}/phone": {
      "get": {
        "operationId": "getTwilioNumber",
        "summary": "Gets the phone number associated with the current agent",
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "application/json": { "schema": {} } }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/agents/{agent_id}/usage": {
      "post": {
        "operationId": "getAgentUsage",
        "summary": "Get Agent Usage",
        "tags": ["Workspaces"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "range": {
                    "type": "object",
                    "properties": {
                      "start": { "type": "number" },
                      "end": { "type": "number" }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "application/json": { "schema": {} } }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/workspaces/{uid}/usage": {
      "post": {
        "operationId": "getUsage",
        "summary": "Get a workspace usage",
        "tags": ["Workspaces"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uiTimeRange": {},
                  "range": {
                    "type": "object",
                    "properties": {
                      "start": { "type": "number" },
                      "end": { "type": "number" }
                    },
                    "required": ["start", "end"],
                    "additionalProperties": false
                  },
                  "logsPage": { "type": "number" }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {}
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/workspaces": {
      "post": {
        "operationId": "createWorkspace",
        "summary": "Create a new workspace",
        "tags": ["Workspaces"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "workspaceName": { "type": "string" },
                  "workspaceEmails": {
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "required": ["workspaceName"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {}
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "get": {
        "operationId": "getWorkspaces",
        "summary": "Get all workspaces",
        "tags": ["Workspaces"],
        "security": [{ "Authorization": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "application/json": { "schema": {} } }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    },
    "/workspaces/{id}": {
      "get": {
        "operationId": "getWorkspaceById",
        "summary": "Get Single Workspace",
        "tags": ["Workspaces"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "application/json": { "schema": {} } }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "delete": {
        "operationId": "deleteWorkspace",
        "summary": "Delete a workspace",
        "tags": ["Workspaces"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" }
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      },
      "patch": {
        "operationId": "updateWorkspace",
        "summary": "Update a workspace",
        "tags": ["Workspaces"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updates": {
                    "type": "object",
                    "properties": {
                      "workspaceName": {
                        "type": "string",
                        "description": "The name of the workspace"
                      },
                      "workspaceEmails": {
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "The emails of the workspace"
                      },
                      "automaticBilling": {
                        "type": "boolean",
                        "description": "The automatic billing of the workspace"
                      },
                      "marketplaceProfile": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string",
                            "description": "The username of the workspace"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description of the workspace"
                          },
                          "email": {
                            "type": "string",
                            "description": "The email of the workspace"
                          },
                          "photoURL": {
                            "type": "string",
                            "description": "The photo URL of the workspace"
                          }
                        },
                        "additionalProperties": false,
                        "description": "The marketplace profile of the workspace"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "required": ["updates"],
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The id of the workspace"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {}
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "default": { "$ref": "#/components/responses/error" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Authorization": { "type": "http", "scheme": "bearer" }
    },
    "responses": {
      "error": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "code": { "type": "string" },
                "issues": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { "message": { "type": "string" } },
                    "required": ["message"],
                    "additionalProperties": false
                  }
                }
              },
              "required": ["message", "code"],
              "additionalProperties": false
            }
          }
        }
      }
    }
  }
}
